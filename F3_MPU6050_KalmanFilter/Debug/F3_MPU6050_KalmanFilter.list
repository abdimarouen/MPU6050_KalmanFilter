
F3_MPU6050_KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005378  08005378  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005378  08005378  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005378  08005378  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000088  08005408  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005408  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010620  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262e  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00032d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00033890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8cd  00000000  00000000  00034320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e68c  00000000  00000000  00053bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b10f4  00000000  00000000  00062279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011336d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003550  00000000  00000000  001133c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005324 	.word	0x08005324

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08005324 	.word	0x08005324

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f000 fea1 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f871 	bl	8000c30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  _init_get_us();
 8000b4e:	f000 f845 	bl	8000bdc <_init_get_us>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b52:	f000 f959 	bl	8000e08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b56:	f000 f939 	bl	8000dcc <MX_DMA_Init>
  MX_I2C1_Init();
 8000b5a:	f000 f8c7 	bl	8000cec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b5e:	f000 f905 	bl	8000d6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init() == 1){HAL_Delay(100); MX_I2C1_Init(); }; // mpu6050 init
 8000b62:	e004      	b.n	8000b6e <main+0x2e>
 8000b64:	2064      	movs	r0, #100	; 0x64
 8000b66:	f000 fef7 	bl	8001958 <HAL_Delay>
 8000b6a:	f000 f8bf 	bl	8000cec <MX_I2C1_Init>
 8000b6e:	f000 fb61 	bl	8001234 <MPU6050_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d0f5      	beq.n	8000b64 <main+0x24>
  //MPU6050_ACC_CALIB();
  MPU6050_GYRO_CALIB();
 8000b78:	f000 fd6c 	bl	8001654 <MPU6050_GYRO_CALIB>
  /* USER CODE END 2 */

  struct KalmanFilter *kalmanPITCH = newKalmanFilter(); // Create the Kalman instances
 8000b7c:	f003 fedd 	bl	800493a <newKalmanFilter>
 8000b80:	6078      	str	r0, [r7, #4]
  KalmanFilter_set(kalmanPITCH, 2020);
 8000b82:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f003 fee3 	bl	8004952 <KalmanFilter_set>
  deleteKalmanFilter(kalmanPITCH);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f003 feed 	bl	800496c <deleteKalmanFilter>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  _init_get_us();
 8000b92:	f000 f823 	bl	8000bdc <_init_get_us>

	  //MPU6050_GET_ACC (&Ax, &Ay, &Az);
      MPU6050_GET_GYRO (&Gx, &Gy, &Gz);
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <main+0x80>)
 8000b98:	490a      	ldr	r1, [pc, #40]	; (8000bc4 <main+0x84>)
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <main+0x88>)
 8000b9c:	f000 fc94 	bl	80014c8 <MPU6050_GET_GYRO>
      _get_acc_angle(&PITCH, &ROLL);
 8000ba0:	490a      	ldr	r1, [pc, #40]	; (8000bcc <main+0x8c>)
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <main+0x90>)
 8000ba4:	f000 fdc4 	bl	8001730 <_get_acc_angle>

      //kalAngleX = kalmanROLL.getAngle(ROLL, gyroXrate, dt);


      Tick = get_us();
 8000ba8:	f000 f82a 	bl	8000c00 <get_us>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <main+0x94>)
 8000bb0:	6013      	str	r3, [r2, #0]

      HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <main+0x98>)
 8000bb8:	f001 fabc 	bl	8002134 <HAL_GPIO_TogglePin>
	  _init_get_us();
 8000bbc:	e7e9      	b.n	8000b92 <main+0x52>
 8000bbe:	bf00      	nop
 8000bc0:	200001f4 	.word	0x200001f4
 8000bc4:	2000011c 	.word	0x2000011c
 8000bc8:	200000c4 	.word	0x200000c4
 8000bcc:	200000c8 	.word	0x200000c8
 8000bd0:	200001ec 	.word	0x200001ec
 8000bd4:	200000a4 	.word	0x200000a4
 8000bd8:	48001000 	.word	0x48001000

08000bdc <_init_get_us>:
  }
  /* USER CODE END 3 */
}

void _init_get_us(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	/* DWT struct is defined inside the core_cm4.h file */
	DWT->CTRL |= 1 ; // enable the counter
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <_init_get_us+0x20>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_init_get_us+0x20>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0; // reset the counter
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <_init_get_us+0x20>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e0001000 	.word	0xe0001000

08000c00 <get_us>:

uint32_t get_us(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	return (uint32_t) DWT->CYCCNT/ (SystemCoreClock/1000000L);
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <get_us+0x24>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <get_us+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <get_us+0x2c>)
 8000c0e:	fba1 1303 	umull	r1, r3, r1, r3
 8000c12:	0c9b      	lsrs	r3, r3, #18
 8000c14:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e0001000 	.word	0xe0001000
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	431bde83 	.word	0x431bde83

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09e      	sub	sp, #120	; 0x78
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c3a:	2228      	movs	r2, #40	; 0x28
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f004 fa5c 	bl	80050fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	223c      	movs	r2, #60	; 0x3c
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 fa4e 	bl	80050fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c60:	2303      	movs	r3, #3
 8000c62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c72:	2310      	movs	r3, #16
 8000c74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c84:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 ffde 	bl	8002c4c <HAL_RCC_OscConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c96:	f000 f929 	bl	8000eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 fed0 	bl	8003a5c <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cc2:	f000 f913 	bl	8000eec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000cc6:	2321      	movs	r3, #33	; 0x21
 8000cc8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 f8f7 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ce0:	f000 f904 	bl	8000eec <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3778      	adds	r7, #120	; 0x78
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_I2C1_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <MX_I2C1_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d28:	f001 fa1e 	bl	8002168 <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 f8db 	bl	8000eec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d3a:	f001 feef 	bl	8002b1c <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 f8d2 	bl	8000eec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d4c:	f001 ff31 	bl	8002bb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 f8c9 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000cc 	.word	0x200000cc
 8000d64:	40005400 	.word	0x40005400
 8000d68:	2000090e 	.word	0x2000090e

08000d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <MX_USART1_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000db0:	f003 fa3a 	bl	8004228 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 f897 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000164 	.word	0x20000164
 8000dc8:	40013800 	.word	0x40013800

08000dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_DMA_Init+0x38>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <MX_DMA_Init+0x38>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_DMA_Init+0x38>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 feb1 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000df4:	200f      	movs	r0, #15
 8000df6:	f000 feca 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a30      	ldr	r2, [pc, #192]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a24      	ldr	r2, [pc, #144]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_GPIO_Init+0xdc>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <MX_GPIO_Init+0xe0>)
 8000e9e:	f001 f931 	bl	8002104 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 ffaa 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000ebc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000ec0:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_GPIO_Init+0xe0>)
 8000ed6:	f000 ff9b 	bl	8001e10 <HAL_GPIO_Init>

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48001000 	.word	0x48001000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x44>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_MspInit+0x44>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x44>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x44>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f2e:	2007      	movs	r0, #7
 8000f30:	f000 fe06 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_I2C_MspInit+0x7c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d127      	bne.n	8000fb2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_I2C_MspInit+0x80>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <HAL_I2C_MspInit+0x80>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_I2C_MspInit+0x80>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000f7a:	23c0      	movs	r3, #192	; 0xc0
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <HAL_I2C_MspInit+0x84>)
 8000f96:	f000 ff3b 	bl	8001e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_I2C_MspInit+0x80>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_I2C_MspInit+0x80>)
 8000fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_I2C_MspInit+0x80>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a2a      	ldr	r2, [pc, #168]	; (8001090 <HAL_UART_MspInit+0xc8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d14d      	bne.n	8001086 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_UART_MspInit+0xcc>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a29      	ldr	r2, [pc, #164]	; (8001094 <HAL_UART_MspInit+0xcc>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_UART_MspInit+0xcc>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_UART_MspInit+0xcc>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <HAL_UART_MspInit+0xcc>)
 8001008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_UART_MspInit+0xcc>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800101a:	2330      	movs	r3, #48	; 0x30
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800102a:	2307      	movs	r3, #7
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4818      	ldr	r0, [pc, #96]	; (8001098 <HAL_UART_MspInit+0xd0>)
 8001036:	f000 feeb 	bl	8001e10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_UART_MspInit+0xd4>)
 800103c:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <HAL_UART_MspInit+0xd8>)
 800103e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_UART_MspInit+0xd4>)
 800104e:	2280      	movs	r2, #128	; 0x80
 8001050:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_UART_MspInit+0xd4>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <HAL_UART_MspInit+0xd4>)
 800106c:	f000 fda9 	bl	8001bc2 <HAL_DMA_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001076:	f7ff ff39 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_UART_MspInit+0xd4>)
 800107e:	671a      	str	r2, [r3, #112]	; 0x70
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_UART_MspInit+0xd4>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40013800 	.word	0x40013800
 8001094:	40021000 	.word	0x40021000
 8001098:	48000800 	.word	0x48000800
 800109c:	20000120 	.word	0x20000120
 80010a0:	40020058 	.word	0x40020058

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 fc12 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <DMA1_Channel5_IRQHandler+0x10>)
 80010fe:	f000 fda7 	bl	8001c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000120 	.word	0x20000120

0800110c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	return 1;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_kill>:

int _kill(int pid, int sig)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001126:	f003 ffaf 	bl	8005088 <__errno>
 800112a:	4603      	mov	r3, r0
 800112c:	2216      	movs	r2, #22
 800112e:	601a      	str	r2, [r3, #0]
	return -1;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_exit>:

void _exit (int status)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffe7 	bl	800111c <_kill>
	while (1) {}		/* Make sure we hang here */
 800114e:	e7fe      	b.n	800114e <_exit+0x12>

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f003 ff82 	bl	8005088 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000a000 	.word	0x2000a000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	200000a8 	.word	0x200000a8
 80011b8:	20000210 	.word	0x20000210

080011bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <LoopForever+0x6>)
  ldr r1, =_edata
 80011e6:	490e      	ldr	r1, [pc, #56]	; (8001220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <LoopForever+0xe>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011fc:	4c0b      	ldr	r4, [pc, #44]	; (800122c <LoopForever+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800120a:	f7ff ffd7 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120e:	f003 ff41 	bl	8005094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001212:	f7ff fc95 	bl	8000b40 <main>

08001216 <LoopForever>:

LoopForever:
    b LoopForever
 8001216:	e7fe      	b.n	8001216 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001218:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001224:	08005380 	.word	0x08005380
  ldr r2, =_sbss
 8001228:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800122c:	20000210 	.word	0x20000210

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>
	...

08001234 <MPU6050_Init>:
float XGeroCalib = 0.f;
float YGeroCalib = 0.f;
float ZGeroCalib = 0.f;

int MPU6050_Init (void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
	uint8_t check, data;

	/* MPU6050 start init sequence */

	HAL_Delay(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f000 fb8c 	bl	8001958 <HAL_Delay>
	data = _Reset_;
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), PWR_MGMT_1, 1, &data, 1, 1000); 			//reset all
 8001244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	226b      	movs	r2, #107	; 0x6b
 8001256:	21d0      	movs	r1, #208	; 0xd0
 8001258:	4847      	ldr	r0, [pc, #284]	; (8001378 <MPU6050_Init+0x144>)
 800125a:	f001 f815 	bl	8002288 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800125e:	2064      	movs	r0, #100	; 0x64
 8001260:	f000 fb7a 	bl	8001958 <HAL_Delay>
	data = _GyroAcc_reset;
 8001264:	2307      	movs	r3, #7
 8001266:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), SIGNAL_PATH_RESET, 1, &data, 1, 1000); 		//_GyroAcc_reset
 8001268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	1dbb      	adds	r3, r7, #6
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	2268      	movs	r2, #104	; 0x68
 800127a:	21d0      	movs	r1, #208	; 0xd0
 800127c:	483e      	ldr	r0, [pc, #248]	; (8001378 <MPU6050_Init+0x144>)
 800127e:	f001 f803 	bl	8002288 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f000 fb68 	bl	8001958 <HAL_Delay>

	/* MPU6050 end init sequence */

	HAL_I2C_Mem_Read(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), MPU6050_WHO_AM_I_REG, 1, &check, 1, 1000); 	//check MPU6050_WHO_AM_I_REG
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	2275      	movs	r2, #117	; 0x75
 800129a:	21d0      	movs	r1, #208	; 0xd0
 800129c:	4836      	ldr	r0, [pc, #216]	; (8001378 <MPU6050_Init+0x144>)
 800129e:	f001 f907 	bl	80024b0 <HAL_I2C_Mem_Read>
	HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	; 0x64
 80012a4:	f000 fb58 	bl	8001958 <HAL_Delay>

    if (check == 0x68)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b68      	cmp	r3, #104	; 0x68
 80012ac:	d14f      	bne.n	800134e <MPU6050_Init+0x11a>
    {
        data = _Wake_up;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), PWR_MGMT_1, 1, &data, 1, 1000); 		//Wakeup MPU
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	1dbb      	adds	r3, r7, #6
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	226b      	movs	r2, #107	; 0x6b
 80012c4:	21d0      	movs	r1, #208	; 0xd0
 80012c6:	482c      	ldr	r0, [pc, #176]	; (8001378 <MPU6050_Init+0x144>)
 80012c8:	f000 ffde 	bl	8002288 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	f000 fb43 	bl	8001958 <HAL_Delay>

        data = _SMPLRT_DIV_7;
 80012d2:	2307      	movs	r3, #7
 80012d4:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), SMPLRT_DIV_REG, 1, &data, 1, 1000); 	//choose rate
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	1dbb      	adds	r3, r7, #6
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	2219      	movs	r2, #25
 80012e8:	21d0      	movs	r1, #208	; 0xd0
 80012ea:	4823      	ldr	r0, [pc, #140]	; (8001378 <MPU6050_Init+0x144>)
 80012ec:	f000 ffcc 	bl	8002288 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f000 fb31 	bl	8001958 <HAL_Delay>
        data = _Acc_scale;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), ACCEL_CONFIG, 1, &data, 1, 1000);		//ACC 2g init_config
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	1dbb      	adds	r3, r7, #6
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	221c      	movs	r2, #28
 800130c:	21d0      	movs	r1, #208	; 0xd0
 800130e:	481a      	ldr	r0, [pc, #104]	; (8001378 <MPU6050_Init+0x144>)
 8001310:	f000 ffba 	bl	8002288 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f000 fb1f 	bl	8001958 <HAL_Delay>
        data = _Gyro_scale;
 800131a:	2300      	movs	r3, #0
 800131c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), GYRO_CONFIG, 1, &data, 1, 1000);		//Gero 250dps init_config
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2301      	movs	r3, #1
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	1dbb      	adds	r3, r7, #6
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	221b      	movs	r2, #27
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4811      	ldr	r0, [pc, #68]	; (8001378 <MPU6050_Init+0x144>)
 8001334:	f000 ffa8 	bl	8002288 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f000 fb0d 	bl	8001958 <HAL_Delay>



        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <MPU6050_Init+0x148>)
 8001346:	f000 fedd 	bl	8002104 <HAL_GPIO_WritePin>

        return 0;
 800134a:	2300      	movs	r3, #0
 800134c:	e00f      	b.n	800136e <MPU6050_Init+0x13a>

    }
    else {
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <MPU6050_Init+0x148>)
 8001356:	f000 fed5 	bl	8002104 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800135a:	2064      	movs	r0, #100	; 0x64
 800135c:	f000 fafc 	bl	8001958 <HAL_Delay>
        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MPU6050_Init+0x148>)
 8001368:	f000 fecc 	bl	8002104 <HAL_GPIO_WritePin>

        return 1;
 800136c:	2301      	movs	r3, #1
    }
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000cc 	.word	0x200000cc
 800137c:	48001000 	.word	0x48001000

08001380 <MPU6050_GET_ACC>:

void MPU6050_GET_ACC (float* Ax, float* Ay, float* Az) //Get ACC Data
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af04      	add	r7, sp, #16
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;

    HAL_I2C_Mem_Read(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), ACCEL_XOUT_H, 1, &data[0], 6, 1000);
 800138c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2306      	movs	r3, #6
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	223b      	movs	r2, #59	; 0x3b
 80013a0:	21d0      	movs	r1, #208	; 0xd0
 80013a2:	483f      	ldr	r0, [pc, #252]	; (80014a0 <MPU6050_GET_ACC+0x120>)
 80013a4:	f001 f884 	bl	80024b0 <HAL_I2C_Mem_Read>
    Accel_X_RAW = (int16_t)((data[0] << 8) | data[1]);
 80013a8:	7d3b      	ldrb	r3, [r7, #20]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7d7b      	ldrb	r3, [r7, #21]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	83fb      	strh	r3, [r7, #30]
    Accel_Y_RAW = (int16_t)((data[2] << 8) | data[3]);
 80013b6:	7dbb      	ldrb	r3, [r7, #22]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	83bb      	strh	r3, [r7, #28]
    Accel_Z_RAW = (int16_t)((data[4] << 8) | data[5]);
 80013c4:	7e3b      	ldrb	r3, [r7, #24]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	7e7b      	ldrb	r3, [r7, #25]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	837b      	strh	r3, [r7, #26]

    *Ax = map(Accel_X_RAW / _Acc_scale_div, XminusCalib, XplusCalib, -0.98, 0.98);
 80013d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013de:	eddf 6a31 	vldr	s13, [pc, #196]	; 80014a4 <MPU6050_GET_ACC+0x124>
 80013e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <MPU6050_GET_ACC+0x128>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <MPU6050_GET_ACC+0x12c>)
 80013ee:	edd3 6a00 	vldr	s13, [r3]
 80013f2:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 80014b0 <MPU6050_GET_ACC+0x130>
 80013f6:	eddf 1a2f 	vldr	s3, [pc, #188]	; 80014b4 <MPU6050_GET_ACC+0x134>
 80013fa:	eeb0 1a66 	vmov.f32	s2, s13
 80013fe:	eef0 0a67 	vmov.f32	s1, s15
 8001402:	eeb0 0a47 	vmov.f32	s0, s14
 8001406:	f000 fa13 	bl	8001830 <map>
 800140a:	eef0 7a40 	vmov.f32	s15, s0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	edc3 7a00 	vstr	s15, [r3]
    *Ay = map(Accel_Y_RAW / _Acc_scale_div, YminusCalib, YplusCalib, -0.98, 0.98);
 8001414:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001420:	eddf 6a20 	vldr	s13, [pc, #128]	; 80014a4 <MPU6050_GET_ACC+0x124>
 8001424:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MPU6050_GET_ACC+0x138>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <MPU6050_GET_ACC+0x13c>)
 8001430:	edd3 6a00 	vldr	s13, [r3]
 8001434:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 80014b0 <MPU6050_GET_ACC+0x130>
 8001438:	eddf 1a1e 	vldr	s3, [pc, #120]	; 80014b4 <MPU6050_GET_ACC+0x134>
 800143c:	eeb0 1a66 	vmov.f32	s2, s13
 8001440:	eef0 0a67 	vmov.f32	s1, s15
 8001444:	eeb0 0a47 	vmov.f32	s0, s14
 8001448:	f000 f9f2 	bl	8001830 <map>
 800144c:	eef0 7a40 	vmov.f32	s15, s0
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	edc3 7a00 	vstr	s15, [r3]
    *Az = map(Accel_Z_RAW / _Acc_scale_div, ZminusCalib, ZplusCalib, -0.98, 0.98);
 8001456:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001462:	eddf 6a10 	vldr	s13, [pc, #64]	; 80014a4 <MPU6050_GET_ACC+0x124>
 8001466:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MPU6050_GET_ACC+0x140>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MPU6050_GET_ACC+0x144>)
 8001472:	edd3 6a00 	vldr	s13, [r3]
 8001476:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 80014b0 <MPU6050_GET_ACC+0x130>
 800147a:	eddf 1a0e 	vldr	s3, [pc, #56]	; 80014b4 <MPU6050_GET_ACC+0x134>
 800147e:	eeb0 1a66 	vmov.f32	s2, s13
 8001482:	eef0 0a67 	vmov.f32	s1, s15
 8001486:	eeb0 0a47 	vmov.f32	s0, s14
 800148a:	f000 f9d1 	bl	8001830 <map>
 800148e:	eef0 7a40 	vmov.f32	s15, s0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a00 	vstr	s15, [r3]
}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200000cc 	.word	0x200000cc
 80014a4:	46800000 	.word	0x46800000
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000004 	.word	0x20000004
 80014b0:	3f7ae148 	.word	0x3f7ae148
 80014b4:	bf7ae148 	.word	0xbf7ae148
 80014b8:	20000010 	.word	0x20000010
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	20000018 	.word	0x20000018
 80014c4:	20000014 	.word	0x20000014

080014c8 <MPU6050_GET_GYRO>:

void MPU6050_GET_GYRO (float* Gx, float* Gy, float* Gz) //Get Gyro Data
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    int16_t GERO_X_RAW, GERO_Y_RAW, GERO_Z_RAW;

    HAL_I2C_Mem_Read(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), GYRO_XOUT_H, 1, &data[0], 6, 1000);
 80014d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2306      	movs	r3, #6
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	2243      	movs	r2, #67	; 0x43
 80014e8:	21d0      	movs	r1, #208	; 0xd0
 80014ea:	4829      	ldr	r0, [pc, #164]	; (8001590 <MPU6050_GET_GYRO+0xc8>)
 80014ec:	f000 ffe0 	bl	80024b0 <HAL_I2C_Mem_Read>
    GERO_X_RAW = (int16_t)((data[0] << 8) | data[1]);
 80014f0:	7d3b      	ldrb	r3, [r7, #20]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7d7b      	ldrb	r3, [r7, #21]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	83fb      	strh	r3, [r7, #30]
    GERO_Y_RAW = (int16_t)((data[2] << 8) | data[3]);
 80014fe:	7dbb      	ldrb	r3, [r7, #22]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	83bb      	strh	r3, [r7, #28]
    GERO_Z_RAW = (int16_t)((data[4] << 8) | data[5]);
 800150c:	7e3b      	ldrb	r3, [r7, #24]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	7e7b      	ldrb	r3, [r7, #25]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	837b      	strh	r3, [r7, #26]

    *Gx = (GERO_X_RAW / _Gyro_scale_div) - XGeroCalib;
 800151a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001594 <MPU6050_GET_GYRO+0xcc>
 800152a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MPU6050_GET_GYRO+0xd0>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	edc3 7a00 	vstr	s15, [r3]
    *Gy = (GERO_Y_RAW / _Gyro_scale_div) - YGeroCalib;
 800153e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001594 <MPU6050_GET_GYRO+0xcc>
 800154e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <MPU6050_GET_GYRO+0xd4>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	edc3 7a00 	vstr	s15, [r3]
    *Gz = (GERO_Z_RAW / _Gyro_scale_div) - ZGeroCalib;
 8001562:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001594 <MPU6050_GET_GYRO+0xcc>
 8001572:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MPU6050_GET_GYRO+0xd8>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edc3 7a00 	vstr	s15, [r3]
}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000cc 	.word	0x200000cc
 8001594:	43030000 	.word	0x43030000
 8001598:	200000ac 	.word	0x200000ac
 800159c:	200000b0 	.word	0x200000b0
 80015a0:	200000b4 	.word	0x200000b4

080015a4 <MPU6050_GET_NO_CAILB_GYRO>:
    *Ay = Accel_Y_RAW / _Acc_scale_div;
    *Az = Accel_Z_RAW / _Acc_scale_div;
}

void MPU6050_GET_NO_CAILB_GYRO (float* Gx, float* Gy, float* Gz) //Get Gyro Data
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af04      	add	r7, sp, #16
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    int16_t GERO_X_RAW, GERO_Y_RAW, GERO_Z_RAW;

    HAL_I2C_Mem_Read(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), GYRO_XOUT_H, 1, &data[0], 6, 1000);
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2306      	movs	r3, #6
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	2243      	movs	r2, #67	; 0x43
 80015c4:	21d0      	movs	r1, #208	; 0xd0
 80015c6:	4821      	ldr	r0, [pc, #132]	; (800164c <MPU6050_GET_NO_CAILB_GYRO+0xa8>)
 80015c8:	f000 ff72 	bl	80024b0 <HAL_I2C_Mem_Read>
    GERO_X_RAW = (int16_t)((data[0] << 8) | data[1]);
 80015cc:	7d3b      	ldrb	r3, [r7, #20]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	7d7b      	ldrb	r3, [r7, #21]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	83fb      	strh	r3, [r7, #30]
    GERO_Y_RAW = (int16_t)((data[2] << 8) | data[3]);
 80015da:	7dbb      	ldrb	r3, [r7, #22]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	83bb      	strh	r3, [r7, #28]
    GERO_Z_RAW = (int16_t)((data[4] << 8) | data[5]);
 80015e8:	7e3b      	ldrb	r3, [r7, #24]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	7e7b      	ldrb	r3, [r7, #25]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	837b      	strh	r3, [r7, #26]

    *Gx = GERO_X_RAW / _Gyro_scale_div;
 80015f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001602:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001650 <MPU6050_GET_NO_CAILB_GYRO+0xac>
 8001606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	edc3 7a00 	vstr	s15, [r3]
    *Gy = GERO_Y_RAW / _Gyro_scale_div;
 8001610:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800161c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001650 <MPU6050_GET_NO_CAILB_GYRO+0xac>
 8001620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	edc3 7a00 	vstr	s15, [r3]
    *Gz = GERO_Z_RAW / _Gyro_scale_div;
 800162a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001636:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001650 <MPU6050_GET_NO_CAILB_GYRO+0xac>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edc3 7a00 	vstr	s15, [r3]
}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200000cc 	.word	0x200000cc
 8001650:	43030000 	.word	0x43030000

08001654 <MPU6050_GYRO_CALIB>:
    HAL_Delay(_Led_time_Calib_Blink_time_ms);

}

void MPU6050_GYRO_CALIB(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
	float Gx, Gy, Gz;
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001660:	482e      	ldr	r0, [pc, #184]	; (800171c <MPU6050_GYRO_CALIB+0xc8>)
 8001662:	f000 fd4f 	bl	8002104 <HAL_GPIO_WritePin>
	HAL_Delay(_Led_time_Calib_Blink_time_ms);
 8001666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166a:	f000 f975 	bl	8001958 <HAL_Delay>
	for(int i = 1; i<= _Calib_Gero;i++)
 800166e:	2301      	movs	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e027      	b.n	80016c4 <MPU6050_GYRO_CALIB+0x70>
	{
		MPU6050_GET_NO_CAILB_GYRO (&Gx, &Gy, &Gz);
 8001674:	463a      	mov	r2, r7
 8001676:	1d39      	adds	r1, r7, #4
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff91 	bl	80015a4 <MPU6050_GET_NO_CAILB_GYRO>
		XGeroCalib += Gx;
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <MPU6050_GYRO_CALIB+0xcc>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	edd7 7a02 	vldr	s15, [r7, #8]
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <MPU6050_GYRO_CALIB+0xcc>)
 8001692:	edc3 7a00 	vstr	s15, [r3]
		YGeroCalib += Gy;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <MPU6050_GYRO_CALIB+0xd0>)
 8001698:	ed93 7a00 	vldr	s14, [r3]
 800169c:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MPU6050_GYRO_CALIB+0xd0>)
 80016a6:	edc3 7a00 	vstr	s15, [r3]
		ZGeroCalib += Gz;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MPU6050_GYRO_CALIB+0xd4>)
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	edd7 7a00 	vldr	s15, [r7]
 80016b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MPU6050_GYRO_CALIB+0xd4>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 1; i<= _Calib_Gero;i++)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ca:	ddd3      	ble.n	8001674 <MPU6050_GYRO_CALIB+0x20>
	}

	XGeroCalib /= _Calib_Gero;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MPU6050_GYRO_CALIB+0xcc>)
 80016ce:	ed93 7a00 	vldr	s14, [r3]
 80016d2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800172c <MPU6050_GYRO_CALIB+0xd8>
 80016d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MPU6050_GYRO_CALIB+0xcc>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]
	YGeroCalib /= _Calib_Gero;
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <MPU6050_GYRO_CALIB+0xd0>)
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	eddf 6a11 	vldr	s13, [pc, #68]	; 800172c <MPU6050_GYRO_CALIB+0xd8>
 80016ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <MPU6050_GYRO_CALIB+0xd0>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]
	ZGeroCalib /= _Calib_Gero;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MPU6050_GYRO_CALIB+0xd4>)
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800172c <MPU6050_GYRO_CALIB+0xd8>
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MPU6050_GYRO_CALIB+0xd4>)
 8001704:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <MPU6050_GYRO_CALIB+0xc8>)
 8001710:	f000 fcf8 	bl	8002104 <HAL_GPIO_WritePin>

}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	48001000 	.word	0x48001000
 8001720:	200000ac 	.word	0x200000ac
 8001724:	200000b0 	.word	0x200000b0
 8001728:	200000b4 	.word	0x200000b4
 800172c:	447a0000 	.word	0x447a0000

08001730 <_get_acc_angle>:


void _get_acc_angle(float* PITCH, float* ROLL)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	float Accx, Accy, Accz;
	float acc_total_vector;

	MPU6050_GET_ACC (&Accx, &Accy, &Accz);
 800173a:	f107 0208 	add.w	r2, r7, #8
 800173e:	f107 010c 	add.w	r1, r7, #12
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fe1a 	bl	8001380 <MPU6050_GET_ACC>

	acc_total_vector = sqrt((Accx*Accx) + (Accy*Accy)+(Accz*Accz));
 800174c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001750:	edd7 7a04 	vldr	s15, [r7, #16]
 8001754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001758:	edd7 6a03 	vldr	s13, [r7, #12]
 800175c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001768:	edd7 6a02 	vldr	s13, [r7, #8]
 800176c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	ee17 0a90 	vmov	r0, s15
 800177c:	f7fe fe88 	bl	8000490 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ec43 2b10 	vmov	d0, r2, r3
 8001788:	f003 f964 	bl	8004a54 <sqrt>
 800178c:	ec53 2b10 	vmov	r2, r3, d0
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f984 	bl	8000aa0 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	617b      	str	r3, [r7, #20]

	*PITCH = asin((float) Accy/acc_total_vector) * 57.2958f; //57,2958 for the conversion from radian to degree
 800179c:	ed97 7a03 	vldr	s14, [r7, #12]
 80017a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017a8:	ee16 0a90 	vmov	r0, s13
 80017ac:	f7fe fe70 	bl	8000490 <__aeabi_f2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	ec43 2b10 	vmov	d0, r2, r3
 80017b8:	f003 f912 	bl	80049e0 <asin>
 80017bc:	ec51 0b10 	vmov	r0, r1, d0
 80017c0:	a319      	add	r3, pc, #100	; (adr r3, 8001828 <_get_acc_angle+0xf8>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe febb 	bl	8000540 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f965 	bl	8000aa0 <__aeabi_d2f>
 80017d6:	4602      	mov	r2, r0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	601a      	str	r2, [r3, #0]
	*ROLL = asin((float) Accx/acc_total_vector) * 57.2958f; //57,2958 for the conversion from radian to degree
 80017dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80017e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017e8:	ee16 0a90 	vmov	r0, s13
 80017ec:	f7fe fe50 	bl	8000490 <__aeabi_f2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	ec43 2b10 	vmov	d0, r2, r3
 80017f8:	f003 f8f2 	bl	80049e0 <asin>
 80017fc:	ec51 0b10 	vmov	r0, r1, d0
 8001800:	a309      	add	r3, pc, #36	; (adr r3, 8001828 <_get_acc_angle+0xf8>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fe9b 	bl	8000540 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f945 	bl	8000aa0 <__aeabi_d2f>
 8001816:	4602      	mov	r2, r0
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	f3af 8000 	nop.w
 8001828:	c0000000 	.word	0xc0000000
 800182c:	404ca5dc 	.word	0x404ca5dc

08001830 <map>:


float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	ed87 0a05 	vstr	s0, [r7, #20]
 800183a:	edc7 0a04 	vstr	s1, [r7, #16]
 800183e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001842:	edc7 1a02 	vstr	s3, [r7, #8]
 8001846:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800184a:	ed97 7a05 	vldr	s14, [r7, #20]
 800184e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001852:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001856:	edd7 6a01 	vldr	s13, [r7, #4]
 800185a:	edd7 7a02 	vldr	s15, [r7, #8]
 800185e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001862:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001866:	ed97 7a03 	vldr	s14, [r7, #12]
 800186a:	edd7 7a04 	vldr	s15, [r7, #16]
 800186e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001876:	edd7 7a02 	vldr	s15, [r7, #8]
 800187a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_Init+0x28>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_Init+0x28>)
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 f94f 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 f808 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7ff fb26 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40022000 	.word	0x40022000

080018b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_InitTick+0x54>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x58>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f967 	bl	8001baa <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00e      	b.n	8001904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d80a      	bhi.n	8001902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	2200      	movs	r2, #0
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f000 f92f 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <HAL_InitTick+0x5c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e000      	b.n	8001904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000000 	.word	0x20000000
 8001910:	20000020 	.word	0x20000020
 8001914:	2000001c 	.word	0x2000001c

08001918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000020 	.word	0x20000020
 800193c:	200001fc 	.word	0x200001fc

08001940 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;  
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200001fc 	.word	0x200001fc

08001958 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff ffee 	bl	8001940 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d005      	beq.n	800197e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_Delay+0x44>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800197e:	bf00      	nop
 8001980:	f7ff ffde 	bl	8001940 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d8f7      	bhi.n	8001980 <HAL_Delay+0x28>
  {
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000020 	.word	0x20000020

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	; (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff8e 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff29 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff3e 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff8e 	bl	8001a94 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5d 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff31 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e037      	b.n	8001c48 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8b4 	bl	8001d98 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}  
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d024      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x72>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01f      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0204 	bic.w	r2, r2, #4
 8001c9e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	2104      	movs	r1, #4
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d06a      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cc0:	e065      	b.n	8001d8e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02c      	beq.n	8001d2c <HAL_DMA_IRQHandler+0xdc>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d027      	beq.n	8001d2c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10b      	bne.n	8001d02 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 020a 	bic.w	r2, r2, #10
 8001cf8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d10:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d035      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d2a:	e030      	b.n	8001d8e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	2208      	movs	r2, #8
 8001d32:	409a      	lsls	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d028      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x13e>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d023      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 020e 	bic.w	r2, r2, #14
 8001d54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	2101      	movs	r1, #1
 8001d60:	fa01 f202 	lsl.w	r2, r1, r2
 8001d64:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d004      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
    }
  }
}  
 8001d8c:	e7ff      	b.n	8001d8e <HAL_DMA_IRQHandler+0x13e>
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <DMA_CalcBaseAndBitshift+0x60>)
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d80f      	bhi.n	8001dcc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <DMA_CalcBaseAndBitshift+0x64>)
 8001db4:	4413      	add	r3, r2
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <DMA_CalcBaseAndBitshift+0x68>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	009a      	lsls	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <DMA_CalcBaseAndBitshift+0x6c>)
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001dca:	e00e      	b.n	8001dea <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <DMA_CalcBaseAndBitshift+0x70>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <DMA_CalcBaseAndBitshift+0x68>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	009a      	lsls	r2, r3, #2
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <DMA_CalcBaseAndBitshift+0x74>)
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40020407 	.word	0x40020407
 8001dfc:	bffdfff8 	.word	0xbffdfff8
 8001e00:	cccccccd 	.word	0xcccccccd
 8001e04:	40020000 	.word	0x40020000
 8001e08:	bffdfbf8 	.word	0xbffdfbf8
 8001e0c:	40020400 	.word	0x40020400

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e154      	b.n	80020ca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8146 	beq.w	80020c4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d00b      	beq.n	8001e58 <HAL_GPIO_Init+0x48>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d007      	beq.n	8001e58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e4c:	2b11      	cmp	r3, #17
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b12      	cmp	r3, #18
 8001e56:	d130      	bne.n	8001eba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8e:	2201      	movs	r2, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 0201 	and.w	r2, r3, #1
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0xea>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d123      	bne.n	8001f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	6939      	ldr	r1, [r7, #16]
 8001f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0203 	and.w	r2, r3, #3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80a0 	beq.w	80020c4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f84:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <HAL_GPIO_Init+0x2d8>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <HAL_GPIO_Init+0x2d8>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <HAL_GPIO_Init+0x2d8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f9c:	4a53      	ldr	r2, [pc, #332]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fc6:	d019      	beq.n	8001ffc <HAL_GPIO_Init+0x1ec>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a49      	ldr	r2, [pc, #292]	; (80020f0 <HAL_GPIO_Init+0x2e0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a48      	ldr	r2, [pc, #288]	; (80020f4 <HAL_GPIO_Init+0x2e4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a47      	ldr	r2, [pc, #284]	; (80020f8 <HAL_GPIO_Init+0x2e8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_Init+0x1e0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a46      	ldr	r2, [pc, #280]	; (80020fc <HAL_GPIO_Init+0x2ec>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_GPIO_Init+0x1dc>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e008      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001fec:	2305      	movs	r3, #5
 8001fee:	e006      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e004      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800200e:	4937      	ldr	r1, [pc, #220]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201c:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800206a:	4a25      	ldr	r2, [pc, #148]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_GPIO_Init+0x2f0>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f47f aea3 	bne.w	8001e20 <HAL_GPIO_Init+0x10>
  }
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010000 	.word	0x40010000
 80020f0:	48000400 	.word	0x48000400
 80020f4:	48000800 	.word	0x48000800
 80020f8:	48000c00 	.word	0x48000c00
 80020fc:	48001000 	.word	0x48001000
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002120:	e002      	b.n	8002128 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	43d9      	mvns	r1, r3
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	400b      	ands	r3, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e081      	b.n	800227e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fed6 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e006      	b.n	80021f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d104      	bne.n	8002202 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	ea42 0103 	orr.w	r1, r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	021a      	lsls	r2, r3, #8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	460b      	mov	r3, r1
 800229c:	813b      	strh	r3, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	f040 80f9 	bne.w	80024a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_I2C_Mem_Write+0x34>
 80022b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d105      	bne.n	80022c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0ed      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Mem_Write+0x4e>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e0e6      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022de:	f7ff fb2f 	bl	8001940 <HAL_GetTick>
 80022e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2319      	movs	r3, #25
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fac3 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0d1      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2221      	movs	r2, #33	; 0x21
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a3a      	ldr	r2, [r7, #32]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002328:	88f8      	ldrh	r0, [r7, #6]
 800232a:	893a      	ldrh	r2, [r7, #8]
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4603      	mov	r3, r0
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f9d3 	bl	80026e4 <I2C_RequestMemoryWrite>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0a9      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2bff      	cmp	r3, #255	; 0xff
 8002358:	d90e      	bls.n	8002378 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	b2da      	uxtb	r2, r3
 8002366:	8979      	ldrh	r1, [r7, #10]
 8002368:	2300      	movs	r3, #0
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fba5 	bl	8002ac0 <I2C_TransferConfig>
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	2300      	movs	r3, #0
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fb94 	bl	8002ac0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 faad 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e07b      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d034      	beq.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d130      	bne.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fa3f 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e04d      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	d90e      	bls.n	8002430 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	22ff      	movs	r2, #255	; 0xff
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fb49 	bl	8002ac0 <I2C_TransferConfig>
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fb38 	bl	8002ac0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d19e      	bne.n	8002398 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fa8c 	bl	800297c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e01a      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2220      	movs	r2, #32
 8002474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_I2C_Mem_Write+0x224>)
 8002482:	400b      	ands	r3, r1
 8002484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	fe00e800 	.word	0xfe00e800

080024b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	817b      	strh	r3, [r7, #10]
 80024c2:	460b      	mov	r3, r1
 80024c4:	813b      	strh	r3, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	f040 80fd 	bne.w	80026d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x34>
 80024de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0f1      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_I2C_Mem_Read+0x4e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0ea      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002506:	f7ff fa1b 	bl	8001940 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f9af 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0d5      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2222      	movs	r2, #34	; 0x22
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002550:	88f8      	ldrh	r0, [r7, #6]
 8002552:	893a      	ldrh	r2, [r7, #8]
 8002554:	8979      	ldrh	r1, [r7, #10]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4603      	mov	r3, r0
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f913 	bl	800278c <I2C_RequestMemoryRead>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0ad      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d90e      	bls.n	80025a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	22ff      	movs	r2, #255	; 0xff
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	4b52      	ldr	r3, [pc, #328]	; (80026dc <HAL_I2C_Mem_Read+0x22c>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fa91 	bl	8002ac0 <I2C_TransferConfig>
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_I2C_Mem_Read+0x22c>)
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fa80 	bl	8002ac0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	2200      	movs	r2, #0
 80025c8:	2104      	movs	r1, #4
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f956 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07c      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d034      	beq.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d130      	bne.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	2200      	movs	r2, #0
 8002626:	2180      	movs	r1, #128	; 0x80
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f927 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e04d      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d90e      	bls.n	8002660 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	22ff      	movs	r2, #255	; 0xff
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fa31 	bl	8002ac0 <I2C_TransferConfig>
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fa20 	bl	8002ac0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d19a      	bne.n	80025c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f974 	bl	800297c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e01a      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2220      	movs	r2, #32
 80026a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_I2C_Mem_Read+0x230>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	80002400 	.word	0x80002400
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	460b      	mov	r3, r1
 80026f8:	813b      	strh	r3, [r7, #8]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	8979      	ldrh	r1, [r7, #10]
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <I2C_RequestMemoryWrite+0xa4>)
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f9d7 	bl	8002ac0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	69b9      	ldr	r1, [r7, #24]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f8f0 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02c      	b.n	8002780 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800272c:	893b      	ldrh	r3, [r7, #8]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
 8002736:	e015      	b.n	8002764 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002738:	893b      	ldrh	r3, [r7, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b29b      	uxth	r3, r3
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f8d6 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e012      	b.n	8002780 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800275a:	893b      	ldrh	r3, [r7, #8]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f884 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	80002000 	.word	0x80002000

0800278c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	8979      	ldrh	r1, [r7, #10]
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <I2C_RequestMemoryRead+0xa4>)
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f984 	bl	8002ac0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	69b9      	ldr	r1, [r7, #24]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f89d 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e02c      	b.n	8002826 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d2:	893b      	ldrh	r3, [r7, #8]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
 80027dc:	e015      	b.n	800280a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027de:	893b      	ldrh	r3, [r7, #8]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f883 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e012      	b.n	8002826 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2200      	movs	r2, #0
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f831 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	80002000 	.word	0x80002000

08002834 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d103      	bne.n	8002852 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d007      	beq.n	8002870 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	619a      	str	r2, [r3, #24]
  }
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288c:	e022      	b.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d01e      	beq.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7ff f853 	bl	8001940 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d113      	bne.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e00f      	b.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4013      	ands	r3, r2
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d0cd      	beq.n	800288e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002908:	e02c      	b.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f870 	bl	80029f4 <I2C_IsAcknowledgeFailed>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e02a      	b.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d01e      	beq.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7ff f80b 	bl	8001940 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d113      	bne.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e007      	b.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d1cb      	bne.n	800290a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002988:	e028      	b.n	80029dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f830 	bl	80029f4 <I2C_IsAcknowledgeFailed>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e026      	b.n	80029ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7fe ffcf 	bl	8001940 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d113      	bne.n	80029dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d1cf      	bne.n	800298a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d151      	bne.n	8002ab2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a0e:	e022      	b.n	8002a56 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d01e      	beq.n	8002a56 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7fe ff92 	bl	8001940 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <I2C_IsAcknowledgeFailed+0x3a>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d113      	bne.n	8002a56 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e02e      	b.n	8002ab4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d1d5      	bne.n	8002a10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2210      	movs	r2, #16
 8002a6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2220      	movs	r2, #32
 8002a72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff fedd 	bl	8002834 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <I2C_IsAcknowledgeFailed+0xc8>)
 8002a86:	400b      	ands	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	fe00e800 	.word	0xfe00e800

08002ac0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	817b      	strh	r3, [r7, #10]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	0d5b      	lsrs	r3, r3, #21
 8002adc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <I2C_TransferConfig+0x58>)
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	ea02 0103 	and.w	r1, r2, r3
 8002aea:	897b      	ldrh	r3, [r7, #10]
 8002aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002af0:	7a7b      	ldrb	r3, [r7, #9]
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	03ff63ff 	.word	0x03ff63ff

08002b1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d138      	bne.n	8002ba4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e032      	b.n	8002ba6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d139      	bne.n	8002c3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e033      	b.n	8002c3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2224      	movs	r2, #36	; 0x24
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e000      	b.n	8002c3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
  }
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f000 bef4 	b.w	8003a4e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 816a 	beq.w	8002f4a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c76:	4bb3      	ldr	r3, [pc, #716]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c82:	4bb0      	ldr	r3, [pc, #704]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d159      	bne.n	8002d42 <HAL_RCC_OscConfig+0xf6>
 8002c8e:	4bad      	ldr	r3, [pc, #692]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d152      	bne.n	8002d42 <HAL_RCC_OscConfig+0xf6>
 8002c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_OscConfig+0x82>
 8002cc8:	4b9e      	ldr	r3, [pc, #632]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	e015      	b.n	8002cfa <HAL_RCC_OscConfig+0xae>
 8002cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002cea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002cf6:	4b93      	ldr	r3, [pc, #588]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cfe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d02:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d06:	fa92 f2a2 	rbit	r2, r2
 8002d0a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d0e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f042 0220 	orr.w	r2, r2, #32
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f002 021f 	and.w	r2, r2, #31
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 810c 	beq.w	8002f48 <HAL_RCC_OscConfig+0x2fc>
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 8106 	bne.w	8002f48 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f000 be86 	b.w	8003a4e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x110>
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7c      	ldr	r2, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e030      	b.n	8002dbe <HAL_RCC_OscConfig+0x172>
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x134>
 8002d66:	4b77      	ldr	r3, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a76      	ldr	r2, [pc, #472]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b74      	ldr	r3, [pc, #464]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a73      	ldr	r2, [pc, #460]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e01e      	b.n	8002dbe <HAL_RCC_OscConfig+0x172>
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCC_OscConfig+0x15a>
 8002d8c:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6c      	ldr	r2, [pc, #432]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a69      	ldr	r2, [pc, #420]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_OscConfig+0x172>
 8002da6:	4b67      	ldr	r3, [pc, #412]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a66      	ldr	r2, [pc, #408]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a63      	ldr	r2, [pc, #396]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dbe:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f023 020f 	bic.w	r2, r3, #15
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	495d      	ldr	r1, [pc, #372]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d059      	beq.n	8002e90 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fdb0 	bl	8001940 <HAL_GetTick>
 8002de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de6:	f7fe fdab 	bl	8001940 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d902      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	f000 be29 	b.w	8003a4e <HAL_RCC_OscConfig+0xe02>
 8002dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e00:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e10:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d102      	bne.n	8002e2e <HAL_RCC_OscConfig+0x1e2>
 8002e28:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	e015      	b.n	8002e5a <HAL_RCC_OscConfig+0x20e>
 8002e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e46:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e5e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e66:	fa92 f2a2 	rbit	r2, r2
 8002e6a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e6e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f042 0220 	orr.w	r2, r2, #32
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f002 021f 	and.w	r2, r2, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ab      	beq.n	8002de6 <HAL_RCC_OscConfig+0x19a>
 8002e8e:	e05c      	b.n	8002f4a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fd56 	bl	8001940 <HAL_GetTick>
 8002e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fd51 	bl	8001940 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d902      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	f000 bdcf 	b.w	8003a4e <HAL_RCC_OscConfig+0xe02>
 8002eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ec4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x296>
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x2c2>
 8002ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002efe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_RCC_OscConfig+0x2f8>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f1a:	fa92 f2a2 	rbit	r2, r2
 8002f1e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f22:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f26:	fab2 f282 	clz	r2, r2
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f042 0220 	orr.w	r2, r2, #32
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f002 021f 	and.w	r2, r2, #31
 8002f36:	2101      	movs	r1, #1
 8002f38:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ab      	bne.n	8002e9a <HAL_RCC_OscConfig+0x24e>
 8002f42:	e002      	b.n	8002f4a <HAL_RCC_OscConfig+0x2fe>
 8002f44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 816f 	beq.w	8003238 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f5a:	4bd0      	ldr	r3, [pc, #832]	; (800329c <HAL_RCC_OscConfig+0x650>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f66:	4bcd      	ldr	r3, [pc, #820]	; (800329c <HAL_RCC_OscConfig+0x650>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d16c      	bne.n	800304c <HAL_RCC_OscConfig+0x400>
 8002f72:	4bca      	ldr	r3, [pc, #808]	; (800329c <HAL_RCC_OscConfig+0x650>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d166      	bne.n	800304c <HAL_RCC_OscConfig+0x400>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_OscConfig+0x362>
 8002fa8:	4bbc      	ldr	r3, [pc, #752]	; (800329c <HAL_RCC_OscConfig+0x650>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	e013      	b.n	8002fd6 <HAL_RCC_OscConfig+0x38a>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fd2:	4bb2      	ldr	r3, [pc, #712]	; (800329c <HAL_RCC_OscConfig+0x650>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002fdc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002fe0:	fa92 f2a2 	rbit	r2, r2
 8002fe4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002fe8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002fec:	fab2 f282 	clz	r2, r2
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	f042 0220 	orr.w	r2, r2, #32
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f002 021f 	and.w	r2, r2, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_RCC_OscConfig+0x3cc>
 8003008:	1d3b      	adds	r3, r7, #4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d002      	beq.n	8003018 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f000 bd1b 	b.w	8003a4e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4ba0      	ldr	r3, [pc, #640]	; (800329c <HAL_RCC_OscConfig+0x650>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	21f8      	movs	r1, #248	; 0xf8
 8003028:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003030:	fa91 f1a1 	rbit	r1, r1
 8003034:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003038:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800303c:	fab1 f181 	clz	r1, r1
 8003040:	b2c9      	uxtb	r1, r1
 8003042:	408b      	lsls	r3, r1
 8003044:	4995      	ldr	r1, [pc, #596]	; (800329c <HAL_RCC_OscConfig+0x650>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e0f5      	b.n	8003238 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8085 	beq.w	8003162 <HAL_RCC_OscConfig+0x516>
 8003058:	2301      	movs	r3, #1
 800305a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800306a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003078:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	461a      	mov	r2, r3
 8003080:	2301      	movs	r3, #1
 8003082:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fc5c 	bl	8001940 <HAL_GetTick>
 8003088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe fc57 	bl	8001940 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d902      	bls.n	80030a4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	f000 bcd5 	b.w	8003a4e <HAL_RCC_OscConfig+0xe02>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d102      	bne.n	80030d4 <HAL_RCC_OscConfig+0x488>
 80030ce:	4b73      	ldr	r3, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x650>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	e013      	b.n	80030fc <HAL_RCC_OscConfig+0x4b0>
 80030d4:	2302      	movs	r3, #2
 80030d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030e6:	2302      	movs	r3, #2
 80030e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80030ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80030f8:	4b68      	ldr	r3, [pc, #416]	; (800329c <HAL_RCC_OscConfig+0x650>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2202      	movs	r2, #2
 80030fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003102:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003106:	fa92 f2a2 	rbit	r2, r2
 800310a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800310e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003112:	fab2 f282 	clz	r2, r2
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	f042 0220 	orr.w	r2, r2, #32
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f002 021f 	and.w	r2, r2, #31
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0af      	beq.n	800308e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b5b      	ldr	r3, [pc, #364]	; (800329c <HAL_RCC_OscConfig+0x650>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	21f8      	movs	r1, #248	; 0xf8
 800313e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003146:	fa91 f1a1 	rbit	r1, r1
 800314a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800314e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003152:	fab1 f181 	clz	r1, r1
 8003156:	b2c9      	uxtb	r1, r1
 8003158:	408b      	lsls	r3, r1
 800315a:	4950      	ldr	r1, [pc, #320]	; (800329c <HAL_RCC_OscConfig+0x650>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	e06a      	b.n	8003238 <HAL_RCC_OscConfig+0x5ec>
 8003162:	2301      	movs	r3, #1
 8003164:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003174:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003182:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	461a      	mov	r2, r3
 800318a:	2300      	movs	r3, #0
 800318c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe fbd7 	bl	8001940 <HAL_GetTick>
 8003192:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003198:	f7fe fbd2 	bl	8001940 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d902      	bls.n	80031ae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	f000 bc50 	b.w	8003a4e <HAL_RCC_OscConfig+0xe02>
 80031ae:	2302      	movs	r3, #2
 80031b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_RCC_OscConfig+0x592>
 80031d8:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_RCC_OscConfig+0x650>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	e013      	b.n	8003206 <HAL_RCC_OscConfig+0x5ba>
 80031de:	2302      	movs	r3, #2
 80031e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031f0:	2302      	movs	r3, #2
 80031f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCC_OscConfig+0x650>)
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2202      	movs	r2, #2
 8003208:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800320c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003210:	fa92 f2a2 	rbit	r2, r2
 8003214:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003218:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800321c:	fab2 f282 	clz	r2, r2
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f042 0220 	orr.w	r2, r2, #32
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	f002 021f 	and.w	r2, r2, #31
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f202 	lsl.w	r2, r1, r2
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1af      	bne.n	8003198 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80da 	beq.w	80033fc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d069      	beq.n	8003326 <HAL_RCC_OscConfig+0x6da>
 8003252:	2301      	movs	r3, #1
 8003254:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x654>)
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	461a      	mov	r2, r3
 8003278:	2301      	movs	r3, #1
 800327a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fe fb60 	bl	8001940 <HAL_GetTick>
 8003280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003284:	e00e      	b.n	80032a4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003286:	f7fe fb5b 	bl	8001940 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d906      	bls.n	80032a4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e3d9      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	10908120 	.word	0x10908120
 80032a4:	2302      	movs	r3, #2
 80032a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032ba:	2202      	movs	r2, #2
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	fa93 f2a3 	rbit	r2, r3
 80032c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032d2:	2202      	movs	r2, #2
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80032e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	4ba5      	ldr	r3, [pc, #660]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80032e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80032ee:	2102      	movs	r1, #2
 80032f0:	6019      	str	r1, [r3, #0]
 80032f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f1a3 	rbit	r1, r3
 80032fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003300:	6019      	str	r1, [r3, #0]
  return result;
 8003302:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0b0      	beq.n	8003286 <HAL_RCC_OscConfig+0x63a>
 8003324:	e06a      	b.n	80033fc <HAL_RCC_OscConfig+0x7b0>
 8003326:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800333c:	601a      	str	r2, [r3, #0]
  return result;
 800333e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003342:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	4b8c      	ldr	r3, [pc, #560]	; (8003580 <HAL_RCC_OscConfig+0x934>)
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	461a      	mov	r2, r3
 8003354:	2300      	movs	r3, #0
 8003356:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003358:	f7fe faf2 	bl	8001940 <HAL_GetTick>
 800335c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e009      	b.n	8003376 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003362:	f7fe faed 	bl	8001940 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e36b      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
 8003376:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800337a:	2202      	movs	r2, #2
 800337c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	fa93 f2a3 	rbit	r2, r3
 8003388:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003392:	2202      	movs	r2, #2
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	fa93 f2a3 	rbit	r2, r3
 80033a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033aa:	2202      	movs	r2, #2
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033be:	4b6f      	ldr	r3, [pc, #444]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80033c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033c6:	2102      	movs	r1, #2
 80033c8:	6019      	str	r1, [r3, #0]
 80033ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fa93 f1a3 	rbit	r1, r3
 80033d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033d8:	6019      	str	r1, [r3, #0]
  return result;
 80033da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1b2      	bne.n	8003362 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8158 	beq.w	80036bc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340c:	2300      	movs	r3, #0
 800340e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b5a      	ldr	r3, [pc, #360]	; (800357c <HAL_RCC_OscConfig+0x930>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d112      	bne.n	8003444 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b57      	ldr	r3, [pc, #348]	; (800357c <HAL_RCC_OscConfig+0x930>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a56      	ldr	r2, [pc, #344]	; (800357c <HAL_RCC_OscConfig+0x930>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b54      	ldr	r3, [pc, #336]	; (800357c <HAL_RCC_OscConfig+0x930>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003432:	f107 0308 	add.w	r3, r7, #8
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	f107 0308 	add.w	r3, r7, #8
 800343c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b4f      	ldr	r3, [pc, #316]	; (8003584 <HAL_RCC_OscConfig+0x938>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d11a      	bne.n	8003486 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003450:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <HAL_RCC_OscConfig+0x938>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <HAL_RCC_OscConfig+0x938>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345c:	f7fe fa70 	bl	8001940 <HAL_GetTick>
 8003460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e009      	b.n	800347a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7fe fa6b 	bl	8001940 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e2e9      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b42      	ldr	r3, [pc, #264]	; (8003584 <HAL_RCC_OscConfig+0x938>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ef      	beq.n	8003466 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x852>
 8003490:	4b3a      	ldr	r3, [pc, #232]	; (800357c <HAL_RCC_OscConfig+0x930>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_RCC_OscConfig+0x930>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	e02f      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCC_OscConfig+0x876>
 80034a8:	4b34      	ldr	r3, [pc, #208]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a33      	ldr	r2, [pc, #204]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	4b31      	ldr	r3, [pc, #196]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a30      	ldr	r2, [pc, #192]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034ba:	f023 0304 	bic.w	r3, r3, #4
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	e01d      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x89a>
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a2a      	ldr	r2, [pc, #168]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	e00b      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a24      	ldr	r2, [pc, #144]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a21      	ldr	r2, [pc, #132]	; (800357c <HAL_RCC_OscConfig+0x930>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d06b      	beq.n	80035e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003508:	f7fe fa1a 	bl	8001940 <HAL_GetTick>
 800350c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	e00b      	b.n	800352a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fe fa15 	bl	8001940 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e291      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
 800352a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800352e:	2202      	movs	r2, #2
 8003530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fa93 f2a3 	rbit	r2, r3
 800353c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003546:	2202      	movs	r2, #2
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	fa93 f2a3 	rbit	r2, r3
 8003554:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003558:	601a      	str	r2, [r3, #0]
  return result;
 800355a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800355e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d109      	bne.n	8003588 <HAL_RCC_OscConfig+0x93c>
 8003574:	4b01      	ldr	r3, [pc, #4]	; (800357c <HAL_RCC_OscConfig+0x930>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	e014      	b.n	80035a4 <HAL_RCC_OscConfig+0x958>
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	10908120 	.word	0x10908120
 8003584:	40007000 	.word	0x40007000
 8003588:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	4bbb      	ldr	r3, [pc, #748]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035a8:	2102      	movs	r1, #2
 80035aa:	6011      	str	r1, [r2, #0]
 80035ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	fa92 f1a2 	rbit	r1, r2
 80035b6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80035ba:	6011      	str	r1, [r2, #0]
  return result;
 80035bc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	fab2 f282 	clz	r2, r2
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f002 021f 	and.w	r2, r2, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d099      	beq.n	8003512 <HAL_RCC_OscConfig+0x8c6>
 80035de:	e063      	b.n	80036a8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e0:	f7fe f9ae 	bl	8001940 <HAL_GetTick>
 80035e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e8:	e00b      	b.n	8003602 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fe f9a9 	bl	8001940 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e225      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
 8003602:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003606:	2202      	movs	r2, #2
 8003608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	fa93 f2a3 	rbit	r2, r3
 8003614:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800361e:	2202      	movs	r2, #2
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	fa93 f2a3 	rbit	r2, r3
 800362c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003630:	601a      	str	r2, [r3, #0]
  return result;
 8003632:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003636:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d102      	bne.n	8003652 <HAL_RCC_OscConfig+0xa06>
 800364c:	4b90      	ldr	r3, [pc, #576]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	e00d      	b.n	800366e <HAL_RCC_OscConfig+0xa22>
 8003652:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003656:	2202      	movs	r2, #2
 8003658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	fa93 f2a3 	rbit	r2, r3
 8003664:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003672:	2102      	movs	r1, #2
 8003674:	6011      	str	r1, [r2, #0]
 8003676:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	fa92 f1a2 	rbit	r1, r2
 8003680:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003684:	6011      	str	r1, [r2, #0]
  return result;
 8003686:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1a0      	bne.n	80035ea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b0:	4b77      	ldr	r3, [pc, #476]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a76      	ldr	r2, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 80036b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 81c2 	beq.w	8003a4c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c8:	4b71      	ldr	r3, [pc, #452]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	f000 819c 	beq.w	8003a0e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	f040 8114 	bne.w	800390a <HAL_RCC_OscConfig+0xcbe>
 80036e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	fa93 f2a3 	rbit	r2, r3
 80036f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80036fa:	601a      	str	r2, [r3, #0]
  return result;
 80036fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003700:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800370c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	461a      	mov	r2, r3
 8003714:	2300      	movs	r3, #0
 8003716:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe f912 	bl	8001940 <HAL_GetTick>
 800371c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003720:	e009      	b.n	8003736 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003722:	f7fe f90d 	bl	8001940 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e18b      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
 8003736:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800373a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800374e:	601a      	str	r2, [r3, #0]
  return result;
 8003750:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003754:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_RCC_OscConfig+0xb24>
 800376a:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	e01b      	b.n	80037a8 <HAL_RCC_OscConfig+0xb5c>
 8003770:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800378e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	fa93 f2a3 	rbit	r2, r3
 800379e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	fa92 f1a2 	rbit	r1, r2
 80037bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037c0:	6011      	str	r1, [r2, #0]
  return result;
 80037c2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	fab2 f282 	clz	r2, r2
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f042 0220 	orr.w	r2, r2, #32
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f002 021f 	and.w	r2, r2, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d19e      	bne.n	8003722 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	4925      	ldr	r1, [pc, #148]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
 8003800:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fa93 f2a3 	rbit	r2, r3
 8003814:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003818:	601a      	str	r2, [r3, #0]
  return result;
 800381a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800381e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800382a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	461a      	mov	r2, r3
 8003832:	2301      	movs	r3, #1
 8003834:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe f883 	bl	8001940 <HAL_GetTick>
 800383a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800383e:	e009      	b.n	8003854 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe f87e 	bl	8001940 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0fc      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
 8003854:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800385c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	fa93 f2a3 	rbit	r2, r3
 8003868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800386c:	601a      	str	r2, [r3, #0]
  return result;
 800386e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003872:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCC_OscConfig+0xc48>
 8003888:	4b01      	ldr	r3, [pc, #4]	; (8003890 <HAL_RCC_OscConfig+0xc44>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	e01e      	b.n	80038cc <HAL_RCC_OscConfig+0xc80>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800389c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	fa93 f2a3 	rbit	r2, r3
 80038a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_RCC_OscConfig+0xe0c>)
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	fa92 f1a2 	rbit	r1, r2
 80038e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038e4:	6011      	str	r1, [r2, #0]
  return result;
 80038e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	fab2 f282 	clz	r2, r2
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	f042 0220 	orr.w	r2, r2, #32
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	f002 021f 	and.w	r2, r2, #31
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d09b      	beq.n	8003840 <HAL_RCC_OscConfig+0xbf4>
 8003908:	e0a0      	b.n	8003a4c <HAL_RCC_OscConfig+0xe00>
 800390a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800390e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fa93 f2a3 	rbit	r2, r3
 800391e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003922:	601a      	str	r2, [r3, #0]
  return result;
 8003924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003928:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	461a      	mov	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fd fffe 	bl	8001940 <HAL_GetTick>
 8003944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003948:	e009      	b.n	800395e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fd fff9 	bl	8001940 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e077      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
 800395e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	fa93 f2a3 	rbit	r2, r3
 8003972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003976:	601a      	str	r2, [r3, #0]
  return result;
 8003978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_RCC_OscConfig+0xd4c>
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCC_OscConfig+0xe0c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	e01b      	b.n	80039d0 <HAL_RCC_OscConfig+0xd84>
 8003998:	f107 0320 	add.w	r3, r7, #32
 800399c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f107 0320 	add.w	r3, r7, #32
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	fa93 f2a3 	rbit	r2, r3
 80039ac:	f107 031c 	add.w	r3, r7, #28
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f107 0318 	add.w	r3, r7, #24
 80039b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f107 0318 	add.w	r3, r7, #24
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	fa93 f2a3 	rbit	r2, r3
 80039c6:	f107 0314 	add.w	r3, r7, #20
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <HAL_RCC_OscConfig+0xe0c>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f107 0210 	add.w	r2, r7, #16
 80039d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039d8:	6011      	str	r1, [r2, #0]
 80039da:	f107 0210 	add.w	r2, r7, #16
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	fa92 f1a2 	rbit	r1, r2
 80039e4:	f107 020c 	add.w	r2, r7, #12
 80039e8:	6011      	str	r1, [r2, #0]
  return result;
 80039ea:	f107 020c 	add.w	r2, r7, #12
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	fab2 f282 	clz	r2, r2
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	f042 0220 	orr.w	r2, r2, #32
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	f002 021f 	and.w	r2, r2, #31
 8003a00:	2101      	movs	r1, #1
 8003a02:	fa01 f202 	lsl.w	r2, r1, r2
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d19e      	bne.n	800394a <HAL_RCC_OscConfig+0xcfe>
 8003a0c:	e01e      	b.n	8003a4c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e018      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <HAL_RCC_OscConfig+0xe0c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a24:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d108      	bne.n	8003a48 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b09e      	sub	sp, #120	; 0x78
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e162      	b.n	8003d3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b90      	ldr	r3, [pc, #576]	; (8003cb8 <HAL_RCC_ClockConfig+0x25c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d910      	bls.n	8003aa4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b8d      	ldr	r3, [pc, #564]	; (8003cb8 <HAL_RCC_ClockConfig+0x25c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 0207 	bic.w	r2, r3, #7
 8003a8a:	498b      	ldr	r1, [pc, #556]	; (8003cb8 <HAL_RCC_ClockConfig+0x25c>)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b89      	ldr	r3, [pc, #548]	; (8003cb8 <HAL_RCC_ClockConfig+0x25c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e14a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b82      	ldr	r3, [pc, #520]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	497f      	ldr	r1, [pc, #508]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80dc 	beq.w	8003c88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d13c      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xf6>
 8003ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003adc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xa6>
 8003afc:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	e00f      	b.n	8003b22 <HAL_RCC_ClockConfig+0xc6>
 8003b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b14:	663b      	str	r3, [r7, #96]	; 0x60
 8003b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b1e:	4b67      	ldr	r3, [pc, #412]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b2a:	fa92 f2a2 	rbit	r2, r2
 8003b2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b32:	fab2 f282 	clz	r2, r2
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	f042 0220 	orr.w	r2, r2, #32
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	f002 021f 	and.w	r2, r2, #31
 8003b42:	2101      	movs	r1, #1
 8003b44:	fa01 f202 	lsl.w	r2, r1, r2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d17b      	bne.n	8003c46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0f3      	b.n	8003d3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d13c      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x178>
 8003b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d102      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x128>
 8003b7e:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	e00f      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x148>
 8003b84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
 8003b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b96:	643b      	str	r3, [r7, #64]	; 0x40
 8003b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba0:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bac:	fa92 f2a2 	rbit	r2, r2
 8003bb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bb4:	fab2 f282 	clz	r2, r2
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	f042 0220 	orr.w	r2, r2, #32
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	f002 021f 	and.w	r2, r2, #31
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d13a      	bne.n	8003c46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b2      	b.n	8003d3a <HAL_RCC_ClockConfig+0x2de>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x1a0>
 8003bf6:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	e00d      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1bc>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	2302      	movs	r3, #2
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2202      	movs	r2, #2
 8003c1a:	61ba      	str	r2, [r7, #24]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	fa92 f2a2 	rbit	r2, r2
 8003c22:	617a      	str	r2, [r7, #20]
  return result;
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	fab2 f282 	clz	r2, r2
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	f042 0220 	orr.w	r2, r2, #32
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	f002 021f 	and.w	r2, r2, #31
 8003c36:	2101      	movs	r1, #1
 8003c38:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e079      	b.n	8003d3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f023 0203 	bic.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	491a      	ldr	r1, [pc, #104]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c58:	f7fd fe72 	bl	8001940 <HAL_GetTick>
 8003c5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c60:	f7fd fe6e 	bl	8001940 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e061      	b.n	8003d3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 020c 	and.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1eb      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_ClockConfig+0x25c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d214      	bcs.n	8003cc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_RCC_ClockConfig+0x25c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4906      	ldr	r1, [pc, #24]	; (8003cb8 <HAL_RCC_ClockConfig+0x25c>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <HAL_RCC_ClockConfig+0x25c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e040      	b.n	8003d3a <HAL_RCC_ClockConfig+0x2de>
 8003cb8:	40022000 	.word	0x40022000
 8003cbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_RCC_ClockConfig+0x2e8>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	491a      	ldr	r1, [pc, #104]	; (8003d44 <HAL_RCC_ClockConfig+0x2e8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x2e8>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4912      	ldr	r1, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cfe:	f000 f829 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d02:	4601      	mov	r1, r0
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <HAL_RCC_ClockConfig+0x2e8>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d0c:	22f0      	movs	r2, #240	; 0xf0
 8003d0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	fa92 f2a2 	rbit	r2, r2
 8003d16:	60fa      	str	r2, [r7, #12]
  return result;
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	fab2 f282 	clz	r2, r2
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	40d3      	lsrs	r3, r2
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x2ec>)
 8003d24:	5cd3      	ldrb	r3, [r2, r3]
 8003d26:	fa21 f303 	lsr.w	r3, r1, r3
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <HAL_RCC_ClockConfig+0x2f0>)
 8003d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_RCC_ClockConfig+0x2f4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd fdc0 	bl	80018b8 <HAL_InitTick>
  
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3778      	adds	r7, #120	; 0x78
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	0800533c 	.word	0x0800533c
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	2000001c 	.word	0x2000001c

08003d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b08b      	sub	sp, #44	; 0x2c
 8003d58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d002      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x30>
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d003      	beq.n	8003d8a <HAL_RCC_GetSysClockFreq+0x36>
 8003d82:	e03c      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d84:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d86:	623b      	str	r3, [r7, #32]
      break;
 8003d88:	e03c      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	fa92 f2a2 	rbit	r2, r2
 8003d9c:	607a      	str	r2, [r7, #4]
  return result;
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	fab2 f282 	clz	r2, r2
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	40d3      	lsrs	r3, r2
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	220f      	movs	r2, #15
 8003db8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	fa92 f2a2 	rbit	r2, r2
 8003dc0:	60fa      	str	r2, [r7, #12]
  return result;
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	fab2 f282 	clz	r2, r2
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	40d3      	lsrs	r3, r2
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ddc:	4a0e      	ldr	r2, [pc, #56]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	e004      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	623b      	str	r3, [r7, #32]
      break;
 8003dfc:	e002      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e00:	623b      	str	r3, [r7, #32]
      break;
 8003e02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e04:	6a3b      	ldr	r3, [r7, #32]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	372c      	adds	r7, #44	; 0x2c
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	007a1200 	.word	0x007a1200
 8003e1c:	08005354 	.word	0x08005354
 8003e20:	08005364 	.word	0x08005364
 8003e24:	003d0900 	.word	0x003d0900

08003e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000000 	.word	0x20000000

08003e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e46:	f7ff ffef 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	fa92 f2a2 	rbit	r2, r2
 8003e60:	603a      	str	r2, [r7, #0]
  return result;
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	fab2 f282 	clz	r2, r2
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	40d3      	lsrs	r3, r2
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e6e:	5cd3      	ldrb	r3, [r2, r3]
 8003e70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	0800534c 	.word	0x0800534c

08003e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e8a:	f7ff ffcd 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e8e:	4601      	mov	r1, r0
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	fa92 f2a2 	rbit	r2, r2
 8003ea4:	603a      	str	r2, [r7, #0]
  return result;
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	fab2 f282 	clz	r2, r2
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	40d3      	lsrs	r3, r2
 8003eb0:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	0800534c 	.word	0x0800534c

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b092      	sub	sp, #72	; 0x48
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80d4 	beq.w	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eec:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10e      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	4a4a      	ldr	r2, [pc, #296]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f02:	61d3      	str	r3, [r2, #28]
 8003f04:	4b48      	ldr	r3, [pc, #288]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	4b45      	ldr	r3, [pc, #276]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d118      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f22:	4b42      	ldr	r3, [pc, #264]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a41      	ldr	r2, [pc, #260]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fd07 	bl	8001940 <HAL_GetTick>
 8003f32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	e008      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fd fd03 	bl	8001940 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e169      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8084 	beq.w	800406e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d07c      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f74:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04b      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fcb3 	bl	8001940 <HAL_GetTick>
 8003fda:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fd fcaf 	bl	8001940 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e113      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	2302      	movs	r3, #2
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	61fb      	str	r3, [r7, #28]
  return result;
 800400c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d108      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004022:	4b01      	ldr	r3, [pc, #4]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	e00d      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
 8004030:	10908100 	.word	0x10908100
 8004034:	2302      	movs	r3, #2
 8004036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	4b78      	ldr	r3, [pc, #480]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2202      	movs	r2, #2
 8004046:	613a      	str	r2, [r7, #16]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	fa92 f2a2 	rbit	r2, r2
 800404e:	60fa      	str	r2, [r7, #12]
  return result;
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	fab2 f282 	clz	r2, r2
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	f002 021f 	and.w	r2, r2, #31
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f202 	lsl.w	r2, r1, r2
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0b7      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800406e:	4b6d      	ldr	r3, [pc, #436]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	496a      	ldr	r1, [pc, #424]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800407c:	4313      	orrs	r3, r2
 800407e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004088:	4b66      	ldr	r3, [pc, #408]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	4a65      	ldr	r2, [pc, #404]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800408e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004092:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a0:	4b60      	ldr	r3, [pc, #384]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f023 0203 	bic.w	r2, r3, #3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	495d      	ldr	r1, [pc, #372]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040be:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4956      	ldr	r1, [pc, #344]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040dc:	4b51      	ldr	r3, [pc, #324]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	494e      	ldr	r1, [pc, #312]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fa:	4b4a      	ldr	r3, [pc, #296]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f023 0210 	bic.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4947      	ldr	r1, [pc, #284]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004108:	4313      	orrs	r3, r2
 800410a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004118:	4b42      	ldr	r3, [pc, #264]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	493f      	ldr	r1, [pc, #252]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f023 0220 	bic.w	r2, r3, #32
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	4938      	ldr	r1, [pc, #224]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004144:	4313      	orrs	r3, r2
 8004146:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004154:	4b33      	ldr	r3, [pc, #204]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	4930      	ldr	r1, [pc, #192]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	4929      	ldr	r1, [pc, #164]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	4921      	ldr	r1, [pc, #132]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	491a      	ldr	r1, [pc, #104]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041cc:	4b15      	ldr	r3, [pc, #84]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	4912      	ldr	r1, [pc, #72]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	490b      	ldr	r1, [pc, #44]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	4903      	ldr	r1, [pc, #12]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004216:	4313      	orrs	r3, r2
 8004218:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3748      	adds	r7, #72	; 0x48
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000

08004228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e040      	b.n	80042bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fc febc 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2224      	movs	r2, #36	; 0x24
 8004254:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f82c 	bl	80042c4 <UART_SetConfig>
 800426c:	4603      	mov	r3, r0
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e022      	b.n	80042bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9f4 	bl	800466c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fa7b 	bl	80047b0 <UART_CheckIdleState>
 80042ba:	4603      	mov	r3, r0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042f2:	f023 030c 	bic.w	r3, r3, #12
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6979      	ldr	r1, [r7, #20]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4aae      	ldr	r2, [pc, #696]	; (80045f8 <UART_SetConfig+0x334>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d120      	bne.n	8004386 <UART_SetConfig+0xc2>
 8004344:	4bad      	ldr	r3, [pc, #692]	; (80045fc <UART_SetConfig+0x338>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b03      	cmp	r3, #3
 800434e:	d817      	bhi.n	8004380 <UART_SetConfig+0xbc>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <UART_SetConfig+0x94>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004369 	.word	0x08004369
 800435c:	08004375 	.word	0x08004375
 8004360:	0800437b 	.word	0x0800437b
 8004364:	0800436f 	.word	0x0800436f
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e0b5      	b.n	80044da <UART_SetConfig+0x216>
 800436e:	2302      	movs	r3, #2
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e0b2      	b.n	80044da <UART_SetConfig+0x216>
 8004374:	2304      	movs	r3, #4
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e0af      	b.n	80044da <UART_SetConfig+0x216>
 800437a:	2308      	movs	r3, #8
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e0ac      	b.n	80044da <UART_SetConfig+0x216>
 8004380:	2310      	movs	r3, #16
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e0a9      	b.n	80044da <UART_SetConfig+0x216>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a9d      	ldr	r2, [pc, #628]	; (8004600 <UART_SetConfig+0x33c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d124      	bne.n	80043da <UART_SetConfig+0x116>
 8004390:	4b9a      	ldr	r3, [pc, #616]	; (80045fc <UART_SetConfig+0x338>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800439c:	d011      	beq.n	80043c2 <UART_SetConfig+0xfe>
 800439e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043a2:	d817      	bhi.n	80043d4 <UART_SetConfig+0x110>
 80043a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043a8:	d011      	beq.n	80043ce <UART_SetConfig+0x10a>
 80043aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ae:	d811      	bhi.n	80043d4 <UART_SetConfig+0x110>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <UART_SetConfig+0xf8>
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b8:	d006      	beq.n	80043c8 <UART_SetConfig+0x104>
 80043ba:	e00b      	b.n	80043d4 <UART_SetConfig+0x110>
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e08b      	b.n	80044da <UART_SetConfig+0x216>
 80043c2:	2302      	movs	r3, #2
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e088      	b.n	80044da <UART_SetConfig+0x216>
 80043c8:	2304      	movs	r3, #4
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e085      	b.n	80044da <UART_SetConfig+0x216>
 80043ce:	2308      	movs	r3, #8
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e082      	b.n	80044da <UART_SetConfig+0x216>
 80043d4:	2310      	movs	r3, #16
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e07f      	b.n	80044da <UART_SetConfig+0x216>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a89      	ldr	r2, [pc, #548]	; (8004604 <UART_SetConfig+0x340>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d124      	bne.n	800442e <UART_SetConfig+0x16a>
 80043e4:	4b85      	ldr	r3, [pc, #532]	; (80045fc <UART_SetConfig+0x338>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80043ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043f0:	d011      	beq.n	8004416 <UART_SetConfig+0x152>
 80043f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043f6:	d817      	bhi.n	8004428 <UART_SetConfig+0x164>
 80043f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043fc:	d011      	beq.n	8004422 <UART_SetConfig+0x15e>
 80043fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004402:	d811      	bhi.n	8004428 <UART_SetConfig+0x164>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <UART_SetConfig+0x14c>
 8004408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800440c:	d006      	beq.n	800441c <UART_SetConfig+0x158>
 800440e:	e00b      	b.n	8004428 <UART_SetConfig+0x164>
 8004410:	2300      	movs	r3, #0
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e061      	b.n	80044da <UART_SetConfig+0x216>
 8004416:	2302      	movs	r3, #2
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e05e      	b.n	80044da <UART_SetConfig+0x216>
 800441c:	2304      	movs	r3, #4
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e05b      	b.n	80044da <UART_SetConfig+0x216>
 8004422:	2308      	movs	r3, #8
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e058      	b.n	80044da <UART_SetConfig+0x216>
 8004428:	2310      	movs	r3, #16
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e055      	b.n	80044da <UART_SetConfig+0x216>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a75      	ldr	r2, [pc, #468]	; (8004608 <UART_SetConfig+0x344>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d124      	bne.n	8004482 <UART_SetConfig+0x1be>
 8004438:	4b70      	ldr	r3, [pc, #448]	; (80045fc <UART_SetConfig+0x338>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004444:	d011      	beq.n	800446a <UART_SetConfig+0x1a6>
 8004446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800444a:	d817      	bhi.n	800447c <UART_SetConfig+0x1b8>
 800444c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004450:	d011      	beq.n	8004476 <UART_SetConfig+0x1b2>
 8004452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004456:	d811      	bhi.n	800447c <UART_SetConfig+0x1b8>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <UART_SetConfig+0x1a0>
 800445c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004460:	d006      	beq.n	8004470 <UART_SetConfig+0x1ac>
 8004462:	e00b      	b.n	800447c <UART_SetConfig+0x1b8>
 8004464:	2300      	movs	r3, #0
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e037      	b.n	80044da <UART_SetConfig+0x216>
 800446a:	2302      	movs	r3, #2
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e034      	b.n	80044da <UART_SetConfig+0x216>
 8004470:	2304      	movs	r3, #4
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e031      	b.n	80044da <UART_SetConfig+0x216>
 8004476:	2308      	movs	r3, #8
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e02e      	b.n	80044da <UART_SetConfig+0x216>
 800447c:	2310      	movs	r3, #16
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e02b      	b.n	80044da <UART_SetConfig+0x216>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a61      	ldr	r2, [pc, #388]	; (800460c <UART_SetConfig+0x348>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d124      	bne.n	80044d6 <UART_SetConfig+0x212>
 800448c:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <UART_SetConfig+0x338>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004494:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004498:	d011      	beq.n	80044be <UART_SetConfig+0x1fa>
 800449a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800449e:	d817      	bhi.n	80044d0 <UART_SetConfig+0x20c>
 80044a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044a4:	d011      	beq.n	80044ca <UART_SetConfig+0x206>
 80044a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044aa:	d811      	bhi.n	80044d0 <UART_SetConfig+0x20c>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <UART_SetConfig+0x1f4>
 80044b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b4:	d006      	beq.n	80044c4 <UART_SetConfig+0x200>
 80044b6:	e00b      	b.n	80044d0 <UART_SetConfig+0x20c>
 80044b8:	2300      	movs	r3, #0
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e00d      	b.n	80044da <UART_SetConfig+0x216>
 80044be:	2302      	movs	r3, #2
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e00a      	b.n	80044da <UART_SetConfig+0x216>
 80044c4:	2304      	movs	r3, #4
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e007      	b.n	80044da <UART_SetConfig+0x216>
 80044ca:	2308      	movs	r3, #8
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e004      	b.n	80044da <UART_SetConfig+0x216>
 80044d0:	2310      	movs	r3, #16
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e001      	b.n	80044da <UART_SetConfig+0x216>
 80044d6:	2310      	movs	r3, #16
 80044d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e2:	d15c      	bne.n	800459e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80044e4:	7ffb      	ldrb	r3, [r7, #31]
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d827      	bhi.n	800453a <UART_SetConfig+0x276>
 80044ea:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <UART_SetConfig+0x22c>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004515 	.word	0x08004515
 80044f4:	0800451d 	.word	0x0800451d
 80044f8:	08004525 	.word	0x08004525
 80044fc:	0800453b 	.word	0x0800453b
 8004500:	0800452b 	.word	0x0800452b
 8004504:	0800453b 	.word	0x0800453b
 8004508:	0800453b 	.word	0x0800453b
 800450c:	0800453b 	.word	0x0800453b
 8004510:	08004533 	.word	0x08004533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7ff fc94 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8004518:	61b8      	str	r0, [r7, #24]
        break;
 800451a:	e013      	b.n	8004544 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800451c:	f7ff fcb2 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8004520:	61b8      	str	r0, [r7, #24]
        break;
 8004522:	e00f      	b.n	8004544 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004524:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <UART_SetConfig+0x34c>)
 8004526:	61bb      	str	r3, [r7, #24]
        break;
 8004528:	e00c      	b.n	8004544 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452a:	f7ff fc13 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 800452e:	61b8      	str	r0, [r7, #24]
        break;
 8004530:	e008      	b.n	8004544 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004536:	61bb      	str	r3, [r7, #24]
        break;
 8004538:	e004      	b.n	8004544 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	77bb      	strb	r3, [r7, #30]
        break;
 8004542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8085 	beq.w	8004656 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	005a      	lsls	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	441a      	add	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	b29b      	uxth	r3, r3
 8004562:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d916      	bls.n	8004598 <UART_SetConfig+0x2d4>
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d212      	bcs.n	8004598 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f023 030f 	bic.w	r3, r3, #15
 800457a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	b29b      	uxth	r3, r3
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	b29a      	uxth	r2, r3
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	4313      	orrs	r3, r2
 800458c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	89fa      	ldrh	r2, [r7, #14]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e05e      	b.n	8004656 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	77bb      	strb	r3, [r7, #30]
 800459c:	e05b      	b.n	8004656 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800459e:	7ffb      	ldrb	r3, [r7, #31]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d837      	bhi.n	8004614 <UART_SetConfig+0x350>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0x2e8>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045e1 	.word	0x080045e1
 80045b8:	08004615 	.word	0x08004615
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	08004615 	.word	0x08004615
 80045c4:	08004615 	.word	0x08004615
 80045c8:	08004615 	.word	0x08004615
 80045cc:	080045ef 	.word	0x080045ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7ff fc36 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 80045d4:	61b8      	str	r0, [r7, #24]
        break;
 80045d6:	e022      	b.n	800461e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d8:	f7ff fc54 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 80045dc:	61b8      	str	r0, [r7, #24]
        break;
 80045de:	e01e      	b.n	800461e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <UART_SetConfig+0x34c>)
 80045e2:	61bb      	str	r3, [r7, #24]
        break;
 80045e4:	e01b      	b.n	800461e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7ff fbb5 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 80045ea:	61b8      	str	r0, [r7, #24]
        break;
 80045ec:	e017      	b.n	800461e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	61bb      	str	r3, [r7, #24]
        break;
 80045f4:	e013      	b.n	800461e <UART_SetConfig+0x35a>
 80045f6:	bf00      	nop
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40021000 	.word	0x40021000
 8004600:	40004400 	.word	0x40004400
 8004604:	40004800 	.word	0x40004800
 8004608:	40004c00 	.word	0x40004c00
 800460c:	40005000 	.word	0x40005000
 8004610:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	77bb      	strb	r3, [r7, #30]
        break;
 800461c:	bf00      	nop
    }

    if (pclk != 0U)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d018      	beq.n	8004656 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	085a      	lsrs	r2, r3, #1
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	b29b      	uxth	r3, r3
 8004638:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b0f      	cmp	r3, #15
 800463e:	d908      	bls.n	8004652 <UART_SetConfig+0x38e>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004646:	d204      	bcs.n	8004652 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e001      	b.n	8004656 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004662:	7fbb      	ldrb	r3, [r7, #30]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01a      	beq.n	8004782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476a:	d10a      	bne.n	8004782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
  }
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047c0:	f7fd f8be 	bl	8001940 <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d10e      	bne.n	80047f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f82d 	bl	8004842 <UART_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e023      	b.n	800483a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d10e      	bne.n	800481e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f817 	bl	8004842 <UART_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e00d      	b.n	800483a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004852:	e05e      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d05a      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485c:	f7fd f870 	bl	8001940 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	429a      	cmp	r2, r3
 800486a:	d302      	bcc.n	8004872 <UART_WaitOnFlagUntilTimeout+0x30>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d11b      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004880:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e043      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02c      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c6:	d124      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e00f      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	429a      	cmp	r2, r3
 800492e:	d091      	beq.n	8004854 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <newKalmanFilter>:
#include "kalmanFilter.h"
#include "CWrapper_KalmanFilter.h"

extern "C" {
	KalmanFilter* newKalmanFilter()
	{
 800493a:	b580      	push	{r7, lr}
 800493c:	af00      	add	r7, sp, #0
		return new KalmanFilter();
 800493e:	2004      	movs	r0, #4
 8004940:	f000 f833 	bl	80049aa <_Znwj>
 8004944:	4603      	mov	r3, r0
 8004946:	461a      	mov	r2, r3
 8004948:	2300      	movs	r3, #0
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4613      	mov	r3, r2
	}
 800494e:	4618      	mov	r0, r3
 8004950:	bd80      	pop	{r7, pc}

08004952 <KalmanFilter_set>:

	void KalmanFilter_set(KalmanFilter *c, int i)
	{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
		c->set(i);
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f813 	bl	800498a <_ZN12KalmanFilter3setEi>
	}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <deleteKalmanFilter>:
	{
		return c->get();
	}

	void deleteKalmanFilter(KalmanFilter* c)
	{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
		delete c;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <deleteKalmanFilter+0x16>
 800497a:	2104      	movs	r1, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f812 	bl	80049a6 <_ZdlPvj>
	}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <_ZN12KalmanFilter3setEi>:
 */

#include "kalmanFilter.h"

void KalmanFilter::set(int i)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
	m_i = i;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <_ZdlPvj>:
 80049a6:	f000 b811 	b.w	80049cc <_ZdlPv>

080049aa <_Znwj>:
 80049aa:	2801      	cmp	r0, #1
 80049ac:	bf38      	it	cc
 80049ae:	2001      	movcc	r0, #1
 80049b0:	b510      	push	{r4, lr}
 80049b2:	4604      	mov	r4, r0
 80049b4:	4620      	mov	r0, r4
 80049b6:	f000 fb91 	bl	80050dc <malloc>
 80049ba:	b930      	cbnz	r0, 80049ca <_Znwj+0x20>
 80049bc:	f000 f808 	bl	80049d0 <_ZSt15get_new_handlerv>
 80049c0:	b908      	cbnz	r0, 80049c6 <_Znwj+0x1c>
 80049c2:	f000 fb59 	bl	8005078 <abort>
 80049c6:	4780      	blx	r0
 80049c8:	e7f4      	b.n	80049b4 <_Znwj+0xa>
 80049ca:	bd10      	pop	{r4, pc}

080049cc <_ZdlPv>:
 80049cc:	f000 bb8e 	b.w	80050ec <free>

080049d0 <_ZSt15get_new_handlerv>:
 80049d0:	4b02      	ldr	r3, [pc, #8]	; (80049dc <_ZSt15get_new_handlerv+0xc>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	f3bf 8f5b 	dmb	ish
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	200000b8 	.word	0x200000b8

080049e0 <asin>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	ed2d 8b02 	vpush	{d8}
 80049e6:	ec55 4b10 	vmov	r4, r5, d0
 80049ea:	f000 f869 	bl	8004ac0 <__ieee754_asin>
 80049ee:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <asin+0x68>)
 80049f0:	eeb0 8a40 	vmov.f32	s16, s0
 80049f4:	eef0 8a60 	vmov.f32	s17, s1
 80049f8:	f993 3000 	ldrsb.w	r3, [r3]
 80049fc:	3301      	adds	r3, #1
 80049fe:	d01c      	beq.n	8004a3a <asin+0x5a>
 8004a00:	4622      	mov	r2, r4
 8004a02:	462b      	mov	r3, r5
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fc f834 	bl	8000a74 <__aeabi_dcmpun>
 8004a0c:	b9a8      	cbnz	r0, 8004a3a <asin+0x5a>
 8004a0e:	ec45 4b10 	vmov	d0, r4, r5
 8004a12:	f000 fb1d 	bl	8005050 <fabs>
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <asin+0x6c>)
 8004a18:	ec51 0b10 	vmov	r0, r1, d0
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f7fc f81f 	bl	8000a60 <__aeabi_dcmpgt>
 8004a22:	b150      	cbz	r0, 8004a3a <asin+0x5a>
 8004a24:	f000 fb30 	bl	8005088 <__errno>
 8004a28:	ecbd 8b02 	vpop	{d8}
 8004a2c:	2321      	movs	r3, #33	; 0x21
 8004a2e:	6003      	str	r3, [r0, #0]
 8004a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a34:	4806      	ldr	r0, [pc, #24]	; (8004a50 <asin+0x70>)
 8004a36:	f000 bb17 	b.w	8005068 <nan>
 8004a3a:	eeb0 0a48 	vmov.f32	s0, s16
 8004a3e:	eef0 0a68 	vmov.f32	s1, s17
 8004a42:	ecbd 8b02 	vpop	{d8}
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	20000021 	.word	0x20000021
 8004a4c:	3ff00000 	.word	0x3ff00000
 8004a50:	08005374 	.word	0x08005374

08004a54 <sqrt>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	ed2d 8b02 	vpush	{d8}
 8004a5a:	ec55 4b10 	vmov	r4, r5, d0
 8004a5e:	f000 fa43 	bl	8004ee8 <__ieee754_sqrt>
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <sqrt+0x64>)
 8004a64:	eeb0 8a40 	vmov.f32	s16, s0
 8004a68:	eef0 8a60 	vmov.f32	s17, s1
 8004a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a70:	3301      	adds	r3, #1
 8004a72:	d019      	beq.n	8004aa8 <sqrt+0x54>
 8004a74:	4622      	mov	r2, r4
 8004a76:	462b      	mov	r3, r5
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f7fb fffa 	bl	8000a74 <__aeabi_dcmpun>
 8004a80:	b990      	cbnz	r0, 8004aa8 <sqrt+0x54>
 8004a82:	2200      	movs	r2, #0
 8004a84:	2300      	movs	r3, #0
 8004a86:	4620      	mov	r0, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f7fb ffcb 	bl	8000a24 <__aeabi_dcmplt>
 8004a8e:	b158      	cbz	r0, 8004aa8 <sqrt+0x54>
 8004a90:	f000 fafa 	bl	8005088 <__errno>
 8004a94:	2321      	movs	r3, #33	; 0x21
 8004a96:	6003      	str	r3, [r0, #0]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	f7fb fe78 	bl	8000794 <__aeabi_ddiv>
 8004aa4:	ec41 0b18 	vmov	d8, r0, r1
 8004aa8:	eeb0 0a48 	vmov.f32	s0, s16
 8004aac:	eef0 0a68 	vmov.f32	s1, s17
 8004ab0:	ecbd 8b02 	vpop	{d8}
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000021 	.word	0x20000021
 8004abc:	00000000 	.word	0x00000000

08004ac0 <__ieee754_asin>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	ed2d 8b04 	vpush	{d8-d9}
 8004ac8:	ec55 4b10 	vmov	r4, r5, d0
 8004acc:	4bcc      	ldr	r3, [pc, #816]	; (8004e00 <__ieee754_asin+0x340>)
 8004ace:	b083      	sub	sp, #12
 8004ad0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004ad4:	4598      	cmp	r8, r3
 8004ad6:	9501      	str	r5, [sp, #4]
 8004ad8:	dd35      	ble.n	8004b46 <__ieee754_asin+0x86>
 8004ada:	ee10 3a10 	vmov	r3, s0
 8004ade:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8004ae2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8004ae6:	ea58 0303 	orrs.w	r3, r8, r3
 8004aea:	d117      	bne.n	8004b1c <__ieee754_asin+0x5c>
 8004aec:	a3aa      	add	r3, pc, #680	; (adr r3, 8004d98 <__ieee754_asin+0x2d8>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	ee10 0a10 	vmov	r0, s0
 8004af6:	4629      	mov	r1, r5
 8004af8:	f7fb fd22 	bl	8000540 <__aeabi_dmul>
 8004afc:	a3a8      	add	r3, pc, #672	; (adr r3, 8004da0 <__ieee754_asin+0x2e0>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	4606      	mov	r6, r0
 8004b04:	460f      	mov	r7, r1
 8004b06:	4620      	mov	r0, r4
 8004b08:	4629      	mov	r1, r5
 8004b0a:	f7fb fd19 	bl	8000540 <__aeabi_dmul>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4630      	mov	r0, r6
 8004b14:	4639      	mov	r1, r7
 8004b16:	f7fb fb5d 	bl	80001d4 <__adddf3>
 8004b1a:	e00b      	b.n	8004b34 <__ieee754_asin+0x74>
 8004b1c:	ee10 2a10 	vmov	r2, s0
 8004b20:	462b      	mov	r3, r5
 8004b22:	ee10 0a10 	vmov	r0, s0
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fb fb52 	bl	80001d0 <__aeabi_dsub>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	f7fb fe30 	bl	8000794 <__aeabi_ddiv>
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	ec45 4b10 	vmov	d0, r4, r5
 8004b3c:	b003      	add	sp, #12
 8004b3e:	ecbd 8b04 	vpop	{d8-d9}
 8004b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b46:	4baf      	ldr	r3, [pc, #700]	; (8004e04 <__ieee754_asin+0x344>)
 8004b48:	4598      	cmp	r8, r3
 8004b4a:	dc11      	bgt.n	8004b70 <__ieee754_asin+0xb0>
 8004b4c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004b50:	f280 80ae 	bge.w	8004cb0 <__ieee754_asin+0x1f0>
 8004b54:	a394      	add	r3, pc, #592	; (adr r3, 8004da8 <__ieee754_asin+0x2e8>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	ee10 0a10 	vmov	r0, s0
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb fb38 	bl	80001d4 <__adddf3>
 8004b64:	4ba8      	ldr	r3, [pc, #672]	; (8004e08 <__ieee754_asin+0x348>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	f7fb ff7a 	bl	8000a60 <__aeabi_dcmpgt>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d1e3      	bne.n	8004b38 <__ieee754_asin+0x78>
 8004b70:	ec45 4b10 	vmov	d0, r4, r5
 8004b74:	f000 fa6c 	bl	8005050 <fabs>
 8004b78:	49a3      	ldr	r1, [pc, #652]	; (8004e08 <__ieee754_asin+0x348>)
 8004b7a:	ec53 2b10 	vmov	r2, r3, d0
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7fb fb26 	bl	80001d0 <__aeabi_dsub>
 8004b84:	4ba1      	ldr	r3, [pc, #644]	; (8004e0c <__ieee754_asin+0x34c>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	f7fb fcda 	bl	8000540 <__aeabi_dmul>
 8004b8c:	a388      	add	r3, pc, #544	; (adr r3, 8004db0 <__ieee754_asin+0x2f0>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	4604      	mov	r4, r0
 8004b94:	460d      	mov	r5, r1
 8004b96:	f7fb fcd3 	bl	8000540 <__aeabi_dmul>
 8004b9a:	a387      	add	r3, pc, #540	; (adr r3, 8004db8 <__ieee754_asin+0x2f8>)
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f7fb fb18 	bl	80001d4 <__adddf3>
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	f7fb fcca 	bl	8000540 <__aeabi_dmul>
 8004bac:	a384      	add	r3, pc, #528	; (adr r3, 8004dc0 <__ieee754_asin+0x300>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f7fb fb0d 	bl	80001d0 <__aeabi_dsub>
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	462b      	mov	r3, r5
 8004bba:	f7fb fcc1 	bl	8000540 <__aeabi_dmul>
 8004bbe:	a382      	add	r3, pc, #520	; (adr r3, 8004dc8 <__ieee754_asin+0x308>)
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f7fb fb06 	bl	80001d4 <__adddf3>
 8004bc8:	4622      	mov	r2, r4
 8004bca:	462b      	mov	r3, r5
 8004bcc:	f7fb fcb8 	bl	8000540 <__aeabi_dmul>
 8004bd0:	a37f      	add	r3, pc, #508	; (adr r3, 8004dd0 <__ieee754_asin+0x310>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb fafb 	bl	80001d0 <__aeabi_dsub>
 8004bda:	4622      	mov	r2, r4
 8004bdc:	462b      	mov	r3, r5
 8004bde:	f7fb fcaf 	bl	8000540 <__aeabi_dmul>
 8004be2:	a37d      	add	r3, pc, #500	; (adr r3, 8004dd8 <__ieee754_asin+0x318>)
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f7fb faf4 	bl	80001d4 <__adddf3>
 8004bec:	4622      	mov	r2, r4
 8004bee:	462b      	mov	r3, r5
 8004bf0:	f7fb fca6 	bl	8000540 <__aeabi_dmul>
 8004bf4:	a37a      	add	r3, pc, #488	; (adr r3, 8004de0 <__ieee754_asin+0x320>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	ec41 0b18 	vmov	d8, r0, r1
 8004bfe:	4620      	mov	r0, r4
 8004c00:	4629      	mov	r1, r5
 8004c02:	f7fb fc9d 	bl	8000540 <__aeabi_dmul>
 8004c06:	a378      	add	r3, pc, #480	; (adr r3, 8004de8 <__ieee754_asin+0x328>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb fae0 	bl	80001d0 <__aeabi_dsub>
 8004c10:	4622      	mov	r2, r4
 8004c12:	462b      	mov	r3, r5
 8004c14:	f7fb fc94 	bl	8000540 <__aeabi_dmul>
 8004c18:	a375      	add	r3, pc, #468	; (adr r3, 8004df0 <__ieee754_asin+0x330>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fad9 	bl	80001d4 <__adddf3>
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	f7fb fc8b 	bl	8000540 <__aeabi_dmul>
 8004c2a:	a373      	add	r3, pc, #460	; (adr r3, 8004df8 <__ieee754_asin+0x338>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb face 	bl	80001d0 <__aeabi_dsub>
 8004c34:	4622      	mov	r2, r4
 8004c36:	462b      	mov	r3, r5
 8004c38:	f7fb fc82 	bl	8000540 <__aeabi_dmul>
 8004c3c:	4b72      	ldr	r3, [pc, #456]	; (8004e08 <__ieee754_asin+0x348>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f7fb fac8 	bl	80001d4 <__adddf3>
 8004c44:	ec45 4b10 	vmov	d0, r4, r5
 8004c48:	4606      	mov	r6, r0
 8004c4a:	460f      	mov	r7, r1
 8004c4c:	f000 f94c 	bl	8004ee8 <__ieee754_sqrt>
 8004c50:	4b6f      	ldr	r3, [pc, #444]	; (8004e10 <__ieee754_asin+0x350>)
 8004c52:	4598      	cmp	r8, r3
 8004c54:	ec5b ab10 	vmov	sl, fp, d0
 8004c58:	f340 80dc 	ble.w	8004e14 <__ieee754_asin+0x354>
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	463b      	mov	r3, r7
 8004c60:	ec51 0b18 	vmov	r0, r1, d8
 8004c64:	f7fb fd96 	bl	8000794 <__aeabi_ddiv>
 8004c68:	4652      	mov	r2, sl
 8004c6a:	465b      	mov	r3, fp
 8004c6c:	f7fb fc68 	bl	8000540 <__aeabi_dmul>
 8004c70:	4652      	mov	r2, sl
 8004c72:	465b      	mov	r3, fp
 8004c74:	f7fb faae 	bl	80001d4 <__adddf3>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	f7fb faaa 	bl	80001d4 <__adddf3>
 8004c80:	a347      	add	r3, pc, #284	; (adr r3, 8004da0 <__ieee754_asin+0x2e0>)
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f7fb faa3 	bl	80001d0 <__aeabi_dsub>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	a142      	add	r1, pc, #264	; (adr r1, 8004d98 <__ieee754_asin+0x2d8>)
 8004c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c94:	f7fb fa9c 	bl	80001d0 <__aeabi_dsub>
 8004c98:	9b01      	ldr	r3, [sp, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfdc      	itt	le
 8004c9e:	4602      	movle	r2, r0
 8004ca0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	460d      	mov	r5, r1
 8004ca8:	bfdc      	itt	le
 8004caa:	4614      	movle	r4, r2
 8004cac:	461d      	movle	r5, r3
 8004cae:	e743      	b.n	8004b38 <__ieee754_asin+0x78>
 8004cb0:	ee10 2a10 	vmov	r2, s0
 8004cb4:	ee10 0a10 	vmov	r0, s0
 8004cb8:	462b      	mov	r3, r5
 8004cba:	4629      	mov	r1, r5
 8004cbc:	f7fb fc40 	bl	8000540 <__aeabi_dmul>
 8004cc0:	a33b      	add	r3, pc, #236	; (adr r3, 8004db0 <__ieee754_asin+0x2f0>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	460f      	mov	r7, r1
 8004cca:	f7fb fc39 	bl	8000540 <__aeabi_dmul>
 8004cce:	a33a      	add	r3, pc, #232	; (adr r3, 8004db8 <__ieee754_asin+0x2f8>)
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f7fb fa7e 	bl	80001d4 <__adddf3>
 8004cd8:	4632      	mov	r2, r6
 8004cda:	463b      	mov	r3, r7
 8004cdc:	f7fb fc30 	bl	8000540 <__aeabi_dmul>
 8004ce0:	a337      	add	r3, pc, #220	; (adr r3, 8004dc0 <__ieee754_asin+0x300>)
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	f7fb fa73 	bl	80001d0 <__aeabi_dsub>
 8004cea:	4632      	mov	r2, r6
 8004cec:	463b      	mov	r3, r7
 8004cee:	f7fb fc27 	bl	8000540 <__aeabi_dmul>
 8004cf2:	a335      	add	r3, pc, #212	; (adr r3, 8004dc8 <__ieee754_asin+0x308>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f7fb fa6c 	bl	80001d4 <__adddf3>
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	463b      	mov	r3, r7
 8004d00:	f7fb fc1e 	bl	8000540 <__aeabi_dmul>
 8004d04:	a332      	add	r3, pc, #200	; (adr r3, 8004dd0 <__ieee754_asin+0x310>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7fb fa61 	bl	80001d0 <__aeabi_dsub>
 8004d0e:	4632      	mov	r2, r6
 8004d10:	463b      	mov	r3, r7
 8004d12:	f7fb fc15 	bl	8000540 <__aeabi_dmul>
 8004d16:	a330      	add	r3, pc, #192	; (adr r3, 8004dd8 <__ieee754_asin+0x318>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f7fb fa5a 	bl	80001d4 <__adddf3>
 8004d20:	4632      	mov	r2, r6
 8004d22:	463b      	mov	r3, r7
 8004d24:	f7fb fc0c 	bl	8000540 <__aeabi_dmul>
 8004d28:	a32d      	add	r3, pc, #180	; (adr r3, 8004de0 <__ieee754_asin+0x320>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	4680      	mov	r8, r0
 8004d30:	4689      	mov	r9, r1
 8004d32:	4630      	mov	r0, r6
 8004d34:	4639      	mov	r1, r7
 8004d36:	f7fb fc03 	bl	8000540 <__aeabi_dmul>
 8004d3a:	a32b      	add	r3, pc, #172	; (adr r3, 8004de8 <__ieee754_asin+0x328>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fa46 	bl	80001d0 <__aeabi_dsub>
 8004d44:	4632      	mov	r2, r6
 8004d46:	463b      	mov	r3, r7
 8004d48:	f7fb fbfa 	bl	8000540 <__aeabi_dmul>
 8004d4c:	a328      	add	r3, pc, #160	; (adr r3, 8004df0 <__ieee754_asin+0x330>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fa3f 	bl	80001d4 <__adddf3>
 8004d56:	4632      	mov	r2, r6
 8004d58:	463b      	mov	r3, r7
 8004d5a:	f7fb fbf1 	bl	8000540 <__aeabi_dmul>
 8004d5e:	a326      	add	r3, pc, #152	; (adr r3, 8004df8 <__ieee754_asin+0x338>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb fa34 	bl	80001d0 <__aeabi_dsub>
 8004d68:	4632      	mov	r2, r6
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	f7fb fbe8 	bl	8000540 <__aeabi_dmul>
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <__ieee754_asin+0x348>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	f7fb fa2e 	bl	80001d4 <__adddf3>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	4649      	mov	r1, r9
 8004d80:	f7fb fd08 	bl	8000794 <__aeabi_ddiv>
 8004d84:	4622      	mov	r2, r4
 8004d86:	462b      	mov	r3, r5
 8004d88:	f7fb fbda 	bl	8000540 <__aeabi_dmul>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4620      	mov	r0, r4
 8004d92:	4629      	mov	r1, r5
 8004d94:	e6bf      	b.n	8004b16 <__ieee754_asin+0x56>
 8004d96:	bf00      	nop
 8004d98:	54442d18 	.word	0x54442d18
 8004d9c:	3ff921fb 	.word	0x3ff921fb
 8004da0:	33145c07 	.word	0x33145c07
 8004da4:	3c91a626 	.word	0x3c91a626
 8004da8:	8800759c 	.word	0x8800759c
 8004dac:	7e37e43c 	.word	0x7e37e43c
 8004db0:	0dfdf709 	.word	0x0dfdf709
 8004db4:	3f023de1 	.word	0x3f023de1
 8004db8:	7501b288 	.word	0x7501b288
 8004dbc:	3f49efe0 	.word	0x3f49efe0
 8004dc0:	b5688f3b 	.word	0xb5688f3b
 8004dc4:	3fa48228 	.word	0x3fa48228
 8004dc8:	0e884455 	.word	0x0e884455
 8004dcc:	3fc9c155 	.word	0x3fc9c155
 8004dd0:	03eb6f7d 	.word	0x03eb6f7d
 8004dd4:	3fd4d612 	.word	0x3fd4d612
 8004dd8:	55555555 	.word	0x55555555
 8004ddc:	3fc55555 	.word	0x3fc55555
 8004de0:	b12e9282 	.word	0xb12e9282
 8004de4:	3fb3b8c5 	.word	0x3fb3b8c5
 8004de8:	1b8d0159 	.word	0x1b8d0159
 8004dec:	3fe6066c 	.word	0x3fe6066c
 8004df0:	9c598ac8 	.word	0x9c598ac8
 8004df4:	40002ae5 	.word	0x40002ae5
 8004df8:	1c8a2d4b 	.word	0x1c8a2d4b
 8004dfc:	40033a27 	.word	0x40033a27
 8004e00:	3fefffff 	.word	0x3fefffff
 8004e04:	3fdfffff 	.word	0x3fdfffff
 8004e08:	3ff00000 	.word	0x3ff00000
 8004e0c:	3fe00000 	.word	0x3fe00000
 8004e10:	3fef3332 	.word	0x3fef3332
 8004e14:	ee10 2a10 	vmov	r2, s0
 8004e18:	ee10 0a10 	vmov	r0, s0
 8004e1c:	465b      	mov	r3, fp
 8004e1e:	4659      	mov	r1, fp
 8004e20:	f7fb f9d8 	bl	80001d4 <__adddf3>
 8004e24:	4632      	mov	r2, r6
 8004e26:	463b      	mov	r3, r7
 8004e28:	ec41 0b19 	vmov	d9, r0, r1
 8004e2c:	ec51 0b18 	vmov	r0, r1, d8
 8004e30:	f7fb fcb0 	bl	8000794 <__aeabi_ddiv>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	ec51 0b19 	vmov	r0, r1, d9
 8004e3c:	f7fb fb80 	bl	8000540 <__aeabi_dmul>
 8004e40:	f04f 0800 	mov.w	r8, #0
 8004e44:	4606      	mov	r6, r0
 8004e46:	460f      	mov	r7, r1
 8004e48:	4642      	mov	r2, r8
 8004e4a:	465b      	mov	r3, fp
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	4659      	mov	r1, fp
 8004e50:	f7fb fb76 	bl	8000540 <__aeabi_dmul>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4620      	mov	r0, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f7fb f9b8 	bl	80001d0 <__aeabi_dsub>
 8004e60:	4642      	mov	r2, r8
 8004e62:	4604      	mov	r4, r0
 8004e64:	460d      	mov	r5, r1
 8004e66:	465b      	mov	r3, fp
 8004e68:	4650      	mov	r0, sl
 8004e6a:	4659      	mov	r1, fp
 8004e6c:	f7fb f9b2 	bl	80001d4 <__adddf3>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4620      	mov	r0, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f7fb fc8c 	bl	8000794 <__aeabi_ddiv>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	f7fb f9a8 	bl	80001d4 <__adddf3>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	a113      	add	r1, pc, #76	; (adr r1, 8004ed8 <__ieee754_asin+0x418>)
 8004e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e8e:	f7fb f99f 	bl	80001d0 <__aeabi_dsub>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4630      	mov	r0, r6
 8004e98:	4639      	mov	r1, r7
 8004e9a:	f7fb f999 	bl	80001d0 <__aeabi_dsub>
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	465b      	mov	r3, fp
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	f7fb f993 	bl	80001d4 <__adddf3>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	a10b      	add	r1, pc, #44	; (adr r1, 8004ee0 <__ieee754_asin+0x420>)
 8004eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004eb8:	f7fb f98a 	bl	80001d0 <__aeabi_dsub>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	f7fb f984 	bl	80001d0 <__aeabi_dsub>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	a104      	add	r1, pc, #16	; (adr r1, 8004ee0 <__ieee754_asin+0x420>)
 8004ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ed2:	e6df      	b.n	8004c94 <__ieee754_asin+0x1d4>
 8004ed4:	f3af 8000 	nop.w
 8004ed8:	33145c07 	.word	0x33145c07
 8004edc:	3c91a626 	.word	0x3c91a626
 8004ee0:	54442d18 	.word	0x54442d18
 8004ee4:	3fe921fb 	.word	0x3fe921fb

08004ee8 <__ieee754_sqrt>:
 8004ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eec:	ec55 4b10 	vmov	r4, r5, d0
 8004ef0:	4e56      	ldr	r6, [pc, #344]	; (800504c <__ieee754_sqrt+0x164>)
 8004ef2:	43ae      	bics	r6, r5
 8004ef4:	ee10 0a10 	vmov	r0, s0
 8004ef8:	ee10 3a10 	vmov	r3, s0
 8004efc:	4629      	mov	r1, r5
 8004efe:	462a      	mov	r2, r5
 8004f00:	d110      	bne.n	8004f24 <__ieee754_sqrt+0x3c>
 8004f02:	ee10 2a10 	vmov	r2, s0
 8004f06:	462b      	mov	r3, r5
 8004f08:	f7fb fb1a 	bl	8000540 <__aeabi_dmul>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4620      	mov	r0, r4
 8004f12:	4629      	mov	r1, r5
 8004f14:	f7fb f95e 	bl	80001d4 <__adddf3>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	460d      	mov	r5, r1
 8004f1c:	ec45 4b10 	vmov	d0, r4, r5
 8004f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	dc10      	bgt.n	8004f4a <__ieee754_sqrt+0x62>
 8004f28:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004f2c:	4330      	orrs	r0, r6
 8004f2e:	d0f5      	beq.n	8004f1c <__ieee754_sqrt+0x34>
 8004f30:	b15d      	cbz	r5, 8004f4a <__ieee754_sqrt+0x62>
 8004f32:	ee10 2a10 	vmov	r2, s0
 8004f36:	462b      	mov	r3, r5
 8004f38:	ee10 0a10 	vmov	r0, s0
 8004f3c:	f7fb f948 	bl	80001d0 <__aeabi_dsub>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	f7fb fc26 	bl	8000794 <__aeabi_ddiv>
 8004f48:	e7e6      	b.n	8004f18 <__ieee754_sqrt+0x30>
 8004f4a:	1509      	asrs	r1, r1, #20
 8004f4c:	d076      	beq.n	800503c <__ieee754_sqrt+0x154>
 8004f4e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004f52:	07ce      	lsls	r6, r1, #31
 8004f54:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8004f58:	bf5e      	ittt	pl
 8004f5a:	0fda      	lsrpl	r2, r3, #31
 8004f5c:	005b      	lslpl	r3, r3, #1
 8004f5e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8004f62:	0fda      	lsrs	r2, r3, #31
 8004f64:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8004f68:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	106d      	asrs	r5, r5, #1
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	f04f 0e16 	mov.w	lr, #22
 8004f76:	4684      	mov	ip, r0
 8004f78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f7c:	eb0c 0401 	add.w	r4, ip, r1
 8004f80:	4294      	cmp	r4, r2
 8004f82:	bfde      	ittt	le
 8004f84:	1b12      	suble	r2, r2, r4
 8004f86:	eb04 0c01 	addle.w	ip, r4, r1
 8004f8a:	1840      	addle	r0, r0, r1
 8004f8c:	0052      	lsls	r2, r2, #1
 8004f8e:	f1be 0e01 	subs.w	lr, lr, #1
 8004f92:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004f96:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004f9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004f9e:	d1ed      	bne.n	8004f7c <__ieee754_sqrt+0x94>
 8004fa0:	4671      	mov	r1, lr
 8004fa2:	2720      	movs	r7, #32
 8004fa4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004fa8:	4562      	cmp	r2, ip
 8004faa:	eb04 060e 	add.w	r6, r4, lr
 8004fae:	dc02      	bgt.n	8004fb6 <__ieee754_sqrt+0xce>
 8004fb0:	d113      	bne.n	8004fda <__ieee754_sqrt+0xf2>
 8004fb2:	429e      	cmp	r6, r3
 8004fb4:	d811      	bhi.n	8004fda <__ieee754_sqrt+0xf2>
 8004fb6:	2e00      	cmp	r6, #0
 8004fb8:	eb06 0e04 	add.w	lr, r6, r4
 8004fbc:	da43      	bge.n	8005046 <__ieee754_sqrt+0x15e>
 8004fbe:	f1be 0f00 	cmp.w	lr, #0
 8004fc2:	db40      	blt.n	8005046 <__ieee754_sqrt+0x15e>
 8004fc4:	f10c 0801 	add.w	r8, ip, #1
 8004fc8:	eba2 020c 	sub.w	r2, r2, ip
 8004fcc:	429e      	cmp	r6, r3
 8004fce:	bf88      	it	hi
 8004fd0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004fd4:	1b9b      	subs	r3, r3, r6
 8004fd6:	4421      	add	r1, r4
 8004fd8:	46c4      	mov	ip, r8
 8004fda:	0052      	lsls	r2, r2, #1
 8004fdc:	3f01      	subs	r7, #1
 8004fde:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004fe2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004fe6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fea:	d1dd      	bne.n	8004fa8 <__ieee754_sqrt+0xc0>
 8004fec:	4313      	orrs	r3, r2
 8004fee:	d006      	beq.n	8004ffe <__ieee754_sqrt+0x116>
 8004ff0:	1c4c      	adds	r4, r1, #1
 8004ff2:	bf13      	iteet	ne
 8004ff4:	3101      	addne	r1, #1
 8004ff6:	3001      	addeq	r0, #1
 8004ff8:	4639      	moveq	r1, r7
 8004ffa:	f021 0101 	bicne.w	r1, r1, #1
 8004ffe:	1043      	asrs	r3, r0, #1
 8005000:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005004:	0849      	lsrs	r1, r1, #1
 8005006:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800500a:	07c2      	lsls	r2, r0, #31
 800500c:	bf48      	it	mi
 800500e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005012:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005016:	460c      	mov	r4, r1
 8005018:	463d      	mov	r5, r7
 800501a:	e77f      	b.n	8004f1c <__ieee754_sqrt+0x34>
 800501c:	0ada      	lsrs	r2, r3, #11
 800501e:	3815      	subs	r0, #21
 8005020:	055b      	lsls	r3, r3, #21
 8005022:	2a00      	cmp	r2, #0
 8005024:	d0fa      	beq.n	800501c <__ieee754_sqrt+0x134>
 8005026:	02d7      	lsls	r7, r2, #11
 8005028:	d50a      	bpl.n	8005040 <__ieee754_sqrt+0x158>
 800502a:	f1c1 0420 	rsb	r4, r1, #32
 800502e:	fa23 f404 	lsr.w	r4, r3, r4
 8005032:	1e4d      	subs	r5, r1, #1
 8005034:	408b      	lsls	r3, r1
 8005036:	4322      	orrs	r2, r4
 8005038:	1b41      	subs	r1, r0, r5
 800503a:	e788      	b.n	8004f4e <__ieee754_sqrt+0x66>
 800503c:	4608      	mov	r0, r1
 800503e:	e7f0      	b.n	8005022 <__ieee754_sqrt+0x13a>
 8005040:	0052      	lsls	r2, r2, #1
 8005042:	3101      	adds	r1, #1
 8005044:	e7ef      	b.n	8005026 <__ieee754_sqrt+0x13e>
 8005046:	46e0      	mov	r8, ip
 8005048:	e7be      	b.n	8004fc8 <__ieee754_sqrt+0xe0>
 800504a:	bf00      	nop
 800504c:	7ff00000 	.word	0x7ff00000

08005050 <fabs>:
 8005050:	ec51 0b10 	vmov	r0, r1, d0
 8005054:	ee10 2a10 	vmov	r2, s0
 8005058:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800505c:	ec43 2b10 	vmov	d0, r2, r3
 8005060:	4770      	bx	lr
 8005062:	0000      	movs	r0, r0
 8005064:	0000      	movs	r0, r0
	...

08005068 <nan>:
 8005068:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005070 <nan+0x8>
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	00000000 	.word	0x00000000
 8005074:	7ff80000 	.word	0x7ff80000

08005078 <abort>:
 8005078:	b508      	push	{r3, lr}
 800507a:	2006      	movs	r0, #6
 800507c:	f000 f928 	bl	80052d0 <raise>
 8005080:	2001      	movs	r0, #1
 8005082:	f7fc f85b 	bl	800113c <_exit>
	...

08005088 <__errno>:
 8005088:	4b01      	ldr	r3, [pc, #4]	; (8005090 <__errno+0x8>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000024 	.word	0x20000024

08005094 <__libc_init_array>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	4d0d      	ldr	r5, [pc, #52]	; (80050cc <__libc_init_array+0x38>)
 8005098:	4c0d      	ldr	r4, [pc, #52]	; (80050d0 <__libc_init_array+0x3c>)
 800509a:	1b64      	subs	r4, r4, r5
 800509c:	10a4      	asrs	r4, r4, #2
 800509e:	2600      	movs	r6, #0
 80050a0:	42a6      	cmp	r6, r4
 80050a2:	d109      	bne.n	80050b8 <__libc_init_array+0x24>
 80050a4:	4d0b      	ldr	r5, [pc, #44]	; (80050d4 <__libc_init_array+0x40>)
 80050a6:	4c0c      	ldr	r4, [pc, #48]	; (80050d8 <__libc_init_array+0x44>)
 80050a8:	f000 f93c 	bl	8005324 <_init>
 80050ac:	1b64      	subs	r4, r4, r5
 80050ae:	10a4      	asrs	r4, r4, #2
 80050b0:	2600      	movs	r6, #0
 80050b2:	42a6      	cmp	r6, r4
 80050b4:	d105      	bne.n	80050c2 <__libc_init_array+0x2e>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050bc:	4798      	blx	r3
 80050be:	3601      	adds	r6, #1
 80050c0:	e7ee      	b.n	80050a0 <__libc_init_array+0xc>
 80050c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c6:	4798      	blx	r3
 80050c8:	3601      	adds	r6, #1
 80050ca:	e7f2      	b.n	80050b2 <__libc_init_array+0x1e>
 80050cc:	08005378 	.word	0x08005378
 80050d0:	08005378 	.word	0x08005378
 80050d4:	08005378 	.word	0x08005378
 80050d8:	0800537c 	.word	0x0800537c

080050dc <malloc>:
 80050dc:	4b02      	ldr	r3, [pc, #8]	; (80050e8 <malloc+0xc>)
 80050de:	4601      	mov	r1, r0
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	f000 b863 	b.w	80051ac <_malloc_r>
 80050e6:	bf00      	nop
 80050e8:	20000024 	.word	0x20000024

080050ec <free>:
 80050ec:	4b02      	ldr	r3, [pc, #8]	; (80050f8 <free+0xc>)
 80050ee:	4601      	mov	r1, r0
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	f000 b80b 	b.w	800510c <_free_r>
 80050f6:	bf00      	nop
 80050f8:	20000024 	.word	0x20000024

080050fc <memset>:
 80050fc:	4402      	add	r2, r0
 80050fe:	4603      	mov	r3, r0
 8005100:	4293      	cmp	r3, r2
 8005102:	d100      	bne.n	8005106 <memset+0xa>
 8005104:	4770      	bx	lr
 8005106:	f803 1b01 	strb.w	r1, [r3], #1
 800510a:	e7f9      	b.n	8005100 <memset+0x4>

0800510c <_free_r>:
 800510c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800510e:	2900      	cmp	r1, #0
 8005110:	d048      	beq.n	80051a4 <_free_r+0x98>
 8005112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005116:	9001      	str	r0, [sp, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f1a1 0404 	sub.w	r4, r1, #4
 800511e:	bfb8      	it	lt
 8005120:	18e4      	addlt	r4, r4, r3
 8005122:	f000 f8f1 	bl	8005308 <__malloc_lock>
 8005126:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <_free_r+0x9c>)
 8005128:	9801      	ldr	r0, [sp, #4]
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	4615      	mov	r5, r2
 800512e:	b933      	cbnz	r3, 800513e <_free_r+0x32>
 8005130:	6063      	str	r3, [r4, #4]
 8005132:	6014      	str	r4, [r2, #0]
 8005134:	b003      	add	sp, #12
 8005136:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800513a:	f000 b8eb 	b.w	8005314 <__malloc_unlock>
 800513e:	42a3      	cmp	r3, r4
 8005140:	d90b      	bls.n	800515a <_free_r+0x4e>
 8005142:	6821      	ldr	r1, [r4, #0]
 8005144:	1862      	adds	r2, r4, r1
 8005146:	4293      	cmp	r3, r2
 8005148:	bf04      	itt	eq
 800514a:	681a      	ldreq	r2, [r3, #0]
 800514c:	685b      	ldreq	r3, [r3, #4]
 800514e:	6063      	str	r3, [r4, #4]
 8005150:	bf04      	itt	eq
 8005152:	1852      	addeq	r2, r2, r1
 8005154:	6022      	streq	r2, [r4, #0]
 8005156:	602c      	str	r4, [r5, #0]
 8005158:	e7ec      	b.n	8005134 <_free_r+0x28>
 800515a:	461a      	mov	r2, r3
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b10b      	cbz	r3, 8005164 <_free_r+0x58>
 8005160:	42a3      	cmp	r3, r4
 8005162:	d9fa      	bls.n	800515a <_free_r+0x4e>
 8005164:	6811      	ldr	r1, [r2, #0]
 8005166:	1855      	adds	r5, r2, r1
 8005168:	42a5      	cmp	r5, r4
 800516a:	d10b      	bne.n	8005184 <_free_r+0x78>
 800516c:	6824      	ldr	r4, [r4, #0]
 800516e:	4421      	add	r1, r4
 8005170:	1854      	adds	r4, r2, r1
 8005172:	42a3      	cmp	r3, r4
 8005174:	6011      	str	r1, [r2, #0]
 8005176:	d1dd      	bne.n	8005134 <_free_r+0x28>
 8005178:	681c      	ldr	r4, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	6053      	str	r3, [r2, #4]
 800517e:	4421      	add	r1, r4
 8005180:	6011      	str	r1, [r2, #0]
 8005182:	e7d7      	b.n	8005134 <_free_r+0x28>
 8005184:	d902      	bls.n	800518c <_free_r+0x80>
 8005186:	230c      	movs	r3, #12
 8005188:	6003      	str	r3, [r0, #0]
 800518a:	e7d3      	b.n	8005134 <_free_r+0x28>
 800518c:	6825      	ldr	r5, [r4, #0]
 800518e:	1961      	adds	r1, r4, r5
 8005190:	428b      	cmp	r3, r1
 8005192:	bf04      	itt	eq
 8005194:	6819      	ldreq	r1, [r3, #0]
 8005196:	685b      	ldreq	r3, [r3, #4]
 8005198:	6063      	str	r3, [r4, #4]
 800519a:	bf04      	itt	eq
 800519c:	1949      	addeq	r1, r1, r5
 800519e:	6021      	streq	r1, [r4, #0]
 80051a0:	6054      	str	r4, [r2, #4]
 80051a2:	e7c7      	b.n	8005134 <_free_r+0x28>
 80051a4:	b003      	add	sp, #12
 80051a6:	bd30      	pop	{r4, r5, pc}
 80051a8:	200000bc 	.word	0x200000bc

080051ac <_malloc_r>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	1ccd      	adds	r5, r1, #3
 80051b0:	f025 0503 	bic.w	r5, r5, #3
 80051b4:	3508      	adds	r5, #8
 80051b6:	2d0c      	cmp	r5, #12
 80051b8:	bf38      	it	cc
 80051ba:	250c      	movcc	r5, #12
 80051bc:	2d00      	cmp	r5, #0
 80051be:	4606      	mov	r6, r0
 80051c0:	db01      	blt.n	80051c6 <_malloc_r+0x1a>
 80051c2:	42a9      	cmp	r1, r5
 80051c4:	d903      	bls.n	80051ce <_malloc_r+0x22>
 80051c6:	230c      	movs	r3, #12
 80051c8:	6033      	str	r3, [r6, #0]
 80051ca:	2000      	movs	r0, #0
 80051cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ce:	f000 f89b 	bl	8005308 <__malloc_lock>
 80051d2:	4921      	ldr	r1, [pc, #132]	; (8005258 <_malloc_r+0xac>)
 80051d4:	680a      	ldr	r2, [r1, #0]
 80051d6:	4614      	mov	r4, r2
 80051d8:	b99c      	cbnz	r4, 8005202 <_malloc_r+0x56>
 80051da:	4f20      	ldr	r7, [pc, #128]	; (800525c <_malloc_r+0xb0>)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	b923      	cbnz	r3, 80051ea <_malloc_r+0x3e>
 80051e0:	4621      	mov	r1, r4
 80051e2:	4630      	mov	r0, r6
 80051e4:	f000 f83c 	bl	8005260 <_sbrk_r>
 80051e8:	6038      	str	r0, [r7, #0]
 80051ea:	4629      	mov	r1, r5
 80051ec:	4630      	mov	r0, r6
 80051ee:	f000 f837 	bl	8005260 <_sbrk_r>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	d123      	bne.n	800523e <_malloc_r+0x92>
 80051f6:	230c      	movs	r3, #12
 80051f8:	6033      	str	r3, [r6, #0]
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 f88a 	bl	8005314 <__malloc_unlock>
 8005200:	e7e3      	b.n	80051ca <_malloc_r+0x1e>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	1b5b      	subs	r3, r3, r5
 8005206:	d417      	bmi.n	8005238 <_malloc_r+0x8c>
 8005208:	2b0b      	cmp	r3, #11
 800520a:	d903      	bls.n	8005214 <_malloc_r+0x68>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	441c      	add	r4, r3
 8005210:	6025      	str	r5, [r4, #0]
 8005212:	e004      	b.n	800521e <_malloc_r+0x72>
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	42a2      	cmp	r2, r4
 8005218:	bf0c      	ite	eq
 800521a:	600b      	streq	r3, [r1, #0]
 800521c:	6053      	strne	r3, [r2, #4]
 800521e:	4630      	mov	r0, r6
 8005220:	f000 f878 	bl	8005314 <__malloc_unlock>
 8005224:	f104 000b 	add.w	r0, r4, #11
 8005228:	1d23      	adds	r3, r4, #4
 800522a:	f020 0007 	bic.w	r0, r0, #7
 800522e:	1ac2      	subs	r2, r0, r3
 8005230:	d0cc      	beq.n	80051cc <_malloc_r+0x20>
 8005232:	1a1b      	subs	r3, r3, r0
 8005234:	50a3      	str	r3, [r4, r2]
 8005236:	e7c9      	b.n	80051cc <_malloc_r+0x20>
 8005238:	4622      	mov	r2, r4
 800523a:	6864      	ldr	r4, [r4, #4]
 800523c:	e7cc      	b.n	80051d8 <_malloc_r+0x2c>
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d0e3      	beq.n	8005210 <_malloc_r+0x64>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4630      	mov	r0, r6
 800524c:	f000 f808 	bl	8005260 <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d1dd      	bne.n	8005210 <_malloc_r+0x64>
 8005254:	e7cf      	b.n	80051f6 <_malloc_r+0x4a>
 8005256:	bf00      	nop
 8005258:	200000bc 	.word	0x200000bc
 800525c:	200000c0 	.word	0x200000c0

08005260 <_sbrk_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d06      	ldr	r5, [pc, #24]	; (800527c <_sbrk_r+0x1c>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	f7fb ff70 	bl	8001150 <_sbrk>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_sbrk_r+0x1a>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_sbrk_r+0x1a>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	20000200 	.word	0x20000200

08005280 <_raise_r>:
 8005280:	291f      	cmp	r1, #31
 8005282:	b538      	push	{r3, r4, r5, lr}
 8005284:	4604      	mov	r4, r0
 8005286:	460d      	mov	r5, r1
 8005288:	d904      	bls.n	8005294 <_raise_r+0x14>
 800528a:	2316      	movs	r3, #22
 800528c:	6003      	str	r3, [r0, #0]
 800528e:	f04f 30ff 	mov.w	r0, #4294967295
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005296:	b112      	cbz	r2, 800529e <_raise_r+0x1e>
 8005298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800529c:	b94b      	cbnz	r3, 80052b2 <_raise_r+0x32>
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 f830 	bl	8005304 <_getpid_r>
 80052a4:	462a      	mov	r2, r5
 80052a6:	4601      	mov	r1, r0
 80052a8:	4620      	mov	r0, r4
 80052aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ae:	f000 b817 	b.w	80052e0 <_kill_r>
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d00a      	beq.n	80052cc <_raise_r+0x4c>
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	d103      	bne.n	80052c2 <_raise_r+0x42>
 80052ba:	2316      	movs	r3, #22
 80052bc:	6003      	str	r3, [r0, #0]
 80052be:	2001      	movs	r0, #1
 80052c0:	e7e7      	b.n	8005292 <_raise_r+0x12>
 80052c2:	2400      	movs	r4, #0
 80052c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052c8:	4628      	mov	r0, r5
 80052ca:	4798      	blx	r3
 80052cc:	2000      	movs	r0, #0
 80052ce:	e7e0      	b.n	8005292 <_raise_r+0x12>

080052d0 <raise>:
 80052d0:	4b02      	ldr	r3, [pc, #8]	; (80052dc <raise+0xc>)
 80052d2:	4601      	mov	r1, r0
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	f7ff bfd3 	b.w	8005280 <_raise_r>
 80052da:	bf00      	nop
 80052dc:	20000024 	.word	0x20000024

080052e0 <_kill_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d07      	ldr	r5, [pc, #28]	; (8005300 <_kill_r+0x20>)
 80052e4:	2300      	movs	r3, #0
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	4611      	mov	r1, r2
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	f7fb ff15 	bl	800111c <_kill>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	d102      	bne.n	80052fc <_kill_r+0x1c>
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	b103      	cbz	r3, 80052fc <_kill_r+0x1c>
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	bd38      	pop	{r3, r4, r5, pc}
 80052fe:	bf00      	nop
 8005300:	20000200 	.word	0x20000200

08005304 <_getpid_r>:
 8005304:	f7fb bf02 	b.w	800110c <_getpid>

08005308 <__malloc_lock>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__malloc_lock+0x8>)
 800530a:	f000 b809 	b.w	8005320 <__retarget_lock_acquire_recursive>
 800530e:	bf00      	nop
 8005310:	20000208 	.word	0x20000208

08005314 <__malloc_unlock>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__malloc_unlock+0x8>)
 8005316:	f000 b804 	b.w	8005322 <__retarget_lock_release_recursive>
 800531a:	bf00      	nop
 800531c:	20000208 	.word	0x20000208

08005320 <__retarget_lock_acquire_recursive>:
 8005320:	4770      	bx	lr

08005322 <__retarget_lock_release_recursive>:
 8005322:	4770      	bx	lr

08005324 <_init>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr

08005330 <_fini>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr
