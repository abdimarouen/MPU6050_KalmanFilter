
F3_MPU6050_KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800a0c8  0800a0c8  0001a0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a704  0800a704  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a704  0800a704  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a704  0800a704  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a70c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001f8  0800a904  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800a904  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ed7  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7b  00000000  00000000  000340ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00036c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00037898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d16  00000000  00000000  000383a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc7a  00000000  00000000  000590be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3932  00000000  00000000  00068d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c66a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004634  00000000  00000000  0011c6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0b0 	.word	0x0800a0b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800a0b0 	.word	0x0800a0b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c4c:	ed2d 8b04 	vpush	{d8-d9}
 8000c50:	b08c      	sub	sp, #48	; 0x30
 8000c52:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f001 f86a 	bl	8001d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f97e 	bl	8000f58 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  _init_get_us();
 8000c5c:	f000 faea 	bl	8001234 <_init_get_us>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f000 fa64 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c64:	f000 fa44 	bl	80010f0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c68:	f000 f9d4 	bl	8001014 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c6c:	f000 fa10 	bl	8001090 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init() == 1){HAL_Delay(100); MX_I2C1_Init(); }; // mpu6050 init
 8000c70:	e004      	b.n	8000c7c <main+0x34>
 8000c72:	2064      	movs	r0, #100	; 0x64
 8000c74:	f001 f8c0 	bl	8001df8 <HAL_Delay>
 8000c78:	f000 f9cc 	bl	8001014 <MX_I2C1_Init>
 8000c7c:	f000 fd28 	bl	80016d0 <MPU6050_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d0f5      	beq.n	8000c72 <main+0x2a>
  //MPU6050_ACC_CALIB();
  MPU6050_GYRO_CALIB();
 8000c86:	f000 ff33 	bl	8001af0 <MPU6050_GYRO_CALIB>

  struct KalmanFilter *kalmanPITCH = newKalmanFilter(); // Create the Kalman instances
 8000c8a:	f004 fc38 	bl	80054fe <newKalmanFilter>
 8000c8e:	61f8      	str	r0, [r7, #28]
  struct KalmanFilter *kalmanROLL = newKalmanFilter();
 8000c90:	f004 fc35 	bl	80054fe <newKalmanFilter>
 8000c94:	61b8      	str	r0, [r7, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  millis = HAL_GetTick();
 8000c96:	f001 f8a3 	bl	8001de0 <HAL_GetTick>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4aa0      	ldr	r2, [pc, #640]	; (8000f20 <main+0x2d8>)
 8000c9e:	6013      	str	r3, [r2, #0]
	  //MPU6050_GET_ACC (&Ax, &Ay, &Az);
	  MPU6050_GET_GYRO (&Gx, &Gy, &Gz);
 8000ca0:	4aa0      	ldr	r2, [pc, #640]	; (8000f24 <main+0x2dc>)
 8000ca2:	49a1      	ldr	r1, [pc, #644]	; (8000f28 <main+0x2e0>)
 8000ca4:	48a1      	ldr	r0, [pc, #644]	; (8000f2c <main+0x2e4>)
 8000ca6:	f000 fe5d 	bl	8001964 <MPU6050_GET_GYRO>
	  _get_acc_angle(&PITCH_Acc, &ROLL_Acc);
 8000caa:	49a1      	ldr	r1, [pc, #644]	; (8000f30 <main+0x2e8>)
 8000cac:	48a1      	ldr	r0, [pc, #644]	; (8000f34 <main+0x2ec>)
 8000cae:	f000 ff8f 	bl	8001bd0 <_get_acc_angle>
	  Tick = get_us();
 8000cb2:	f000 fad1 	bl	8001258 <get_us>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a9f      	ldr	r2, [pc, #636]	; (8000f38 <main+0x2f0>)
 8000cba:	6013      	str	r3, [r2, #0]
	  _init_get_us();
 8000cbc:	f000 faba 	bl	8001234 <_init_get_us>

	  PITCH = KalmanFilter_getAngle(kalmanPITCH, PITCH_Acc, Gx, ROLL, Gz, Tick * 1e-6) + ROLL * sin(Gz * Tick * 1e-6 * deg_to_rad);
 8000cc0:	4b9c      	ldr	r3, [pc, #624]	; (8000f34 <main+0x2ec>)
 8000cc2:	ed93 8a00 	vldr	s16, [r3]
 8000cc6:	4b99      	ldr	r3, [pc, #612]	; (8000f2c <main+0x2e4>)
 8000cc8:	edd3 8a00 	vldr	s17, [r3]
 8000ccc:	4b9b      	ldr	r3, [pc, #620]	; (8000f3c <main+0x2f4>)
 8000cce:	ed93 9a00 	vldr	s18, [r3]
 8000cd2:	4b94      	ldr	r3, [pc, #592]	; (8000f24 <main+0x2dc>)
 8000cd4:	edd3 9a00 	vldr	s19, [r3]
 8000cd8:	4b97      	ldr	r3, [pc, #604]	; (8000f38 <main+0x2f0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fc11 	bl	8000504 <__aeabi_ui2d>
 8000ce2:	a38b      	add	r3, pc, #556	; (adr r3, 8000f10 <main+0x2c8>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f7ff fc86 	bl	80005f8 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f7ff ff58 	bl	8000ba8 <__aeabi_d2f>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	ee02 3a10 	vmov	s4, r3
 8000cfe:	eef0 1a69 	vmov.f32	s3, s19
 8000d02:	eeb0 1a49 	vmov.f32	s2, s18
 8000d06:	eef0 0a68 	vmov.f32	s1, s17
 8000d0a:	eeb0 0a48 	vmov.f32	s0, s16
 8000d0e:	69f8      	ldr	r0, [r7, #28]
 8000d10:	f004 fc02 	bl	8005518 <KalmanFilter_getAngle>
 8000d14:	ee10 3a10 	vmov	r3, s0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc15 	bl	8000548 <__aeabi_f2d>
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	4b86      	ldr	r3, [pc, #536]	; (8000f3c <main+0x2f4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fc0e 	bl	8000548 <__aeabi_f2d>
 8000d2c:	4680      	mov	r8, r0
 8000d2e:	4689      	mov	r9, r1
 8000d30:	4b81      	ldr	r3, [pc, #516]	; (8000f38 <main+0x2f0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	ee07 3a90 	vmov	s15, r3
 8000d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d3c:	4b79      	ldr	r3, [pc, #484]	; (8000f24 <main+0x2dc>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d46:	ee17 0a90 	vmov	r0, s15
 8000d4a:	f7ff fbfd 	bl	8000548 <__aeabi_f2d>
 8000d4e:	a370      	add	r3, pc, #448	; (adr r3, 8000f10 <main+0x2c8>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	f7ff fc50 	bl	80005f8 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	a36d      	add	r3, pc, #436	; (adr r3, 8000f18 <main+0x2d0>)
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	f7ff fc47 	bl	80005f8 <__aeabi_dmul>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4610      	mov	r0, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	4b72      	ldr	r3, [pc, #456]	; (8000f40 <main+0x2f8>)
 8000d78:	f7ff fd68 	bl	800084c <__aeabi_ddiv>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	ec43 2b17 	vmov	d7, r2, r3
 8000d84:	eeb0 0a47 	vmov.f32	s0, s14
 8000d88:	eef0 0a67 	vmov.f32	s1, s15
 8000d8c:	f004 ff28 	bl	8005be0 <sin>
 8000d90:	ec53 2b10 	vmov	r2, r3, d0
 8000d94:	4640      	mov	r0, r8
 8000d96:	4649      	mov	r1, r9
 8000d98:	f7ff fc2e 	bl	80005f8 <__aeabi_dmul>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4620      	mov	r0, r4
 8000da2:	4629      	mov	r1, r5
 8000da4:	f7ff fa72 	bl	800028c <__adddf3>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f7ff fefa 	bl	8000ba8 <__aeabi_d2f>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4a63      	ldr	r2, [pc, #396]	; (8000f44 <main+0x2fc>)
 8000db8:	6013      	str	r3, [r2, #0]
	  ROLL  = KalmanFilter_getAngle(kalmanROLL, ROLL_Acc, Gy, PITCH, Gz, Tick * 1e-6) - PITCH * sin(Gz * Tick * 1e-6 * deg_to_rad);
 8000dba:	4b5d      	ldr	r3, [pc, #372]	; (8000f30 <main+0x2e8>)
 8000dbc:	ed93 8a00 	vldr	s16, [r3]
 8000dc0:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <main+0x2e0>)
 8000dc2:	edd3 8a00 	vldr	s17, [r3]
 8000dc6:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <main+0x2fc>)
 8000dc8:	ed93 9a00 	vldr	s18, [r3]
 8000dcc:	4b55      	ldr	r3, [pc, #340]	; (8000f24 <main+0x2dc>)
 8000dce:	edd3 9a00 	vldr	s19, [r3]
 8000dd2:	4b59      	ldr	r3, [pc, #356]	; (8000f38 <main+0x2f0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fb94 	bl	8000504 <__aeabi_ui2d>
 8000ddc:	a34c      	add	r3, pc, #304	; (adr r3, 8000f10 <main+0x2c8>)
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	f7ff fc09 	bl	80005f8 <__aeabi_dmul>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4610      	mov	r0, r2
 8000dec:	4619      	mov	r1, r3
 8000dee:	f7ff fedb 	bl	8000ba8 <__aeabi_d2f>
 8000df2:	4603      	mov	r3, r0
 8000df4:	ee02 3a10 	vmov	s4, r3
 8000df8:	eef0 1a69 	vmov.f32	s3, s19
 8000dfc:	eeb0 1a49 	vmov.f32	s2, s18
 8000e00:	eef0 0a68 	vmov.f32	s1, s17
 8000e04:	eeb0 0a48 	vmov.f32	s0, s16
 8000e08:	69b8      	ldr	r0, [r7, #24]
 8000e0a:	f004 fb85 	bl	8005518 <KalmanFilter_getAngle>
 8000e0e:	ee10 3a10 	vmov	r3, s0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fb98 	bl	8000548 <__aeabi_f2d>
 8000e18:	4604      	mov	r4, r0
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <main+0x2fc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fb91 	bl	8000548 <__aeabi_f2d>
 8000e26:	4680      	mov	r8, r0
 8000e28:	4689      	mov	r9, r1
 8000e2a:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <main+0x2f0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <main+0x2dc>)
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e40:	ee17 0a90 	vmov	r0, s15
 8000e44:	f7ff fb80 	bl	8000548 <__aeabi_f2d>
 8000e48:	a331      	add	r3, pc, #196	; (adr r3, 8000f10 <main+0x2c8>)
 8000e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4e:	f7ff fbd3 	bl	80005f8 <__aeabi_dmul>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	a32f      	add	r3, pc, #188	; (adr r3, 8000f18 <main+0x2d0>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fbca 	bl	80005f8 <__aeabi_dmul>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <main+0x2f8>)
 8000e72:	f7ff fceb 	bl	800084c <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	ec43 2b17 	vmov	d7, r2, r3
 8000e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e82:	eef0 0a67 	vmov.f32	s1, s15
 8000e86:	f004 feab 	bl	8005be0 <sin>
 8000e8a:	ec53 2b10 	vmov	r2, r3, d0
 8000e8e:	4640      	mov	r0, r8
 8000e90:	4649      	mov	r1, r9
 8000e92:	f7ff fbb1 	bl	80005f8 <__aeabi_dmul>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	4629      	mov	r1, r5
 8000e9e:	f7ff f9f3 	bl	8000288 <__aeabi_dsub>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fe7d 	bl	8000ba8 <__aeabi_d2f>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <main+0x2f4>)
 8000eb2:	6013      	str	r3, [r2, #0]
	  //Angle_Gyro_Correction = PITCH;
	  //Angle_Gyro_Correction += ROLL * sin(Gz * Tick * 1e-6 * deg_to_rad);



	  snprintf(result, sizeof(result), "%.2f,%.2f\n", PITCH, ROLL);
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <main+0x2fc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fb45 	bl	8000548 <__aeabi_f2d>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	460d      	mov	r5, r1
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <main+0x2f4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb3e 	bl	8000548 <__aeabi_f2d>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	1d38      	adds	r0, r7, #4
 8000ed2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000ed6:	e9cd 4500 	strd	r4, r5, [sp]
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <main+0x300>)
 8000edc:	2114      	movs	r1, #20
 8000ede:	f006 ffb7 	bl	8007e50 <sniprintf>
	  //size_output = sizeof(result);

	  if(millis - prev_millis > delay_output){
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <main+0x2d8>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <main+0x304>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <main+0x308>)
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d907      	bls.n	8000f04 <main+0x2bc>
		  printf(result);
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f006 ff3e 	bl	8007d78 <iprintf>
		  prev_millis = millis;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <main+0x2d8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <main+0x304>)
 8000f02:	6013      	str	r3, [r2, #0]
	  }
//*/
	  HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 8000f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f08:	4812      	ldr	r0, [pc, #72]	; (8000f54 <main+0x30c>)
 8000f0a:	f001 fbd9 	bl	80026c0 <HAL_GPIO_TogglePin>
	  millis = HAL_GetTick();
 8000f0e:	e6c2      	b.n	8000c96 <main+0x4e>
 8000f10:	a0b5ed8d 	.word	0xa0b5ed8d
 8000f14:	3eb0c6f7 	.word	0x3eb0c6f7
 8000f18:	e0000000 	.word	0xe0000000
 8000f1c:	400922d0 	.word	0x400922d0
 8000f20:	20000214 	.word	0x20000214
 8000f24:	2000037c 	.word	0x2000037c
 8000f28:	2000029c 	.word	0x2000029c
 8000f2c:	2000023c 	.word	0x2000023c
 8000f30:	20000378 	.word	0x20000378
 8000f34:	20000368 	.word	0x20000368
 8000f38:	2000021c 	.word	0x2000021c
 8000f3c:	20000240 	.word	0x20000240
 8000f40:	40668000 	.word	0x40668000
 8000f44:	20000370 	.word	0x20000370
 8000f48:	0800a0c8 	.word	0x0800a0c8
 8000f4c:	20000218 	.word	0x20000218
 8000f50:	20000000 	.word	0x20000000
 8000f54:	48001000 	.word	0x48001000

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09e      	sub	sp, #120	; 0x78
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f62:	2228      	movs	r2, #40	; 0x28
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f006 f9ea 	bl	8007340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	223c      	movs	r2, #60	; 0x3c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 f9dc 	bl	8007340 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f96:	2301      	movs	r3, #1
 8000f98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 f910 	bl	80031d8 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000fbe:	f000 f963 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 f802 	bl	8003fe8 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fea:	f000 f94d 	bl	8001288 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000fee:	2321      	movs	r3, #33	; 0x21
 8000ff0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fa29 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001008:	f000 f93e 	bl	8001288 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3778      	adds	r7, #120	; 0x78
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x74>)
 8001020:	f240 220b 	movw	r2, #523	; 0x20b
 8001024:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_I2C1_Init+0x74>)
 800102e:	2201      	movs	r2, #1
 8001030:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_I2C1_Init+0x74>)
 8001052:	f001 fb4f 	bl	80026f4 <HAL_I2C_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800105c:	f000 f914 	bl	8001288 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_I2C1_Init+0x74>)
 8001064:	f002 f820 	bl	80030a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800106e:	f000 f90b 	bl	8001288 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_I2C1_Init+0x74>)
 8001076:	f002 f862 	bl	800313e <HAL_I2CEx_ConfigDigitalFilter>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 f902 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000244 	.word	0x20000244
 800108c:	40005400 	.word	0x40005400

08001090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 8001096:	4a15      	ldr	r2, [pc, #84]	; (80010ec <MX_USART1_UART_Init+0x5c>)
 8001098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART1_UART_Init+0x58>)
 80010d4:	f003 fb6e 	bl	80047b4 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010de:	f000 f8d3 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200002e4 	.word	0x200002e4
 80010ec:	40013800 	.word	0x40013800

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_DMA_Init+0x38>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <MX_DMA_Init+0x38>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_DMA_Init+0x38>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	200f      	movs	r0, #15
 8001114:	f000 ff6f 	bl	8001ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001118:	200f      	movs	r0, #15
 800111a:	f000 ff88 	bl	800202e <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a30      	ldr	r2, [pc, #192]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001148:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <MX_GPIO_Init+0xdc>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4a24      	ldr	r2, [pc, #144]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_GPIO_Init+0xdc>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001194:	6153      	str	r3, [r2, #20]
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_GPIO_Init+0xdc>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_GPIO_Init+0xdc>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <MX_GPIO_Init+0xdc>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_GPIO_Init+0xdc>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <MX_GPIO_Init+0xe0>)
 80011c2:	f001 fa65 	bl	8002690 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f001 f8de 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80011e0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80011e4:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_GPIO_Init+0xe0>)
 80011fa:	f001 f8cf 	bl	800239c <HAL_GPIO_Init>

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	48001000 	.word	0x48001000

08001210 <__io_putchar>:

/* USER CODE BEGIN 4 */
//
PUTCHAR_PROTOTYPE
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001218:	1d39      	adds	r1, r7, #4
 800121a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800121e:	2201      	movs	r2, #1
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <__io_putchar+0x20>)
 8001222:	f003 fb15 	bl	8004850 <HAL_UART_Transmit>
  //HAL_UART_Transmit_IT(&huart1, (uint8_t *)&ch, size_output);

  return ch;
 8001226:	687b      	ldr	r3, [r7, #4]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200002e4 	.word	0x200002e4

08001234 <_init_get_us>:
//*/

void _init_get_us(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	/* DWT struct is defined inside the core_cm4.h file */
	DWT->CTRL |= 1 ; // enable the counter
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <_init_get_us+0x20>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_init_get_us+0x20>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0; // reset the counter
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <_init_get_us+0x20>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e0001000 	.word	0xe0001000

08001258 <get_us>:

uint32_t get_us(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	return (uint32_t) DWT->CYCCNT/ (SystemCoreClock/1000000L);
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <get_us+0x24>)
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <get_us+0x28>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <get_us+0x2c>)
 8001266:	fba1 1303 	umull	r1, r3, r1, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e0001000 	.word	0xe0001000
 8001280:	20000004 	.word	0x20000004
 8001284:	431bde83 	.word	0x431bde83

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_MspInit+0x44>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_MspInit+0x44>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_MspInit+0x44>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_MspInit+0x44>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_MspInit+0x44>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_MspInit+0x44>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ca:	2007      	movs	r0, #7
 80012cc:	f000 fe88 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_I2C_MspInit+0x7c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d127      	bne.n	800134e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_I2C_MspInit+0x80>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a16      	ldr	r2, [pc, #88]	; (800135c <HAL_I2C_MspInit+0x80>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_I2C_MspInit+0x80>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001316:	23c0      	movs	r3, #192	; 0xc0
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131a:	2312      	movs	r3, #18
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131e:	2301      	movs	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001326:	2304      	movs	r3, #4
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <HAL_I2C_MspInit+0x84>)
 8001332:	f001 f833 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_I2C_MspInit+0x80>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_I2C_MspInit+0x80>)
 800133c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_I2C_MspInit+0x80>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40005400 	.word	0x40005400
 800135c:	40021000 	.word	0x40021000
 8001360:	48000400 	.word	0x48000400

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2e      	ldr	r2, [pc, #184]	; (800143c <HAL_UART_MspInit+0xd8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d155      	bne.n	8001432 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <HAL_UART_MspInit+0xdc>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <HAL_UART_MspInit+0xdc>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_UART_MspInit+0xdc>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_UART_MspInit+0xdc>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_UART_MspInit+0xdc>)
 80013a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013a8:	6153      	str	r3, [r2, #20]
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_UART_MspInit+0xdc>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013b6:	2330      	movs	r3, #48	; 0x30
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013be:	2302      	movs	r3, #2
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c6:	2307      	movs	r3, #7
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	481c      	ldr	r0, [pc, #112]	; (8001444 <HAL_UART_MspInit+0xe0>)
 80013d2:	f000 ffe3 	bl	800239c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_UART_MspInit+0xe4>)
 80013d8:	4a1c      	ldr	r2, [pc, #112]	; (800144c <HAL_UART_MspInit+0xe8>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_UART_MspInit+0xe4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_UART_MspInit+0xe4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_UART_MspInit+0xe4>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_UART_MspInit+0xe4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_UART_MspInit+0xe4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_UART_MspInit+0xe4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_UART_MspInit+0xe4>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001406:	4810      	ldr	r0, [pc, #64]	; (8001448 <HAL_UART_MspInit+0xe4>)
 8001408:	f000 fe2b 	bl	8002062 <HAL_DMA_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8001412:	f7ff ff39 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_UART_MspInit+0xe4>)
 800141a:	671a      	str	r2, [r3, #112]	; 0x70
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_UART_MspInit+0xe4>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2025      	movs	r0, #37	; 0x25
 8001428:	f000 fde5 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800142c:	2025      	movs	r0, #37	; 0x25
 800142e:	f000 fdfe 	bl	800202e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40013800 	.word	0x40013800
 8001440:	40021000 	.word	0x40021000
 8001444:	48000800 	.word	0x48000800
 8001448:	200002a0 	.word	0x200002a0
 800144c:	40020058 	.word	0x40020058

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149c:	f000 fc8c 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <DMA1_Channel5_IRQHandler+0x10>)
 80014aa:	f000 fe98 	bl	80021de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002a0 	.word	0x200002a0

080014b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <USART1_IRQHandler+0x10>)
 80014be:	f003 fa5b 	bl	8004978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002e4 	.word	0x200002e4

080014cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_kill>:

int _kill(int pid, int sig)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014e6:	f005 fef9 	bl	80072dc <__errno>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2216      	movs	r2, #22
 80014ee:	601a      	str	r2, [r3, #0]
	return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_exit>:

void _exit (int status)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ffe7 	bl	80014dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800150e:	e7fe      	b.n	800150e <_exit+0x12>

08001510 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001522:	f3af 8000 	nop.w
 8001526:	4601      	mov	r1, r0
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	b2ca      	uxtb	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <_read+0x12>
	}

return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e009      	b.n	8001570 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fe53 	bl	8001210 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf1      	blt.n	800155c <_write+0x12>
	}
	return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_close>:

int _close(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015aa:	605a      	str	r2, [r3, #4]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_isatty>:

int _isatty(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	return 1;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f005 fe5e 	bl	80072dc <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000a000 	.word	0x2000a000
 800164c:	00000400 	.word	0x00000400
 8001650:	20000220 	.word	0x20000220
 8001654:	20000398 	.word	0x20000398

08001658 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001682:	490e      	ldr	r1, [pc, #56]	; (80016bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <LoopForever+0xe>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001698:	4c0b      	ldr	r4, [pc, #44]	; (80016c8 <LoopForever+0x16>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016a6:	f7ff ffd7 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f005 fe1d 	bl	80072e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ae:	f7ff facb 	bl	8000c48 <main>

080016b2 <LoopForever>:

LoopForever:
    b LoopForever
 80016b2:	e7fe      	b.n	80016b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80016c0:	0800a70c 	.word	0x0800a70c
  ldr r2, =_sbss
 80016c4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80016c8:	20000398 	.word	0x20000398

080016cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC1_2_IRQHandler>
	...

080016d0 <MPU6050_Init>:
float XGeroCalib = 0.f;
float YGeroCalib = 0.f;
float ZGeroCalib = 0.f;

int MPU6050_Init (void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af04      	add	r7, sp, #16
	uint8_t check, data;

	/* MPU6050 start init sequence */

	HAL_Delay(100);
 80016d6:	2064      	movs	r0, #100	; 0x64
 80016d8:	f000 fb8e 	bl	8001df8 <HAL_Delay>
	data = _Reset_;
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), PWR_MGMT_1, 1, &data, 1, 1000); 			//reset all
 80016e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	2301      	movs	r3, #1
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	226b      	movs	r2, #107	; 0x6b
 80016f2:	21d0      	movs	r1, #208	; 0xd0
 80016f4:	4847      	ldr	r0, [pc, #284]	; (8001814 <MPU6050_Init+0x144>)
 80016f6:	f001 f88d 	bl	8002814 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80016fa:	2064      	movs	r0, #100	; 0x64
 80016fc:	f000 fb7c 	bl	8001df8 <HAL_Delay>
	data = _GyroAcc_reset;
 8001700:	2307      	movs	r3, #7
 8001702:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), SIGNAL_PATH_RESET, 1, &data, 1, 1000); 		//_GyroAcc_reset
 8001704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2301      	movs	r3, #1
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	1dbb      	adds	r3, r7, #6
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	2268      	movs	r2, #104	; 0x68
 8001716:	21d0      	movs	r1, #208	; 0xd0
 8001718:	483e      	ldr	r0, [pc, #248]	; (8001814 <MPU6050_Init+0x144>)
 800171a:	f001 f87b 	bl	8002814 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800171e:	2064      	movs	r0, #100	; 0x64
 8001720:	f000 fb6a 	bl	8001df8 <HAL_Delay>

	/* MPU6050 end init sequence */

	HAL_I2C_Mem_Read(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), MPU6050_WHO_AM_I_REG, 1, &check, 1, 1000); 	//check MPU6050_WHO_AM_I_REG
 8001724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2301      	movs	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	2275      	movs	r2, #117	; 0x75
 8001736:	21d0      	movs	r1, #208	; 0xd0
 8001738:	4836      	ldr	r0, [pc, #216]	; (8001814 <MPU6050_Init+0x144>)
 800173a:	f001 f97f 	bl	8002a3c <HAL_I2C_Mem_Read>
	HAL_Delay(100);
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f000 fb5a 	bl	8001df8 <HAL_Delay>

    if (check == 0x68)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b68      	cmp	r3, #104	; 0x68
 8001748:	d14f      	bne.n	80017ea <MPU6050_Init+0x11a>
    {
        data = _Wake_up;
 800174a:	2300      	movs	r3, #0
 800174c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), PWR_MGMT_1, 1, &data, 1, 1000); 		//Wakeup MPU
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	1dbb      	adds	r3, r7, #6
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	226b      	movs	r2, #107	; 0x6b
 8001760:	21d0      	movs	r1, #208	; 0xd0
 8001762:	482c      	ldr	r0, [pc, #176]	; (8001814 <MPU6050_Init+0x144>)
 8001764:	f001 f856 	bl	8002814 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8001768:	2064      	movs	r0, #100	; 0x64
 800176a:	f000 fb45 	bl	8001df8 <HAL_Delay>

        data = _SMPLRT_DIV_7;
 800176e:	2307      	movs	r3, #7
 8001770:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), SMPLRT_DIV_REG, 1, &data, 1, 1000); 	//choose rate
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2301      	movs	r3, #1
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	1dbb      	adds	r3, r7, #6
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	2219      	movs	r2, #25
 8001784:	21d0      	movs	r1, #208	; 0xd0
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <MPU6050_Init+0x144>)
 8001788:	f001 f844 	bl	8002814 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	f000 fb33 	bl	8001df8 <HAL_Delay>
        data = _Acc_scale;
 8001792:	2300      	movs	r3, #0
 8001794:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), ACCEL_CONFIG, 1, &data, 1, 1000);		//ACC 2g init_config
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2301      	movs	r3, #1
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	1dbb      	adds	r3, r7, #6
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2301      	movs	r3, #1
 80017a6:	221c      	movs	r2, #28
 80017a8:	21d0      	movs	r1, #208	; 0xd0
 80017aa:	481a      	ldr	r0, [pc, #104]	; (8001814 <MPU6050_Init+0x144>)
 80017ac:	f001 f832 	bl	8002814 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80017b0:	2064      	movs	r0, #100	; 0x64
 80017b2:	f000 fb21 	bl	8001df8 <HAL_Delay>
        data = _Gyro_scale;
 80017b6:	2301      	movs	r3, #1
 80017b8:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), GYRO_CONFIG, 1, &data, 1, 1000);		//Gero 250dps init_config
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	1dbb      	adds	r3, r7, #6
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	221b      	movs	r2, #27
 80017cc:	21d0      	movs	r1, #208	; 0xd0
 80017ce:	4811      	ldr	r0, [pc, #68]	; (8001814 <MPU6050_Init+0x144>)
 80017d0:	f001 f820 	bl	8002814 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	f000 fb0f 	bl	8001df8 <HAL_Delay>



        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <MPU6050_Init+0x148>)
 80017e2:	f000 ff55 	bl	8002690 <HAL_GPIO_WritePin>

        return 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e00f      	b.n	800180a <MPU6050_Init+0x13a>

    }
    else {
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <MPU6050_Init+0x148>)
 80017f2:	f000 ff4d 	bl	8002690 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80017f6:	2064      	movs	r0, #100	; 0x64
 80017f8:	f000 fafe 	bl	8001df8 <HAL_Delay>
        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MPU6050_Init+0x148>)
 8001804:	f000 ff44 	bl	8002690 <HAL_GPIO_WritePin>

        return 1;
 8001808:	2301      	movs	r3, #1
    }
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000244 	.word	0x20000244
 8001818:	48001000 	.word	0x48001000

0800181c <MPU6050_GET_ACC>:

void MPU6050_GET_ACC (float* Ax, float* Ay, float* Az) //Get ACC Data
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af04      	add	r7, sp, #16
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;

    HAL_I2C_Mem_Read(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), ACCEL_XOUT_H, 1, &data[0], 6, 1000);
 8001828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2306      	movs	r3, #6
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	223b      	movs	r2, #59	; 0x3b
 800183c:	21d0      	movs	r1, #208	; 0xd0
 800183e:	483f      	ldr	r0, [pc, #252]	; (800193c <MPU6050_GET_ACC+0x120>)
 8001840:	f001 f8fc 	bl	8002a3c <HAL_I2C_Mem_Read>
    Accel_X_RAW = (int16_t)((data[0] << 8) | data[1]);
 8001844:	7d3b      	ldrb	r3, [r7, #20]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b21a      	sxth	r2, r3
 800184a:	7d7b      	ldrb	r3, [r7, #21]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	83fb      	strh	r3, [r7, #30]
    Accel_Y_RAW = (int16_t)((data[2] << 8) | data[3]);
 8001852:	7dbb      	ldrb	r3, [r7, #22]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	83bb      	strh	r3, [r7, #28]
    Accel_Z_RAW = (int16_t)((data[4] << 8) | data[5]);
 8001860:	7e3b      	ldrb	r3, [r7, #24]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	7e7b      	ldrb	r3, [r7, #25]
 8001868:	b21b      	sxth	r3, r3
 800186a:	4313      	orrs	r3, r2
 800186c:	837b      	strh	r3, [r7, #26]

    *Ax = map(Accel_X_RAW / _Acc_scale_div, XminusCalib, XplusCalib, -0.98, 0.98);
 800186e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001940 <MPU6050_GET_ACC+0x124>
 800187e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <MPU6050_GET_ACC+0x128>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <MPU6050_GET_ACC+0x12c>)
 800188a:	edd3 6a00 	vldr	s13, [r3]
 800188e:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 800194c <MPU6050_GET_ACC+0x130>
 8001892:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8001950 <MPU6050_GET_ACC+0x134>
 8001896:	eeb0 1a66 	vmov.f32	s2, s13
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	eeb0 0a47 	vmov.f32	s0, s14
 80018a2:	f000 fa15 	bl	8001cd0 <map>
 80018a6:	eef0 7a40 	vmov.f32	s15, s0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	edc3 7a00 	vstr	s15, [r3]
    *Ay = map(Accel_Y_RAW / _Acc_scale_div, YminusCalib, YplusCalib, -0.98, 0.98);
 80018b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018bc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001940 <MPU6050_GET_ACC+0x124>
 80018c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <MPU6050_GET_ACC+0x138>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <MPU6050_GET_ACC+0x13c>)
 80018cc:	edd3 6a00 	vldr	s13, [r3]
 80018d0:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 800194c <MPU6050_GET_ACC+0x130>
 80018d4:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8001950 <MPU6050_GET_ACC+0x134>
 80018d8:	eeb0 1a66 	vmov.f32	s2, s13
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	eeb0 0a47 	vmov.f32	s0, s14
 80018e4:	f000 f9f4 	bl	8001cd0 <map>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	edc3 7a00 	vstr	s15, [r3]
    *Az = map(Accel_Z_RAW / _Acc_scale_div, ZminusCalib, ZplusCalib, -0.98, 0.98);//-0.98, 0.98);
 80018f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fe:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001940 <MPU6050_GET_ACC+0x124>
 8001902:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <MPU6050_GET_ACC+0x140>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MPU6050_GET_ACC+0x144>)
 800190e:	edd3 6a00 	vldr	s13, [r3]
 8001912:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 800194c <MPU6050_GET_ACC+0x130>
 8001916:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8001950 <MPU6050_GET_ACC+0x134>
 800191a:	eeb0 1a66 	vmov.f32	s2, s13
 800191e:	eef0 0a67 	vmov.f32	s1, s15
 8001922:	eeb0 0a47 	vmov.f32	s0, s14
 8001926:	f000 f9d3 	bl	8001cd0 <map>
 800192a:	eef0 7a40 	vmov.f32	s15, s0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edc3 7a00 	vstr	s15, [r3]
}
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000244 	.word	0x20000244
 8001940:	46800000 	.word	0x46800000
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000008 	.word	0x20000008
 800194c:	3f7ae148 	.word	0x3f7ae148
 8001950:	bf7ae148 	.word	0xbf7ae148
 8001954:	20000014 	.word	0x20000014
 8001958:	20000010 	.word	0x20000010
 800195c:	2000001c 	.word	0x2000001c
 8001960:	20000018 	.word	0x20000018

08001964 <MPU6050_GET_GYRO>:

void MPU6050_GET_GYRO (float* Gx, float* Gy, float* Gz) //Get Gyro Data
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af04      	add	r7, sp, #16
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    int16_t GERO_X_RAW, GERO_Y_RAW, GERO_Z_RAW;

    HAL_I2C_Mem_Read(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), GYRO_XOUT_H, 1, &data[0], 6, 1000);
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2306      	movs	r3, #6
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2301      	movs	r3, #1
 8001982:	2243      	movs	r2, #67	; 0x43
 8001984:	21d0      	movs	r1, #208	; 0xd0
 8001986:	4829      	ldr	r0, [pc, #164]	; (8001a2c <MPU6050_GET_GYRO+0xc8>)
 8001988:	f001 f858 	bl	8002a3c <HAL_I2C_Mem_Read>
    GERO_X_RAW = (int16_t)((data[0] << 8) | data[1]);
 800198c:	7d3b      	ldrb	r3, [r7, #20]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b21a      	sxth	r2, r3
 8001992:	7d7b      	ldrb	r3, [r7, #21]
 8001994:	b21b      	sxth	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	83fb      	strh	r3, [r7, #30]
    GERO_Y_RAW = (int16_t)((data[2] << 8) | data[3]);
 800199a:	7dbb      	ldrb	r3, [r7, #22]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	b21a      	sxth	r2, r3
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	4313      	orrs	r3, r2
 80019a6:	83bb      	strh	r3, [r7, #28]
    GERO_Z_RAW = (int16_t)((data[4] << 8) | data[5]);
 80019a8:	7e3b      	ldrb	r3, [r7, #24]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	7e7b      	ldrb	r3, [r7, #25]
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	837b      	strh	r3, [r7, #26]

    *Gx = (GERO_X_RAW / _Gyro_scale_div) - XGeroCalib;
 80019b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001a30 <MPU6050_GET_GYRO+0xcc>
 80019c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MPU6050_GET_GYRO+0xd0>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	edc3 7a00 	vstr	s15, [r3]
    *Gy = (GERO_Y_RAW / _Gyro_scale_div) - YGeroCalib;
 80019da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001a30 <MPU6050_GET_GYRO+0xcc>
 80019ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MPU6050_GET_GYRO+0xd4>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	edc3 7a00 	vstr	s15, [r3]
    *Gz = (GERO_Z_RAW / _Gyro_scale_div) - ZGeroCalib;
 80019fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001a30 <MPU6050_GET_GYRO+0xcc>
 8001a0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MPU6050_GET_GYRO+0xd8>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	edc3 7a00 	vstr	s15, [r3]
}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000244 	.word	0x20000244
 8001a30:	42830000 	.word	0x42830000
 8001a34:	20000224 	.word	0x20000224
 8001a38:	20000228 	.word	0x20000228
 8001a3c:	2000022c 	.word	0x2000022c

08001a40 <MPU6050_GET_NO_CAILB_GYRO>:
    *Ay = Accel_Y_RAW / _Acc_scale_div;
    *Az = Accel_Z_RAW / _Acc_scale_div;
}

void MPU6050_GET_NO_CAILB_GYRO (float* Gx, float* Gy, float* Gz) //Get Gyro Data
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    int16_t GERO_X_RAW, GERO_Y_RAW, GERO_Z_RAW;

    HAL_I2C_Mem_Read(&hi2c1, (SLAVE_ADDRESS_MPU6050 << 1), GYRO_XOUT_H, 1, &data[0], 6, 1000);
 8001a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	2306      	movs	r3, #6
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	2243      	movs	r2, #67	; 0x43
 8001a60:	21d0      	movs	r1, #208	; 0xd0
 8001a62:	4821      	ldr	r0, [pc, #132]	; (8001ae8 <MPU6050_GET_NO_CAILB_GYRO+0xa8>)
 8001a64:	f000 ffea 	bl	8002a3c <HAL_I2C_Mem_Read>
    GERO_X_RAW = (int16_t)((data[0] << 8) | data[1]);
 8001a68:	7d3b      	ldrb	r3, [r7, #20]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	83fb      	strh	r3, [r7, #30]
    GERO_Y_RAW = (int16_t)((data[2] << 8) | data[3]);
 8001a76:	7dbb      	ldrb	r3, [r7, #22]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	83bb      	strh	r3, [r7, #28]
    GERO_Z_RAW = (int16_t)((data[4] << 8) | data[5]);
 8001a84:	7e3b      	ldrb	r3, [r7, #24]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	7e7b      	ldrb	r3, [r7, #25]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	837b      	strh	r3, [r7, #26]

    *Gx = GERO_X_RAW / _Gyro_scale_div;
 8001a92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001aec <MPU6050_GET_NO_CAILB_GYRO+0xac>
 8001aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
    *Gy = GERO_Y_RAW / _Gyro_scale_div;
 8001aac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001aec <MPU6050_GET_NO_CAILB_GYRO+0xac>
 8001abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	edc3 7a00 	vstr	s15, [r3]
    *Gz = GERO_Z_RAW / _Gyro_scale_div;
 8001ac6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad2:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001aec <MPU6050_GET_NO_CAILB_GYRO+0xac>
 8001ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	edc3 7a00 	vstr	s15, [r3]
}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000244 	.word	0x20000244
 8001aec:	42830000 	.word	0x42830000

08001af0 <MPU6050_GYRO_CALIB>:
    HAL_Delay(_Led_time_Calib_Blink_time_ms);

}

void MPU6050_GYRO_CALIB(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
	float Gx, Gy, Gz;
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afc:	482e      	ldr	r0, [pc, #184]	; (8001bb8 <MPU6050_GYRO_CALIB+0xc8>)
 8001afe:	f000 fdc7 	bl	8002690 <HAL_GPIO_WritePin>
	HAL_Delay(_Led_time_Calib_Blink_time_ms);
 8001b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b06:	f000 f977 	bl	8001df8 <HAL_Delay>
	for(int i = 1; i<= _Calib_Gero;i++)
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e027      	b.n	8001b60 <MPU6050_GYRO_CALIB+0x70>
	{
		MPU6050_GET_NO_CAILB_GYRO (&Gx, &Gy, &Gz);
 8001b10:	463a      	mov	r2, r7
 8001b12:	1d39      	adds	r1, r7, #4
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff91 	bl	8001a40 <MPU6050_GET_NO_CAILB_GYRO>
		XGeroCalib += Gx;
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <MPU6050_GYRO_CALIB+0xcc>)
 8001b20:	ed93 7a00 	vldr	s14, [r3]
 8001b24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <MPU6050_GYRO_CALIB+0xcc>)
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
		YGeroCalib += Gy;
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <MPU6050_GYRO_CALIB+0xd0>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MPU6050_GYRO_CALIB+0xd0>)
 8001b42:	edc3 7a00 	vstr	s15, [r3]
		ZGeroCalib += Gz;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MPU6050_GYRO_CALIB+0xd4>)
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	edd7 7a00 	vldr	s15, [r7]
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <MPU6050_GYRO_CALIB+0xd4>)
 8001b56:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 1; i<= _Calib_Gero;i++)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b66:	ddd3      	ble.n	8001b10 <MPU6050_GYRO_CALIB+0x20>
	}

	XGeroCalib /= _Calib_Gero;
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MPU6050_GYRO_CALIB+0xcc>)
 8001b6a:	ed93 7a00 	vldr	s14, [r3]
 8001b6e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001bc8 <MPU6050_GYRO_CALIB+0xd8>
 8001b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MPU6050_GYRO_CALIB+0xcc>)
 8001b78:	edc3 7a00 	vstr	s15, [r3]
	YGeroCalib /= _Calib_Gero;
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MPU6050_GYRO_CALIB+0xd0>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001bc8 <MPU6050_GYRO_CALIB+0xd8>
 8001b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <MPU6050_GYRO_CALIB+0xd0>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
	ZGeroCalib /= _Calib_Gero;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MPU6050_GYRO_CALIB+0xd4>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001bc8 <MPU6050_GYRO_CALIB+0xd8>
 8001b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MPU6050_GYRO_CALIB+0xd4>)
 8001ba0:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MPU6050_GYRO_CALIB+0xc8>)
 8001bac:	f000 fd70 	bl	8002690 <HAL_GPIO_WritePin>

}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	48001000 	.word	0x48001000
 8001bbc:	20000224 	.word	0x20000224
 8001bc0:	20000228 	.word	0x20000228
 8001bc4:	2000022c 	.word	0x2000022c
 8001bc8:	447a0000 	.word	0x447a0000
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <_get_acc_angle>:


void _get_acc_angle(float* PITCH, float* ROLL)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	float Accx, Accy, Accz;
	float acc_total_vector;

	MPU6050_GET_ACC (&Accx, &Accy, &Accz);
 8001bda:	f107 0208 	add.w	r2, r7, #8
 8001bde:	f107 010c 	add.w	r1, r7, #12
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fe18 	bl	800181c <MPU6050_GET_ACC>

	acc_total_vector = sqrt((Accx*Accx) + (Accy*Accy)+(Accz*Accz));
 8001bec:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bf0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf8:	edd7 6a03 	vldr	s13, [r7, #12]
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c08:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	ee17 0a90 	vmov	r0, s15
 8001c1c:	f7fe fc94 	bl	8000548 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	ec43 2b10 	vmov	d0, r2, r3
 8001c28:	f004 f868 	bl	8005cfc <sqrt>
 8001c2c:	ec53 2b10 	vmov	r2, r3, d0
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ffb8 	bl	8000ba8 <__aeabi_d2f>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	617b      	str	r3, [r7, #20]

	*PITCH = asin((float) Accy/acc_total_vector) * 57.2958f; //57,2958 for the conversion from radian to degree
 8001c3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c48:	ee16 0a90 	vmov	r0, s13
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_f2d>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	ec43 2b10 	vmov	d0, r2, r3
 8001c58:	f004 f816 	bl	8005c88 <asin>
 8001c5c:	ec51 0b10 	vmov	r0, r1, d0
 8001c60:	a319      	add	r3, pc, #100	; (adr r3, 8001cc8 <_get_acc_angle+0xf8>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fcc7 	bl	80005f8 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ff99 	bl	8000ba8 <__aeabi_d2f>
 8001c76:	4602      	mov	r2, r0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	601a      	str	r2, [r3, #0]
	*ROLL = asin((float) Accx/acc_total_vector) * 57.2958f; //57,2958 for the conversion from radian to degree
 8001c7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c88:	ee16 0a90 	vmov	r0, s13
 8001c8c:	f7fe fc5c 	bl	8000548 <__aeabi_f2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	ec43 2b10 	vmov	d0, r2, r3
 8001c98:	f003 fff6 	bl	8005c88 <asin>
 8001c9c:	ec51 0b10 	vmov	r0, r1, d0
 8001ca0:	a309      	add	r3, pc, #36	; (adr r3, 8001cc8 <_get_acc_angle+0xf8>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fca7 	bl	80005f8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff79 	bl	8000ba8 <__aeabi_d2f>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	601a      	str	r2, [r3, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	c0000000 	.word	0xc0000000
 8001ccc:	404ca5dc 	.word	0x404ca5dc

08001cd0 <map>:


float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cda:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cde:	ed87 1a03 	vstr	s2, [r7, #12]
 8001ce2:	edc7 1a02 	vstr	s3, [r7, #8]
 8001ce6:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001cea:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cf6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d02:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_Init+0x28>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_Init+0x28>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f94f 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f808 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d48:	f7ff faa4 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000

08001d58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x54>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x58>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f967 	bl	800204a <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 f92f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000004 	.word	0x20000004
 8001db0:	20000024 	.word	0x20000024
 8001db4:	20000020 	.word	0x20000020

08001db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000024 	.word	0x20000024
 8001ddc:	20000384 	.word	0x20000384

08001de0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000384 	.word	0x20000384

08001df8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000024 	.word	0x20000024

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff29 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff3e 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff8e 	bl	8001f34 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5d 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff31 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffa2 	bl	8001f9c <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e037      	b.n	80020e8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800208e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002092:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f92a 	bl	8002324 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}  
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d008      	beq.n	8002114 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e020      	b.n	8002156 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002174:	2b02      	cmp	r3, #2
 8002176:	d005      	beq.n	8002184 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2204      	movs	r2, #4
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e027      	b.n	80021d4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 020e 	bic.w	r2, r2, #14
 8002192:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
    } 
  }
  return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2204      	movs	r2, #4
 80021fc:	409a      	lsls	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d024      	beq.n	8002250 <HAL_DMA_IRQHandler+0x72>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01f      	beq.n	8002250 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d107      	bne.n	800222e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0204 	bic.w	r2, r2, #4
 800222c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	2104      	movs	r1, #4
 8002238:	fa01 f202 	lsl.w	r2, r1, r2
 800223c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d06a      	beq.n	800231c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800224e:	e065      	b.n	800231c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	2202      	movs	r2, #2
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d02c      	beq.n	80022ba <HAL_DMA_IRQHandler+0xdc>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d027      	beq.n	80022ba <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10b      	bne.n	8002290 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 020a 	bic.w	r2, r2, #10
 8002286:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	2102      	movs	r1, #2
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d035      	beq.n	800231c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022b8:	e030      	b.n	800231c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2208      	movs	r2, #8
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_DMA_IRQHandler+0x13e>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 020e 	bic.w	r2, r2, #14
 80022e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
    }
  }
}  
 800231a:	e7ff      	b.n	800231c <HAL_DMA_IRQHandler+0x13e>
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <DMA_CalcBaseAndBitshift+0x60>)
 8002334:	429a      	cmp	r2, r3
 8002336:	d80f      	bhi.n	8002358 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <DMA_CalcBaseAndBitshift+0x64>)
 8002340:	4413      	add	r3, r2
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <DMA_CalcBaseAndBitshift+0x68>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	009a      	lsls	r2, r3, #2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <DMA_CalcBaseAndBitshift+0x6c>)
 8002354:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002356:	e00e      	b.n	8002376 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <DMA_CalcBaseAndBitshift+0x70>)
 8002360:	4413      	add	r3, r2
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <DMA_CalcBaseAndBitshift+0x68>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <DMA_CalcBaseAndBitshift+0x74>)
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40020407 	.word	0x40020407
 8002388:	bffdfff8 	.word	0xbffdfff8
 800238c:	cccccccd 	.word	0xcccccccd
 8002390:	40020000 	.word	0x40020000
 8002394:	bffdfbf8 	.word	0xbffdfbf8
 8002398:	40020400 	.word	0x40020400

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023aa:	e154      	b.n	8002656 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8146 	beq.w	8002650 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d00b      	beq.n	80023e4 <HAL_GPIO_Init+0x48>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d007      	beq.n	80023e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d8:	2b11      	cmp	r3, #17
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b12      	cmp	r3, #18
 80023e2:	d130      	bne.n	8002446 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241a:	2201      	movs	r2, #1
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0201 	and.w	r2, r3, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0xea>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b12      	cmp	r3, #18
 8002484:	d123      	bne.n	80024ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	6939      	ldr	r1, [r7, #16]
 80024ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80a0 	beq.w	8002650 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002510:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_GPIO_Init+0x2d8>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a57      	ldr	r2, [pc, #348]	; (8002674 <HAL_GPIO_Init+0x2d8>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b55      	ldr	r3, [pc, #340]	; (8002674 <HAL_GPIO_Init+0x2d8>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002528:	4a53      	ldr	r2, [pc, #332]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002552:	d019      	beq.n	8002588 <HAL_GPIO_Init+0x1ec>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a49      	ldr	r2, [pc, #292]	; (800267c <HAL_GPIO_Init+0x2e0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_GPIO_Init+0x1e8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a48      	ldr	r2, [pc, #288]	; (8002680 <HAL_GPIO_Init+0x2e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00d      	beq.n	8002580 <HAL_GPIO_Init+0x1e4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a47      	ldr	r2, [pc, #284]	; (8002684 <HAL_GPIO_Init+0x2e8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d007      	beq.n	800257c <HAL_GPIO_Init+0x1e0>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a46      	ldr	r2, [pc, #280]	; (8002688 <HAL_GPIO_Init+0x2ec>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_GPIO_Init+0x1dc>
 8002574:	2304      	movs	r3, #4
 8002576:	e008      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 8002578:	2305      	movs	r3, #5
 800257a:	e006      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 800257c:	2303      	movs	r3, #3
 800257e:	e004      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 8002580:	2302      	movs	r3, #2
 8002582:	e002      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_GPIO_Init+0x1ee>
 8002588:	2300      	movs	r3, #0
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	f002 0203 	and.w	r2, r2, #3
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	4093      	lsls	r3, r2
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800259a:	4937      	ldr	r1, [pc, #220]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a8:	4b38      	ldr	r3, [pc, #224]	; (800268c <HAL_GPIO_Init+0x2f0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025cc:	4a2f      	ldr	r2, [pc, #188]	; (800268c <HAL_GPIO_Init+0x2f0>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_GPIO_Init+0x2f0>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <HAL_GPIO_Init+0x2f0>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_GPIO_Init+0x2f0>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <HAL_GPIO_Init+0x2f0>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_GPIO_Init+0x2f0>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800264a:	4a10      	ldr	r2, [pc, #64]	; (800268c <HAL_GPIO_Init+0x2f0>)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	f47f aea3 	bne.w	80023ac <HAL_GPIO_Init+0x10>
  }
}
 8002666:	bf00      	nop
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40021000 	.word	0x40021000
 8002678:	40010000 	.word	0x40010000
 800267c:	48000400 	.word	0x48000400
 8002680:	48000800 	.word	0x48000800
 8002684:	48000c00 	.word	0x48000c00
 8002688:	48001000 	.word	0x48001000
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026ac:	e002      	b.n	80026b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4013      	ands	r3, r2
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43d9      	mvns	r1, r3
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	400b      	ands	r3, r1
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e081      	b.n	800280a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fdde 	bl	80012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	e006      	b.n	800277c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800277a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d104      	bne.n	800278e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800278c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800279c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	ea42 0103 	orr.w	r1, r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	021a      	lsls	r2, r3, #8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69d9      	ldr	r1, [r3, #28]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	817b      	strh	r3, [r7, #10]
 8002826:	460b      	mov	r3, r1
 8002828:	813b      	strh	r3, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	f040 80f9 	bne.w	8002a2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_I2C_Mem_Write+0x34>
 8002842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0ed      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Mem_Write+0x4e>
 800285e:	2302      	movs	r3, #2
 8002860:	e0e6      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800286a:	f7ff fab9 	bl	8001de0 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2319      	movs	r3, #25
 8002876:	2201      	movs	r2, #1
 8002878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fac3 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0d1      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2221      	movs	r2, #33	; 0x21
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a3a      	ldr	r2, [r7, #32]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b4:	88f8      	ldrh	r0, [r7, #6]
 80028b6:	893a      	ldrh	r2, [r7, #8]
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4603      	mov	r3, r0
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f9d3 	bl	8002c70 <I2C_RequestMemoryWrite>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0a9      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2bff      	cmp	r3, #255	; 0xff
 80028e4:	d90e      	bls.n	8002904 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	22ff      	movs	r2, #255	; 0xff
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	2300      	movs	r3, #0
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fba5 	bl	800304c <I2C_TransferConfig>
 8002902:	e00f      	b.n	8002924 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	b2da      	uxtb	r2, r3
 8002914:	8979      	ldrh	r1, [r7, #10]
 8002916:	2300      	movs	r3, #0
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fb94 	bl	800304c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 faad 	bl	8002e88 <I2C_WaitOnTXISFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e07b      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d034      	beq.n	80029dc <HAL_I2C_Mem_Write+0x1c8>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d130      	bne.n	80029dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	2200      	movs	r2, #0
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fa3f 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e04d      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2bff      	cmp	r3, #255	; 0xff
 800299c:	d90e      	bls.n	80029bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	8979      	ldrh	r1, [r7, #10]
 80029ac:	2300      	movs	r3, #0
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fb49 	bl	800304c <I2C_TransferConfig>
 80029ba:	e00f      	b.n	80029dc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fb38 	bl	800304c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d19e      	bne.n	8002924 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa8c 	bl	8002f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e01a      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2220      	movs	r2, #32
 8002a00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_I2C_Mem_Write+0x224>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	f040 80fd 	bne.w	8002c5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_I2C_Mem_Read+0x34>
 8002a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0f1      	b.n	8002c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Mem_Read+0x4e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e0ea      	b.n	8002c60 <HAL_I2C_Mem_Read+0x224>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a92:	f7ff f9a5 	bl	8001de0 <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2319      	movs	r3, #25
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f9af 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0d5      	b.n	8002c60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2222      	movs	r2, #34	; 0x22
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002adc:	88f8      	ldrh	r0, [r7, #6]
 8002ade:	893a      	ldrh	r2, [r7, #8]
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	4603      	mov	r3, r0
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f913 	bl	8002d18 <I2C_RequestMemoryRead>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0ad      	b.n	8002c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2bff      	cmp	r3, #255	; 0xff
 8002b0c:	d90e      	bls.n	8002b2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_I2C_Mem_Read+0x22c>)
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fa91 	bl	800304c <I2C_TransferConfig>
 8002b2a:	e00f      	b.n	8002b4c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	8979      	ldrh	r1, [r7, #10]
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_I2C_Mem_Read+0x22c>)
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fa80 	bl	800304c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2200      	movs	r2, #0
 8002b54:	2104      	movs	r1, #4
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f956 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e07c      	b.n	8002c60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d034      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x1d0>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d130      	bne.n	8002c0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2180      	movs	r1, #128	; 0x80
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f927 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e04d      	b.n	8002c60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d90e      	bls.n	8002bec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fa31 	bl	800304c <I2C_TransferConfig>
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fa20 	bl	800304c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d19a      	bne.n	8002b4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f974 	bl	8002f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e01a      	b.n	8002c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_I2C_Mem_Read+0x230>)
 8002c3e:	400b      	ands	r3, r1
 8002c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	80002400 	.word	0x80002400
 8002c6c:	fe00e800 	.word	0xfe00e800

08002c70 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	817b      	strh	r3, [r7, #10]
 8002c82:	460b      	mov	r3, r1
 8002c84:	813b      	strh	r3, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	8979      	ldrh	r1, [r7, #10]
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <I2C_RequestMemoryWrite+0xa4>)
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f9d7 	bl	800304c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	69b9      	ldr	r1, [r7, #24]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f8f0 	bl	8002e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e02c      	b.n	8002d0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb8:	893b      	ldrh	r3, [r7, #8]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28
 8002cc2:	e015      	b.n	8002cf0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cc4:	893b      	ldrh	r3, [r7, #8]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f8d6 	bl	8002e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e012      	b.n	8002d0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce6:	893b      	ldrh	r3, [r7, #8]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f884 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	80002000 	.word	0x80002000

08002d18 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	8979      	ldrh	r1, [r7, #10]
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <I2C_RequestMemoryRead+0xa4>)
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f984 	bl	800304c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	69b9      	ldr	r1, [r7, #24]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f89d 	bl	8002e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e02c      	b.n	8002db2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d105      	bne.n	8002d6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5e:	893b      	ldrh	r3, [r7, #8]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
 8002d68:	e015      	b.n	8002d96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d6a:	893b      	ldrh	r3, [r7, #8]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f883 	bl	8002e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e012      	b.n	8002db2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8c:	893b      	ldrh	r3, [r7, #8]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2140      	movs	r1, #64	; 0x40
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f831 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	80002000 	.word	0x80002000

08002dc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d103      	bne.n	8002dde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d007      	beq.n	8002dfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	619a      	str	r2, [r3, #24]
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e18:	e022      	b.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d01e      	beq.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe ffdd 	bl	8001de0 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d113      	bne.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e00f      	b.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d0cd      	beq.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e94:	e02c      	b.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f870 	bl	8002f80 <I2C_IsAcknowledgeFailed>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e02a      	b.n	8002f00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d01e      	beq.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7fe ff95 	bl	8001de0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d113      	bne.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e007      	b.n	8002f00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d1cb      	bne.n	8002e96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f14:	e028      	b.n	8002f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f830 	bl	8002f80 <I2C_IsAcknowledgeFailed>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e026      	b.n	8002f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7fe ff59 	bl	8001de0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d113      	bne.n	8002f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e007      	b.n	8002f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d1cf      	bne.n	8002f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d151      	bne.n	800303e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f9a:	e022      	b.n	8002fe2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d01e      	beq.n	8002fe2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7fe ff1c 	bl	8001de0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d302      	bcc.n	8002fba <I2C_IsAcknowledgeFailed+0x3a>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e02e      	b.n	8003040 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d1d5      	bne.n	8002f9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff fedd 	bl	8002dc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <I2C_IsAcknowledgeFailed+0xc8>)
 8003012:	400b      	ands	r3, r1
 8003014:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	fe00e800 	.word	0xfe00e800

0800304c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	4613      	mov	r3, r2
 800305c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <I2C_TransferConfig+0x58>)
 800306e:	430b      	orrs	r3, r1
 8003070:	43db      	mvns	r3, r3
 8003072:	ea02 0103 	and.w	r1, r2, r3
 8003076:	897b      	ldrh	r3, [r7, #10]
 8003078:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800307c:	7a7b      	ldrb	r3, [r7, #9]
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	431a      	orrs	r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	03ff63ff 	.word	0x03ff63ff

080030a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d138      	bne.n	8003130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e032      	b.n	8003132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b20      	cmp	r3, #32
 8003152:	d139      	bne.n	80031c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800315e:	2302      	movs	r3, #2
 8003160:	e033      	b.n	80031ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2224      	movs	r2, #36	; 0x24
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003190:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031de:	af00      	add	r7, sp, #0
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f000 bef4 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 816a 	beq.w	80034d6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003202:	4bb3      	ldr	r3, [pc, #716]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d00c      	beq.n	8003228 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800320e:	4bb0      	ldr	r3, [pc, #704]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b08      	cmp	r3, #8
 8003218:	d159      	bne.n	80032ce <HAL_RCC_OscConfig+0xf6>
 800321a:	4bad      	ldr	r3, [pc, #692]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003226:	d152      	bne.n	80032ce <HAL_RCC_OscConfig+0xf6>
 8003228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800323c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d102      	bne.n	800325a <HAL_RCC_OscConfig+0x82>
 8003254:	4b9e      	ldr	r3, [pc, #632]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	e015      	b.n	8003286 <HAL_RCC_OscConfig+0xae>
 800325a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800325e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800326e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003272:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003276:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003282:	4b93      	ldr	r3, [pc, #588]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800328a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800328e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003292:	fa92 f2a2 	rbit	r2, r2
 8003296:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800329a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800329e:	fab2 f282 	clz	r2, r2
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f042 0220 	orr.w	r2, r2, #32
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f002 021f 	and.w	r2, r2, #31
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 810c 	beq.w	80034d4 <HAL_RCC_OscConfig+0x2fc>
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8106 	bne.w	80034d4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f000 be86 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x110>
 80032da:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7c      	ldr	r2, [pc, #496]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e030      	b.n	800334a <HAL_RCC_OscConfig+0x172>
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x134>
 80032f2:	4b77      	ldr	r3, [pc, #476]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a76      	ldr	r2, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80032f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b74      	ldr	r3, [pc, #464]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a73      	ldr	r2, [pc, #460]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e01e      	b.n	800334a <HAL_RCC_OscConfig+0x172>
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x15a>
 8003318:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6c      	ldr	r2, [pc, #432]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800331e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e00b      	b.n	800334a <HAL_RCC_OscConfig+0x172>
 8003332:	4b67      	ldr	r3, [pc, #412]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a66      	ldr	r2, [pc, #408]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b64      	ldr	r3, [pc, #400]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a63      	ldr	r2, [pc, #396]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800334a:	4b61      	ldr	r3, [pc, #388]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	495d      	ldr	r1, [pc, #372]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d059      	beq.n	800341c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fd3a 	bl	8001de0 <HAL_GetTick>
 800336c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003372:	f7fe fd35 	bl	8001de0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d902      	bls.n	8003388 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	f000 be29 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
 8003388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800339c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0x1e2>
 80033b4:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x20e>
 80033ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033d6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033f2:	fa92 f2a2 	rbit	r2, r2
 80033f6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033fa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80033fe:	fab2 f282 	clz	r2, r2
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	f042 0220 	orr.w	r2, r2, #32
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f002 021f 	and.w	r2, r2, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f202 	lsl.w	r2, r1, r2
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ab      	beq.n	8003372 <HAL_RCC_OscConfig+0x19a>
 800341a:	e05c      	b.n	80034d6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe fce0 	bl	8001de0 <HAL_GetTick>
 8003420:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003426:	f7fe fcdb 	bl	8001de0 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d902      	bls.n	800343c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	f000 bdcf 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
 800343c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003440:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003450:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0x296>
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x2c2>
 800346e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003472:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003486:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800348a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCC_OscConfig+0x2f8>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800349e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034a6:	fa92 f2a2 	rbit	r2, r2
 80034aa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f042 0220 	orr.w	r2, r2, #32
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ab      	bne.n	8003426 <HAL_RCC_OscConfig+0x24e>
 80034ce:	e002      	b.n	80034d6 <HAL_RCC_OscConfig+0x2fe>
 80034d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 816f 	beq.w	80037c4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034e6:	4bd0      	ldr	r3, [pc, #832]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034f2:	4bcd      	ldr	r3, [pc, #820]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d16c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x400>
 80034fe:	4bca      	ldr	r3, [pc, #808]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d166      	bne.n	80035d8 <HAL_RCC_OscConfig+0x400>
 800350a:	2302      	movs	r3, #2
 800350c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800351c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d102      	bne.n	800353a <HAL_RCC_OscConfig+0x362>
 8003534:	4bbc      	ldr	r3, [pc, #752]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	e013      	b.n	8003562 <HAL_RCC_OscConfig+0x38a>
 800353a:	2302      	movs	r3, #2
 800353c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800354c:	2302      	movs	r3, #2
 800354e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003552:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800355e:	4bb2      	ldr	r3, [pc, #712]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2202      	movs	r2, #2
 8003564:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003568:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003574:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f042 0220 	orr.w	r2, r2, #32
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f002 021f 	and.w	r2, r2, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_RCC_OscConfig+0x3cc>
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f000 bd1b 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4ba0      	ldr	r3, [pc, #640]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	21f8      	movs	r1, #248	; 0xf8
 80035b4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035bc:	fa91 f1a1 	rbit	r1, r1
 80035c0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035c4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035c8:	fab1 f181 	clz	r1, r1
 80035cc:	b2c9      	uxtb	r1, r1
 80035ce:	408b      	lsls	r3, r1
 80035d0:	4995      	ldr	r1, [pc, #596]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	e0f5      	b.n	80037c4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8085 	beq.w	80036ee <HAL_RCC_OscConfig+0x516>
 80035e4:	2301      	movs	r3, #1
 80035e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80035f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2301      	movs	r3, #1
 800360e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fbe6 	bl	8001de0 <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361a:	f7fe fbe1 	bl	8001de0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d902      	bls.n	8003630 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	f000 bcd5 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
 8003630:	2302      	movs	r3, #2
 8003632:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003642:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d102      	bne.n	8003660 <HAL_RCC_OscConfig+0x488>
 800365a:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	e013      	b.n	8003688 <HAL_RCC_OscConfig+0x4b0>
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003672:	2302      	movs	r3, #2
 8003674:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003678:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003684:	4b68      	ldr	r3, [pc, #416]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2202      	movs	r2, #2
 800368a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800368e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003692:	fa92 f2a2 	rbit	r2, r2
 8003696:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800369a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800369e:	fab2 f282 	clz	r2, r2
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f002 021f 	and.w	r2, r2, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0af      	beq.n	800361a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	21f8      	movs	r1, #248	; 0xf8
 80036ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036d2:	fa91 f1a1 	rbit	r1, r1
 80036d6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80036da:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036de:	fab1 f181 	clz	r1, r1
 80036e2:	b2c9      	uxtb	r1, r1
 80036e4:	408b      	lsls	r3, r1
 80036e6:	4950      	ldr	r1, [pc, #320]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]
 80036ec:	e06a      	b.n	80037c4 <HAL_RCC_OscConfig+0x5ec>
 80036ee:	2301      	movs	r3, #1
 80036f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003700:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800370e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	461a      	mov	r2, r3
 8003716:	2300      	movs	r3, #0
 8003718:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe fb61 	bl	8001de0 <HAL_GetTick>
 800371e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003724:	f7fe fb5c 	bl	8001de0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d902      	bls.n	800373a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	f000 bc50 	b.w	8003fda <HAL_RCC_OscConfig+0xe02>
 800373a:	2302      	movs	r3, #2
 800373c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800374c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d102      	bne.n	800376a <HAL_RCC_OscConfig+0x592>
 8003764:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	e013      	b.n	8003792 <HAL_RCC_OscConfig+0x5ba>
 800376a:	2302      	movs	r3, #2
 800376c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800377c:	2302      	movs	r3, #2
 800377e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003782:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800378e:	4b26      	ldr	r3, [pc, #152]	; (8003828 <HAL_RCC_OscConfig+0x650>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2202      	movs	r2, #2
 8003794:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003798:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800379c:	fa92 f2a2 	rbit	r2, r2
 80037a0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037a8:	fab2 f282 	clz	r2, r2
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f042 0220 	orr.w	r2, r2, #32
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	f002 021f 	and.w	r2, r2, #31
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1af      	bne.n	8003724 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80da 	beq.w	8003988 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d069      	beq.n	80038b2 <HAL_RCC_OscConfig+0x6da>
 80037de:	2301      	movs	r3, #1
 80037e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80037f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_OscConfig+0x654>)
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	461a      	mov	r2, r3
 8003804:	2301      	movs	r3, #1
 8003806:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003808:	f7fe faea 	bl	8001de0 <HAL_GetTick>
 800380c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003810:	e00e      	b.n	8003830 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe fae5 	bl	8001de0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d906      	bls.n	8003830 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e3d9      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	10908120 	.word	0x10908120
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003842:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003846:	2202      	movs	r2, #2
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	fa93 f2a3 	rbit	r2, r3
 8003854:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800385e:	2202      	movs	r2, #2
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003870:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003872:	4ba5      	ldr	r3, [pc, #660]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003876:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800387a:	2102      	movs	r1, #2
 800387c:	6019      	str	r1, [r3, #0]
 800387e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f1a3 	rbit	r1, r3
 8003888:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800388c:	6019      	str	r1, [r3, #0]
  return result;
 800388e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0b0      	beq.n	8003812 <HAL_RCC_OscConfig+0x63a>
 80038b0:	e06a      	b.n	8003988 <HAL_RCC_OscConfig+0x7b0>
 80038b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fa93 f2a3 	rbit	r2, r3
 80038c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038c8:	601a      	str	r2, [r3, #0]
  return result;
 80038ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038ce:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <HAL_RCC_OscConfig+0x934>)
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	461a      	mov	r2, r3
 80038e0:	2300      	movs	r3, #0
 80038e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fe fa7c 	bl	8001de0 <HAL_GetTick>
 80038e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	e009      	b.n	8003902 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fe fa77 	bl	8001de0 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e36b      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003902:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003906:	2202      	movs	r2, #2
 8003908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	fa93 f2a3 	rbit	r2, r3
 8003914:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800391e:	2202      	movs	r2, #2
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003936:	2202      	movs	r2, #2
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	fa93 f2a3 	rbit	r2, r3
 8003944:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003948:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394a:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 800394c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003952:	2102      	movs	r1, #2
 8003954:	6019      	str	r1, [r3, #0]
 8003956:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	fa93 f1a3 	rbit	r1, r3
 8003960:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003964:	6019      	str	r1, [r3, #0]
  return result;
 8003966:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1b2      	bne.n	80038ee <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8158 	beq.w	8003c48 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d112      	bne.n	80039d0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	61d3      	str	r3, [r2, #28]
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d11a      	bne.n	8003a12 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039dc:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a4b      	ldr	r2, [pc, #300]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 80039e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e8:	f7fe f9fa 	bl	8001de0 <HAL_GetTick>
 80039ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e009      	b.n	8003a06 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fe f9f5 	bl	8001de0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e2e9      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <HAL_RCC_OscConfig+0x938>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ef      	beq.n	80039f2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x852>
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a39      	ldr	r2, [pc, #228]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6213      	str	r3, [r2, #32]
 8003a28:	e02f      	b.n	8003a8a <HAL_RCC_OscConfig+0x8b2>
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCC_OscConfig+0x876>
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a33      	ldr	r2, [pc, #204]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a46:	f023 0304 	bic.w	r3, r3, #4
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	e01d      	b.n	8003a8a <HAL_RCC_OscConfig+0x8b2>
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x89a>
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6213      	str	r3, [r2, #32]
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x8b2>
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a24      	ldr	r2, [pc, #144]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6213      	str	r3, [r2, #32]
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d06b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a94:	f7fe f9a4 	bl	8001de0 <HAL_GetTick>
 8003a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	e00b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fe f99f 	bl	8001de0 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e291      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003ab6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003aba:	2202      	movs	r2, #2
 8003abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	fa93 f2a3 	rbit	r2, r3
 8003ac8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ae4:	601a      	str	r2, [r3, #0]
  return result;
 8003ae6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003aea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d109      	bne.n	8003b14 <HAL_RCC_OscConfig+0x93c>
 8003b00:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <HAL_RCC_OscConfig+0x930>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	e014      	b.n	8003b30 <HAL_RCC_OscConfig+0x958>
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	10908120 	.word	0x10908120
 8003b10:	40007000 	.word	0x40007000
 8003b14:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b18:	2202      	movs	r2, #2
 8003b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	fa93 f2a3 	rbit	r2, r3
 8003b26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	4bbb      	ldr	r3, [pc, #748]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b34:	2102      	movs	r1, #2
 8003b36:	6011      	str	r1, [r2, #0]
 8003b38:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	fa92 f1a2 	rbit	r1, r2
 8003b42:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b46:	6011      	str	r1, [r2, #0]
  return result;
 8003b48:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	fab2 f282 	clz	r2, r2
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f002 021f 	and.w	r2, r2, #31
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d099      	beq.n	8003a9e <HAL_RCC_OscConfig+0x8c6>
 8003b6a:	e063      	b.n	8003c34 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f938 	bl	8001de0 <HAL_GetTick>
 8003b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00b      	b.n	8003b8e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe f933 	bl	8001de0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e225      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003b8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fa93 f2a3 	rbit	r2, r3
 8003ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003baa:	2202      	movs	r2, #2
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	fa93 f2a3 	rbit	r2, r3
 8003bb8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bbc:	601a      	str	r2, [r3, #0]
  return result;
 8003bbe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bc2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f043 0302 	orr.w	r3, r3, #2
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d102      	bne.n	8003bde <HAL_RCC_OscConfig+0xa06>
 8003bd8:	4b90      	ldr	r3, [pc, #576]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	e00d      	b.n	8003bfa <HAL_RCC_OscConfig+0xa22>
 8003bde:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003be2:	2202      	movs	r2, #2
 8003be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	fa93 f2a3 	rbit	r2, r3
 8003bf0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bfe:	2102      	movs	r1, #2
 8003c00:	6011      	str	r1, [r2, #0]
 8003c02:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	fa92 f1a2 	rbit	r1, r2
 8003c0c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c10:	6011      	str	r1, [r2, #0]
  return result;
 8003c12:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	fab2 f282 	clz	r2, r2
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	f002 021f 	and.w	r2, r2, #31
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1a0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c34:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b77      	ldr	r3, [pc, #476]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	4a76      	ldr	r2, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 81c2 	beq.w	8003fd8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c54:	4b71      	ldr	r3, [pc, #452]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	f000 819c 	beq.w	8003f9a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c62:	1d3b      	adds	r3, r7, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	f040 8114 	bne.w	8003e96 <HAL_RCC_OscConfig+0xcbe>
 8003c6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c86:	601a      	str	r2, [r3, #0]
  return result;
 8003c88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe f89c 	bl	8001de0 <HAL_GetTick>
 8003ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cac:	e009      	b.n	8003cc2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cae:	f7fe f897 	bl	8001de0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e18b      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003cc2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	fa93 f2a3 	rbit	r2, r3
 8003cd6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003cda:	601a      	str	r2, [r3, #0]
  return result;
 8003cdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ce0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_OscConfig+0xb24>
 8003cf6:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e01b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb5c>
 8003cfc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	fa93 f2a3 	rbit	r2, r3
 8003d10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	fa93 f2a3 	rbit	r2, r3
 8003d2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	4b3a      	ldr	r3, [pc, #232]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d3c:	6011      	str	r1, [r2, #0]
 8003d3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	fa92 f1a2 	rbit	r1, r2
 8003d48:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d4c:	6011      	str	r1, [r2, #0]
  return result;
 8003d4e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	fab2 f282 	clz	r2, r2
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	f042 0220 	orr.w	r2, r2, #32
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	f002 021f 	and.w	r2, r2, #31
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d19e      	bne.n	8003cae <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	4925      	ldr	r1, [pc, #148]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
 8003d8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	fa93 f2a3 	rbit	r2, r3
 8003da0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003da4:	601a      	str	r2, [r3, #0]
  return result;
 8003da6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003daa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003db6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fe f80d 	bl	8001de0 <HAL_GetTick>
 8003dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dca:	e009      	b.n	8003de0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe f808 	bl	8001de0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0fc      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003de0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fa93 f2a3 	rbit	r2, r3
 8003df4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003df8:	601a      	str	r2, [r3, #0]
  return result;
 8003dfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dfe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_RCC_OscConfig+0xc48>
 8003e14:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <HAL_RCC_OscConfig+0xc44>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	e01e      	b.n	8003e58 <HAL_RCC_OscConfig+0xc80>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	fa93 f2a3 	rbit	r2, r3
 8003e34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_RCC_OscConfig+0xe0c>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	fa92 f1a2 	rbit	r1, r2
 8003e6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e70:	6011      	str	r1, [r2, #0]
  return result;
 8003e72:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	fab2 f282 	clz	r2, r2
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	f042 0220 	orr.w	r2, r2, #32
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	f002 021f 	and.w	r2, r2, #31
 8003e88:	2101      	movs	r1, #1
 8003e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d09b      	beq.n	8003dcc <HAL_RCC_OscConfig+0xbf4>
 8003e94:	e0a0      	b.n	8003fd8 <HAL_RCC_OscConfig+0xe00>
 8003e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eae:	601a      	str	r2, [r3, #0]
  return result;
 8003eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ec0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fd ff88 	bl	8001de0 <HAL_GetTick>
 8003ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed4:	e009      	b.n	8003eea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fd ff83 	bl	8001de0 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e077      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
 8003eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	fa93 f2a3 	rbit	r2, r3
 8003efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f02:	601a      	str	r2, [r3, #0]
  return result;
 8003f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <HAL_RCC_OscConfig+0xd4c>
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0xe0c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	e01b      	b.n	8003f5c <HAL_RCC_OscConfig+0xd84>
 8003f24:	f107 0320 	add.w	r3, r7, #32
 8003f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f107 0320 	add.w	r3, r7, #32
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	fa93 f2a3 	rbit	r2, r3
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f107 0318 	add.w	r3, r7, #24
 8003f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f107 0318 	add.w	r3, r7, #24
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	fa93 f2a3 	rbit	r2, r3
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <HAL_RCC_OscConfig+0xe0c>)
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f107 0210 	add.w	r2, r7, #16
 8003f60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f64:	6011      	str	r1, [r2, #0]
 8003f66:	f107 0210 	add.w	r2, r7, #16
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	fa92 f1a2 	rbit	r1, r2
 8003f70:	f107 020c 	add.w	r2, r7, #12
 8003f74:	6011      	str	r1, [r2, #0]
  return result;
 8003f76:	f107 020c 	add.w	r2, r7, #12
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	fab2 f282 	clz	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f002 021f 	and.w	r2, r2, #31
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d19e      	bne.n	8003ed6 <HAL_RCC_OscConfig+0xcfe>
 8003f98:	e01e      	b.n	8003fd8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e018      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <HAL_RCC_OscConfig+0xe0c>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d108      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b09e      	sub	sp, #120	; 0x78
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e162      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b90      	ldr	r3, [pc, #576]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d910      	bls.n	8004030 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b8d      	ldr	r3, [pc, #564]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 0207 	bic.w	r2, r3, #7
 8004016:	498b      	ldr	r1, [pc, #556]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b89      	ldr	r3, [pc, #548]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e14a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403c:	4b82      	ldr	r3, [pc, #520]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	497f      	ldr	r1, [pc, #508]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80dc 	beq.w	8004214 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d13c      	bne.n	80040de <HAL_RCC_ClockConfig+0xf6>
 8004064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004068:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	d102      	bne.n	800408e <HAL_RCC_ClockConfig+0xa6>
 8004088:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	e00f      	b.n	80040ae <HAL_RCC_ClockConfig+0xc6>
 800408e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004092:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	667b      	str	r3, [r7, #100]	; 0x64
 800409c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60
 80040a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040aa:	4b67      	ldr	r3, [pc, #412]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80040b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040b6:	fa92 f2a2 	rbit	r2, r2
 80040ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040be:	fab2 f282 	clz	r2, r2
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	f042 0220 	orr.w	r2, r2, #32
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	f002 021f 	and.w	r2, r2, #31
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f202 	lsl.w	r2, r1, r2
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d17b      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0f3      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d13c      	bne.n	8004160 <HAL_RCC_ClockConfig+0x178>
 80040e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d102      	bne.n	8004110 <HAL_RCC_ClockConfig+0x128>
 800410a:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	e00f      	b.n	8004130 <HAL_RCC_ClockConfig+0x148>
 8004110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004114:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	647b      	str	r3, [r7, #68]	; 0x44
 800411e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004122:	643b      	str	r3, [r7, #64]	; 0x40
 8004124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800412c:	4b46      	ldr	r3, [pc, #280]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004134:	63ba      	str	r2, [r7, #56]	; 0x38
 8004136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004138:	fa92 f2a2 	rbit	r2, r2
 800413c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800413e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004140:	fab2 f282 	clz	r2, r2
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	f042 0220 	orr.w	r2, r2, #32
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	f002 021f 	and.w	r2, r2, #31
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f202 	lsl.w	r2, r1, r2
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d13a      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0b2      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
 8004160:	2302      	movs	r3, #2
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HAL_RCC_ClockConfig+0x1a0>
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e00d      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1bc>
 8004188:	2302      	movs	r3, #2
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
 8004194:	2302      	movs	r3, #2
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	4b29      	ldr	r3, [pc, #164]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2202      	movs	r2, #2
 80041a6:	61ba      	str	r2, [r7, #24]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	fa92 f2a2 	rbit	r2, r2
 80041ae:	617a      	str	r2, [r7, #20]
  return result;
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	fab2 f282 	clz	r2, r2
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	f042 0220 	orr.w	r2, r2, #32
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	f002 021f 	and.w	r2, r2, #31
 80041c2:	2101      	movs	r1, #1
 80041c4:	fa01 f202 	lsl.w	r2, r1, r2
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e079      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	491a      	ldr	r1, [pc, #104]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e4:	f7fd fdfc 	bl	8001de0 <HAL_GetTick>
 80041e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fd fdf8 	bl	8001de0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e061      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_RCC_ClockConfig+0x260>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d214      	bcs.n	800424c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 0207 	bic.w	r2, r3, #7
 800422a:	4906      	ldr	r1, [pc, #24]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_RCC_ClockConfig+0x25c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e040      	b.n	80042c6 <HAL_RCC_ClockConfig+0x2de>
 8004244:	40022000 	.word	0x40022000
 8004248:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	491a      	ldr	r1, [pc, #104]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4912      	ldr	r1, [pc, #72]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800428a:	f000 f829 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 800428e:	4601      	mov	r1, r0
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004298:	22f0      	movs	r2, #240	; 0xf0
 800429a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	fa92 f2a2 	rbit	r2, r2
 80042a2:	60fa      	str	r2, [r7, #12]
  return result;
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	fab2 f282 	clz	r2, r2
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	40d3      	lsrs	r3, r2
 80042ae:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <HAL_RCC_ClockConfig+0x2ec>)
 80042b0:	5cd3      	ldrb	r3, [r2, r3]
 80042b2:	fa21 f303 	lsr.w	r3, r1, r3
 80042b6:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <HAL_RCC_ClockConfig+0x2f0>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <HAL_RCC_ClockConfig+0x2f4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd fd4a 	bl	8001d58 <HAL_InitTick>
  
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3778      	adds	r7, #120	; 0x78
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	0800a110 	.word	0x0800a110
 80042d8:	20000004 	.word	0x20000004
 80042dc:	20000020 	.word	0x20000020

080042e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b08b      	sub	sp, #44	; 0x2c
 80042e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	2300      	movs	r3, #0
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042fa:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b04      	cmp	r3, #4
 8004308:	d002      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x30>
 800430a:	2b08      	cmp	r3, #8
 800430c:	d003      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x36>
 800430e:	e03c      	b.n	800438a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004310:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004312:	623b      	str	r3, [r7, #32]
      break;
 8004314:	e03c      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800431c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004320:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	fa92 f2a2 	rbit	r2, r2
 8004328:	607a      	str	r2, [r7, #4]
  return result;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	fab2 f282 	clz	r2, r2
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	40d3      	lsrs	r3, r2
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004336:	5cd3      	ldrb	r3, [r2, r3]
 8004338:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800433a:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	220f      	movs	r2, #15
 8004344:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	fa92 f2a2 	rbit	r2, r2
 800434c:	60fa      	str	r2, [r7, #12]
  return result;
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	fab2 f282 	clz	r2, r2
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	40d3      	lsrs	r3, r2
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800435a:	5cd3      	ldrb	r3, [r2, r3]
 800435c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	e004      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	623b      	str	r3, [r7, #32]
      break;
 8004388:	e002      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800438c:	623b      	str	r3, [r7, #32]
      break;
 800438e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004390:	6a3b      	ldr	r3, [r7, #32]
}
 8004392:	4618      	mov	r0, r3
 8004394:	372c      	adds	r7, #44	; 0x2c
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	007a1200 	.word	0x007a1200
 80043a8:	0800a128 	.word	0x0800a128
 80043ac:	0800a138 	.word	0x0800a138
 80043b0:	003d0900 	.word	0x003d0900

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000004 	.word	0x20000004

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043d2:	f7ff ffef 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d6:	4601      	mov	r1, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	fa92 f2a2 	rbit	r2, r2
 80043ec:	603a      	str	r2, [r7, #0]
  return result;
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	fab2 f282 	clz	r2, r2
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	40d3      	lsrs	r3, r2
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_RCC_GetPCLK1Freq+0x40>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	0800a120 	.word	0x0800a120

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004416:	f7ff ffcd 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 800441a:	4601      	mov	r1, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004424:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004428:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	fa92 f2a2 	rbit	r2, r2
 8004430:	603a      	str	r2, [r7, #0]
  return result;
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	40d3      	lsrs	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x40>)
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	0800a120 	.word	0x0800a120

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b092      	sub	sp, #72	; 0x48
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80d4 	beq.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004478:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10e      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	4a4a      	ldr	r2, [pc, #296]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	61d3      	str	r3, [r2, #28]
 8004490:	4b48      	ldr	r3, [pc, #288]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b45      	ldr	r3, [pc, #276]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a41      	ldr	r2, [pc, #260]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fd fc91 	bl	8001de0 <HAL_GetTick>
 80044be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd fc8d 	bl	8001de0 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	; 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e169      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b38      	ldr	r3, [pc, #224]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e0:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8084 	beq.w	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d07c      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004500:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	461a      	mov	r2, r3
 800452a:	2301      	movs	r3, #1
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004532:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	fa93 f3a3 	rbit	r3, r3
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	461a      	mov	r2, r3
 800454e:	2300      	movs	r3, #0
 8004550:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004552:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004556:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04b      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004562:	f7fd fc3d 	bl	8001de0 <HAL_GetTick>
 8004566:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd fc39 	bl	8001de0 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e113      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004580:	2302      	movs	r3, #2
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	2302      	movs	r3, #2
 800458e:	623b      	str	r3, [r7, #32]
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	61fb      	str	r3, [r7, #28]
  return result;
 8004598:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d108      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045ae:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	e00d      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40007000 	.word	0x40007000
 80045bc:	10908100 	.word	0x10908100
 80045c0:	2302      	movs	r3, #2
 80045c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	4b78      	ldr	r3, [pc, #480]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	2202      	movs	r2, #2
 80045d2:	613a      	str	r2, [r7, #16]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	fa92 f2a2 	rbit	r2, r2
 80045da:	60fa      	str	r2, [r7, #12]
  return result;
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	fab2 f282 	clz	r2, r2
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	f002 021f 	and.w	r2, r2, #31
 80045ee:	2101      	movs	r1, #1
 80045f0:	fa01 f202 	lsl.w	r2, r1, r2
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0b7      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045fa:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	496a      	ldr	r1, [pc, #424]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800460c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4a65      	ldr	r2, [pc, #404]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800462c:	4b60      	ldr	r3, [pc, #384]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	f023 0203 	bic.w	r2, r3, #3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	495d      	ldr	r1, [pc, #372]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800463a:	4313      	orrs	r3, r2
 800463c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800464a:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4956      	ldr	r1, [pc, #344]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004668:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	494e      	ldr	r1, [pc, #312]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f023 0210 	bic.w	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4947      	ldr	r1, [pc, #284]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004694:	4313      	orrs	r3, r2
 8004696:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	493f      	ldr	r1, [pc, #252]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f023 0220 	bic.w	r2, r3, #32
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	4938      	ldr	r1, [pc, #224]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046e0:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	4930      	ldr	r1, [pc, #192]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046fe:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	4929      	ldr	r1, [pc, #164]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800471c:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	4921      	ldr	r1, [pc, #132]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800473a:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	491a      	ldr	r1, [pc, #104]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	4912      	ldr	r1, [pc, #72]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	490b      	ldr	r1, [pc, #44]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	4903      	ldr	r1, [pc, #12]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3748      	adds	r7, #72	; 0x48
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000

080047b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e040      	b.n	8004848 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc fdc4 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fae0 	bl	8004db8 <UART_SetConfig>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e022      	b.n	8004848 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fca8 	bl	8005160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800481e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800482e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fd2f 	bl	80052a4 <UART_CheckIdleState>
 8004846:	4603      	mov	r3, r0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004864:	2b20      	cmp	r3, #32
 8004866:	f040 8082 	bne.w	800496e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_UART_Transmit+0x26>
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e07a      	b.n	8004970 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_UART_Transmit+0x38>
 8004884:	2302      	movs	r3, #2
 8004886:	e073      	b.n	8004970 <HAL_UART_Transmit+0x120>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	; 0x21
 800489c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800489e:	f7fd fa9f 	bl	8001de0 <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048bc:	d108      	bne.n	80048d0 <HAL_UART_Transmit+0x80>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e003      	b.n	80048d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80048e0:	e02d      	b.n	800493e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2180      	movs	r1, #128	; 0x80
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fd22 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e039      	b.n	8004970 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10b      	bne.n	800491a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	881a      	ldrh	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490e:	b292      	uxth	r2, r2
 8004910:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	3302      	adds	r3, #2
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	e008      	b.n	800492c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b292      	uxth	r2, r2
 8004924:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3301      	adds	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1cb      	bne.n	80048e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2200      	movs	r2, #0
 8004952:	2140      	movs	r1, #64	; 0x40
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fcee 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e005      	b.n	8004970 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	e000      	b.n	8004970 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800496e:	2302      	movs	r3, #2
  }
}
 8004970:	4618      	mov	r0, r3
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	f640 030f 	movw	r3, #2063	; 0x80f
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d113      	bne.n	80049d0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00e      	beq.n	80049d0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 81cc 	beq.w	8004d5e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
      }
      return;
 80049ce:	e1c6      	b.n	8004d5e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80e3 	beq.w	8004b9e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4ba5      	ldr	r3, [pc, #660]	; (8004c7c <HAL_UART_IRQHandler+0x304>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80d8 	beq.w	8004b9e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d010      	beq.n	8004a1a <HAL_UART_IRQHandler+0xa2>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2201      	movs	r2, #1
 8004a08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d010      	beq.n	8004a46 <HAL_UART_IRQHandler+0xce>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2202      	movs	r2, #2
 8004a34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a3c:	f043 0204 	orr.w	r2, r3, #4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d010      	beq.n	8004a72 <HAL_UART_IRQHandler+0xfa>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a68:	f043 0202 	orr.w	r2, r3, #2
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00b      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2208      	movs	r2, #8
 8004a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9e:	f043 0208 	orr.w	r2, r3, #8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d011      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x15e>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00c      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004acc:	f043 0220 	orr.w	r2, r3, #32
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8140 	beq.w	8004d62 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00c      	beq.n	8004b06 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d004      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d031      	beq.n	8004b8a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fc81 	bl	800542e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d123      	bne.n	8004b82 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b48:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d013      	beq.n	8004b7a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	4a4a      	ldr	r2, [pc, #296]	; (8004c80 <HAL_UART_IRQHandler+0x308>)
 8004b58:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fd faff 	bl	8002162 <HAL_DMA_Abort_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d017      	beq.n	8004b9a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004b74:	4610      	mov	r0, r2
 8004b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e00f      	b.n	8004b9a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f906 	bl	8004d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e00b      	b.n	8004b9a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f902 	bl	8004d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	e007      	b.n	8004b9a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8fe 	bl	8004d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004b98:	e0e3      	b.n	8004d62 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9a:	bf00      	nop
    return;
 8004b9c:	e0e1      	b.n	8004d62 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	f040 80a7 	bne.w	8004cf6 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 80a1 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 809b 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d156      	bne.n	8004c84 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004be0:	893b      	ldrh	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80bf 	beq.w	8004d66 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bee:	893a      	ldrh	r2, [r7, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	f080 80b8 	bcs.w	8004d66 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	893a      	ldrh	r2, [r7, #8]
 8004bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d02a      	beq.n	8004c5e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c16:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c36:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0210 	bic.w	r2, r2, #16
 8004c52:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fd fa49 	bl	80020f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f894 	bl	8004da0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c78:	e075      	b.n	8004d66 <HAL_UART_IRQHandler+0x3ee>
 8004c7a:	bf00      	nop
 8004c7c:	04000120 	.word	0x04000120
 8004c80:	0800548d 	.word	0x0800548d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d063      	beq.n	8004d6a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8004ca2:	897b      	ldrh	r3, [r7, #10]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d060      	beq.n	8004d6a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0210 	bic.w	r2, r2, #16
 8004ce8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f856 	bl	8004da0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cf4:	e039      	b.n	8004d6a <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00d      	beq.n	8004d1c <HAL_UART_IRQHandler+0x3a4>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fbe8 	bl	80054ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d1a:	e029      	b.n	8004d70 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01a      	beq.n	8004d6e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
    }
    return;
 8004d40:	e015      	b.n	8004d6e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d011      	beq.n	8004d70 <HAL_UART_IRQHandler+0x3f8>
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00c      	beq.n	8004d70 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fbae 	bl	80054b8 <UART_EndTransmit_IT>
    return;
 8004d5c:	e008      	b.n	8004d70 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004d5e:	bf00      	nop
 8004d60:	e006      	b.n	8004d70 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004d62:	bf00      	nop
 8004d64:	e004      	b.n	8004d70 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004d66:	bf00      	nop
 8004d68:	e002      	b.n	8004d70 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004d6e:	bf00      	nop
  }

}
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop

08004d78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004de6:	f023 030c 	bic.w	r3, r3, #12
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	6979      	ldr	r1, [r7, #20]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4aae      	ldr	r2, [pc, #696]	; (80050ec <UART_SetConfig+0x334>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d120      	bne.n	8004e7a <UART_SetConfig+0xc2>
 8004e38:	4bad      	ldr	r3, [pc, #692]	; (80050f0 <UART_SetConfig+0x338>)
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d817      	bhi.n	8004e74 <UART_SetConfig+0xbc>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0x94>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e5d 	.word	0x08004e5d
 8004e50:	08004e69 	.word	0x08004e69
 8004e54:	08004e6f 	.word	0x08004e6f
 8004e58:	08004e63 	.word	0x08004e63
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e0b5      	b.n	8004fce <UART_SetConfig+0x216>
 8004e62:	2302      	movs	r3, #2
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e0b2      	b.n	8004fce <UART_SetConfig+0x216>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e0af      	b.n	8004fce <UART_SetConfig+0x216>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e0ac      	b.n	8004fce <UART_SetConfig+0x216>
 8004e74:	2310      	movs	r3, #16
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e0a9      	b.n	8004fce <UART_SetConfig+0x216>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a9d      	ldr	r2, [pc, #628]	; (80050f4 <UART_SetConfig+0x33c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d124      	bne.n	8004ece <UART_SetConfig+0x116>
 8004e84:	4b9a      	ldr	r3, [pc, #616]	; (80050f0 <UART_SetConfig+0x338>)
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e90:	d011      	beq.n	8004eb6 <UART_SetConfig+0xfe>
 8004e92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e96:	d817      	bhi.n	8004ec8 <UART_SetConfig+0x110>
 8004e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e9c:	d011      	beq.n	8004ec2 <UART_SetConfig+0x10a>
 8004e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ea2:	d811      	bhi.n	8004ec8 <UART_SetConfig+0x110>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <UART_SetConfig+0xf8>
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d006      	beq.n	8004ebc <UART_SetConfig+0x104>
 8004eae:	e00b      	b.n	8004ec8 <UART_SetConfig+0x110>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e08b      	b.n	8004fce <UART_SetConfig+0x216>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e088      	b.n	8004fce <UART_SetConfig+0x216>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e085      	b.n	8004fce <UART_SetConfig+0x216>
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	77fb      	strb	r3, [r7, #31]
 8004ec6:	e082      	b.n	8004fce <UART_SetConfig+0x216>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	77fb      	strb	r3, [r7, #31]
 8004ecc:	e07f      	b.n	8004fce <UART_SetConfig+0x216>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a89      	ldr	r2, [pc, #548]	; (80050f8 <UART_SetConfig+0x340>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d124      	bne.n	8004f22 <UART_SetConfig+0x16a>
 8004ed8:	4b85      	ldr	r3, [pc, #532]	; (80050f0 <UART_SetConfig+0x338>)
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004ee0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ee4:	d011      	beq.n	8004f0a <UART_SetConfig+0x152>
 8004ee6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004eea:	d817      	bhi.n	8004f1c <UART_SetConfig+0x164>
 8004eec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef0:	d011      	beq.n	8004f16 <UART_SetConfig+0x15e>
 8004ef2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef6:	d811      	bhi.n	8004f1c <UART_SetConfig+0x164>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <UART_SetConfig+0x14c>
 8004efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f00:	d006      	beq.n	8004f10 <UART_SetConfig+0x158>
 8004f02:	e00b      	b.n	8004f1c <UART_SetConfig+0x164>
 8004f04:	2300      	movs	r3, #0
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e061      	b.n	8004fce <UART_SetConfig+0x216>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	77fb      	strb	r3, [r7, #31]
 8004f0e:	e05e      	b.n	8004fce <UART_SetConfig+0x216>
 8004f10:	2304      	movs	r3, #4
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e05b      	b.n	8004fce <UART_SetConfig+0x216>
 8004f16:	2308      	movs	r3, #8
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e058      	b.n	8004fce <UART_SetConfig+0x216>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e055      	b.n	8004fce <UART_SetConfig+0x216>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a75      	ldr	r2, [pc, #468]	; (80050fc <UART_SetConfig+0x344>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d124      	bne.n	8004f76 <UART_SetConfig+0x1be>
 8004f2c:	4b70      	ldr	r3, [pc, #448]	; (80050f0 <UART_SetConfig+0x338>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f38:	d011      	beq.n	8004f5e <UART_SetConfig+0x1a6>
 8004f3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f3e:	d817      	bhi.n	8004f70 <UART_SetConfig+0x1b8>
 8004f40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f44:	d011      	beq.n	8004f6a <UART_SetConfig+0x1b2>
 8004f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f4a:	d811      	bhi.n	8004f70 <UART_SetConfig+0x1b8>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <UART_SetConfig+0x1a0>
 8004f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f54:	d006      	beq.n	8004f64 <UART_SetConfig+0x1ac>
 8004f56:	e00b      	b.n	8004f70 <UART_SetConfig+0x1b8>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e037      	b.n	8004fce <UART_SetConfig+0x216>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e034      	b.n	8004fce <UART_SetConfig+0x216>
 8004f64:	2304      	movs	r3, #4
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e031      	b.n	8004fce <UART_SetConfig+0x216>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e02e      	b.n	8004fce <UART_SetConfig+0x216>
 8004f70:	2310      	movs	r3, #16
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e02b      	b.n	8004fce <UART_SetConfig+0x216>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a61      	ldr	r2, [pc, #388]	; (8005100 <UART_SetConfig+0x348>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d124      	bne.n	8004fca <UART_SetConfig+0x212>
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <UART_SetConfig+0x338>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004f88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f8c:	d011      	beq.n	8004fb2 <UART_SetConfig+0x1fa>
 8004f8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f92:	d817      	bhi.n	8004fc4 <UART_SetConfig+0x20c>
 8004f94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f98:	d011      	beq.n	8004fbe <UART_SetConfig+0x206>
 8004f9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f9e:	d811      	bhi.n	8004fc4 <UART_SetConfig+0x20c>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <UART_SetConfig+0x1f4>
 8004fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa8:	d006      	beq.n	8004fb8 <UART_SetConfig+0x200>
 8004faa:	e00b      	b.n	8004fc4 <UART_SetConfig+0x20c>
 8004fac:	2300      	movs	r3, #0
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e00d      	b.n	8004fce <UART_SetConfig+0x216>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e00a      	b.n	8004fce <UART_SetConfig+0x216>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e007      	b.n	8004fce <UART_SetConfig+0x216>
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e004      	b.n	8004fce <UART_SetConfig+0x216>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e001      	b.n	8004fce <UART_SetConfig+0x216>
 8004fca:	2310      	movs	r3, #16
 8004fcc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd6:	d15c      	bne.n	8005092 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8004fd8:	7ffb      	ldrb	r3, [r7, #31]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d827      	bhi.n	800502e <UART_SetConfig+0x276>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0x22c>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	0800502f 	.word	0x0800502f
 8004ff4:	0800501f 	.word	0x0800501f
 8004ff8:	0800502f 	.word	0x0800502f
 8004ffc:	0800502f 	.word	0x0800502f
 8005000:	0800502f 	.word	0x0800502f
 8005004:	08005027 	.word	0x08005027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005008:	f7ff f9e0 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 800500c:	61b8      	str	r0, [r7, #24]
        break;
 800500e:	e013      	b.n	8005038 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7ff f9fe 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8005014:	61b8      	str	r0, [r7, #24]
        break;
 8005016:	e00f      	b.n	8005038 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005018:	4b3a      	ldr	r3, [pc, #232]	; (8005104 <UART_SetConfig+0x34c>)
 800501a:	61bb      	str	r3, [r7, #24]
        break;
 800501c:	e00c      	b.n	8005038 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501e:	f7ff f95f 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8005022:	61b8      	str	r0, [r7, #24]
        break;
 8005024:	e008      	b.n	8005038 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502a:	61bb      	str	r3, [r7, #24]
        break;
 800502c:	e004      	b.n	8005038 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	77bb      	strb	r3, [r7, #30]
        break;
 8005036:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8085 	beq.w	800514a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	005a      	lsls	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	441a      	add	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d916      	bls.n	800508c <UART_SetConfig+0x2d4>
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d212      	bcs.n	800508c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f023 030f 	bic.w	r3, r3, #15
 800506e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	b29b      	uxth	r3, r3
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	b29a      	uxth	r2, r3
 800507c:	89fb      	ldrh	r3, [r7, #14]
 800507e:	4313      	orrs	r3, r2
 8005080:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	89fa      	ldrh	r2, [r7, #14]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	e05e      	b.n	800514a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	77bb      	strb	r3, [r7, #30]
 8005090:	e05b      	b.n	800514a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005092:	7ffb      	ldrb	r3, [r7, #31]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d837      	bhi.n	8005108 <UART_SetConfig+0x350>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <UART_SetConfig+0x2e8>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	08005109 	.word	0x08005109
 80050b0:	080050db 	.word	0x080050db
 80050b4:	08005109 	.word	0x08005109
 80050b8:	08005109 	.word	0x08005109
 80050bc:	08005109 	.word	0x08005109
 80050c0:	080050e3 	.word	0x080050e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c4:	f7ff f982 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 80050c8:	61b8      	str	r0, [r7, #24]
        break;
 80050ca:	e022      	b.n	8005112 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050cc:	f7ff f9a0 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 80050d0:	61b8      	str	r0, [r7, #24]
        break;
 80050d2:	e01e      	b.n	8005112 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <UART_SetConfig+0x34c>)
 80050d6:	61bb      	str	r3, [r7, #24]
        break;
 80050d8:	e01b      	b.n	8005112 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050da:	f7ff f901 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80050de:	61b8      	str	r0, [r7, #24]
        break;
 80050e0:	e017      	b.n	8005112 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e6:	61bb      	str	r3, [r7, #24]
        break;
 80050e8:	e013      	b.n	8005112 <UART_SetConfig+0x35a>
 80050ea:	bf00      	nop
 80050ec:	40013800 	.word	0x40013800
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40004400 	.word	0x40004400
 80050f8:	40004800 	.word	0x40004800
 80050fc:	40004c00 	.word	0x40004c00
 8005100:	40005000 	.word	0x40005000
 8005104:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	77bb      	strb	r3, [r7, #30]
        break;
 8005110:	bf00      	nop
    }

    if (pclk != 0U)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d018      	beq.n	800514a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	085a      	lsrs	r2, r3, #1
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	b29b      	uxth	r3, r3
 800512c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b0f      	cmp	r3, #15
 8005132:	d908      	bls.n	8005146 <UART_SetConfig+0x38e>
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513a:	d204      	bcs.n	8005146 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	60da      	str	r2, [r3, #12]
 8005144:	e001      	b.n	800514a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005156:	7fbb      	ldrb	r3, [r7, #30]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01a      	beq.n	8005276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525e:	d10a      	bne.n	8005276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]
  }
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052b4:	f7fc fd94 	bl	8001de0 <HAL_GetTick>
 80052b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d10e      	bne.n	80052e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f82d 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e023      	b.n	800532e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d10e      	bne.n	8005312 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f817 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e00d      	b.n	800532e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005346:	e05e      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d05a      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005350:	f7fc fd46 	bl	8001de0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	429a      	cmp	r2, r3
 800535e:	d302      	bcc.n	8005366 <UART_WaitOnFlagUntilTimeout+0x30>
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11b      	bne.n	800539e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005374:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e043      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02c      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ba:	d124      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e00f      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	429a      	cmp	r2, r3
 8005422:	d091      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005444:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0210 	bic.w	r2, r2, #16
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fc6e 	bl	8004d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fc4b 	bl	8004d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <newKalmanFilter>:
#include "kalmanFilter.h"
#include "CWrapper_KalmanFilter.h"

extern "C" {
	KalmanFilter* newKalmanFilter()
	{
 80054fe:	b598      	push	{r3, r4, r7, lr}
 8005500:	af00      	add	r7, sp, #0
		return new KalmanFilter();
 8005502:	20dc      	movs	r0, #220	; 0xdc
 8005504:	f000 fb52 	bl	8005bac <_Znwj>
 8005508:	4603      	mov	r3, r0
 800550a:	461c      	mov	r4, r3
 800550c:	4620      	mov	r0, r4
 800550e:	f000 f825 	bl	800555c <_ZN12KalmanFilterC1Ev>
 8005512:	4623      	mov	r3, r4
	}
 8005514:	4618      	mov	r0, r3
 8005516:	bd98      	pop	{r3, r4, r7, pc}

08005518 <KalmanFilter_getAngle>:

	float KalmanFilter_getAngle(KalmanFilter *c, float Angle_Acc, float Gyro_Vel, float Angle_Gyro_Correction, float Angle_Correction, float dt)
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6178      	str	r0, [r7, #20]
 8005520:	ed87 0a04 	vstr	s0, [r7, #16]
 8005524:	edc7 0a03 	vstr	s1, [r7, #12]
 8005528:	ed87 1a02 	vstr	s2, [r7, #8]
 800552c:	edc7 1a01 	vstr	s3, [r7, #4]
 8005530:	ed87 2a00 	vstr	s4, [r7]
		return c->getAngle(Angle_Acc, Gyro_Vel, Angle_Correction, Angle_Gyro_Correction, dt);
 8005534:	ed97 2a00 	vldr	s4, [r7]
 8005538:	edd7 1a02 	vldr	s3, [r7, #8]
 800553c:	ed97 1a01 	vldr	s2, [r7, #4]
 8005540:	edd7 0a03 	vldr	s1, [r7, #12]
 8005544:	ed97 0a04 	vldr	s0, [r7, #16]
 8005548:	6978      	ldr	r0, [r7, #20]
 800554a:	f000 f891 	bl	8005670 <_ZN12KalmanFilter8getAngleEfffff>
 800554e:	eef0 7a40 	vmov.f32	s15, s0
	}
 8005552:	eeb0 0a67 	vmov.f32	s0, s15
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <_ZN12KalmanFilterC1Ev>:
#include "kalmanFilter.h"
#include "math.h"

#define deg_to_rad  3.142f / 180.0f

KalmanFilter::KalmanFilter(void):
 800555c:	b4b0      	push	{r4, r5, r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	phi {0, 1, deltaT, 0, 1},//1
	psi {0, deltaT, 0},//1
	I {0, 1, 0, 0, 1},//1
	R {0.001},//00
	Q {0, 0.0002*0.0002, 0, 0, 0.0001*0.0001},//error in calculation of the process covarience matrix // default {0, 0.0002*0.0002, 0, 0, 0.0001*0.0001}
	H {0, 1, 0}//1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a3e      	ldr	r2, [pc, #248]	; (8005660 <_ZN12KalmanFilterC1Ev+0x104>)
 8005568:	1d1c      	adds	r4, r3, #4
 800556a:	4615      	mov	r5, r2
 800556c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800556e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a3a      	ldr	r2, [pc, #232]	; (8005660 <_ZN12KalmanFilterC1Ev+0x104>)
 8005578:	f103 0418 	add.w	r4, r3, #24
 800557c:	4615      	mov	r5, r2
 800557e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a35      	ldr	r2, [pc, #212]	; (8005660 <_ZN12KalmanFilterC1Ev+0x104>)
 800558a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800558e:	4615      	mov	r5, r2
 8005590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3344      	adds	r3, #68	; 0x44
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3350      	adds	r3, #80	; 0x50
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	335c      	adds	r3, #92	; 0x5c
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3368      	adds	r3, #104	; 0x68
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	675a      	str	r2, [r3, #116]	; 0x74
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80055de:	679a      	str	r2, [r3, #120]	; 0x78
	phi {0, 1, deltaT, 0, 1},//1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	H {0, 1, 0}//1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3388      	adds	r3, #136	; 0x88
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	609a      	str	r2, [r3, #8]
	psi {0, deltaT, 0},//1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	H {0, 1, 0}//1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a13      	ldr	r2, [pc, #76]	; (8005664 <_ZN12KalmanFilterC1Ev+0x108>)
 8005616:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800561a:	4615      	mov	r5, r2
 800561c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800561e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a10      	ldr	r2, [pc, #64]	; (8005668 <_ZN12KalmanFilterC1Ev+0x10c>)
 8005628:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a0f      	ldr	r2, [pc, #60]	; (800566c <_ZN12KalmanFilterC1Ev+0x110>)
 8005630:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8005634:	4615      	mov	r5, r2
 8005636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	33c0      	adds	r3, #192	; 0xc0
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005650:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
{}
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	bcb0      	pop	{r4, r5, r7}
 800565e:	4770      	bx	lr
 8005660:	0800a0d4 	.word	0x0800a0d4
 8005664:	0800a0e8 	.word	0x0800a0e8
 8005668:	3a83126f 	.word	0x3a83126f
 800566c:	0800a0fc 	.word	0x0800a0fc

08005670 <_ZN12KalmanFilter8getAngleEfffff>:
 * if we estimate Roll => Angle_Gyro_Correction = Gyro_Yaw_Angle && Angle_Correction = xkPitch[1]: estimated Pitch Angle
 *
 */

float KalmanFilter::getAngle(float Angle_Acc, float Gyro_Vel, float Angle_Correction, float Angle_Gyro_Correction, float dt)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6178      	str	r0, [r7, #20]
 8005678:	ed87 0a04 	vstr	s0, [r7, #16]
 800567c:	edc7 0a03 	vstr	s1, [r7, #12]
 8005680:	ed87 1a02 	vstr	s2, [r7, #8]
 8005684:	edc7 1a01 	vstr	s3, [r7, #4]
 8005688:	ed87 2a00 	vstr	s4, [r7]
	ukRoll = Gyro_Vel;//gyro_y / 131.0f;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	zkRoll = Angle_Acc;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	deltaT = dt;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40

	//Step 1. Propagate the state and covariance from  k -> k+1
	// pk1Minus = phi x xk + psi x uk
	// pk1Minus = phi x pk x phiT +Q

	xk1MinusRoll[1] = phi[1] * xkRoll[1] + phi[2] * xkRoll[2] + psi[1] * ukRoll;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80056ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80056be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80056d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	xk1MinusRoll[2] = phi[3] * xkRoll[1] + phi[4] * xkRoll[2] + psi[2] * ukRoll;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80056ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80056fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005700:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8005710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	pk1MinusRoll[1] = (phi[1] * pkRoll[1] + phi[2] * pkRoll[3]) * phi[1] + (phi[1] * pkRoll[2] + phi[2] * pkRoll[4]) * phi[2] + Q[1];
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	edd3 7a02 	vldr	s15, [r3, #8]
 800572a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	edd3 7a04 	vldr	s15, [r3, #16]
 800573a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800573e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	edd3 7a03 	vldr	s15, [r3, #12]
 8005758:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	edd3 7a05 	vldr	s15, [r3, #20]
 8005768:	ee66 7a27 	vmul.f32	s15, s12, s15
 800576c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800577a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8005784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	edc3 7a07 	vstr	s15, [r3, #28]
	pk1MinusRoll[2] = (phi[1] * pkRoll[1] + phi[2] * pkRoll[3]) * phi[3] + (phi[1] * pkRoll[2] + phi[2] * pkRoll[4]) * phi[4] + Q[2];
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	edd3 7a02 	vldr	s15, [r3, #8]
 800579a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80057aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80057b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80057c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80057d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80057dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80057e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80057f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	edc3 7a08 	vstr	s15, [r3, #32]
	pk1MinusRoll[3] = (phi[3] * pkRoll[1] + phi[4] * pkRoll[3]) * phi[1] + (phi[3] * pkRoll[2] + phi[4] * pkRoll[4]) * phi[2] + Q[3];
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	edd3 7a02 	vldr	s15, [r3, #8]
 800580a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	edd3 7a04 	vldr	s15, [r3, #16]
 800581a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800581e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	edd3 7a03 	vldr	s15, [r3, #12]
 8005838:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	edd3 7a05 	vldr	s15, [r3, #20]
 8005848:	ee66 7a27 	vmul.f32	s15, s12, s15
 800584c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800585a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pk1MinusRoll[4] = (phi[3] * pkRoll[1] + phi[4] * pkRoll[3]) * phi[3] + (phi[3] * pkRoll[2] + phi[4] * pkRoll[4]) * phi[4] + Q[4];//Q[3]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	edd3 7a02 	vldr	s15, [r3, #8]
 800587a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	edd3 7a04 	vldr	s15, [r3, #16]
 800588a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800588e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8005898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80058a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80058b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80058c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80058d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	//Step 2. Calculate Kalman gain
	// S = H * pk1Minus * HT + R
	// KK1 = pk1Minus * HT *inv(S)

	S = (H[1] * pk1MinusRoll[1] + H[2] * pk1MinusRoll[3]) * H[1] + (H[1] * pk1MinusRoll[2] + H[2] * pk1MinusRoll[4]) * H[2] + R;//H[1]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80058ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80058fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	edd3 6a31 	vldr	s13, [r3, #196]	; 0xc4
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	edd3 7a08 	vldr	s15, [r3, #32]
 8005918:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005928:	ee66 7a27 	vmul.f32	s15, s12, s15
 800592c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8005936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800593a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8005944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

	K[1] = (pk1MinusRoll[1] * H[1] + pk1MinusRoll[2] * H[2]) / S;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	ed93 7a07 	vldr	s14, [r3, #28]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800595a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	edd3 6a08 	vldr	s13, [r3, #32]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800596a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800596e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 8005978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	K[2] = (pk1MinusRoll[3] * H[1] + pk1MinusRoll[4] * H[2]) / S;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800598e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800599e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059a2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 80059ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	//Step 3. Calculate state and covariance updates
	// xk1 = xk1Minus + KK1 * (zk - H * xk1Minus)
	// pk1 = (I - KK1 * H) * pk1Minus

	nuRoll = zkRoll - (H[1] * xk1MinusRoll[1] + H[2] * xk1MinusRoll[2]);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	edd3 6a31 	vldr	s13, [r3, #196]	; 0xc4
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80059c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80059d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80059dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8

	xk1Roll[1] = xk1MinusRoll[1] + K[1] * nuRoll;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80059fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	xk1Roll[2] = xk1MinusRoll[2] + K[2] * nuRoll;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8005a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	pk1Roll[1] = (1 - K[1] * H[1]) * pk1MinusRoll[1] + (0 - K[1] * H[2]) * pk1MinusRoll[3];
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8005a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a5c:	eddf 6a52 	vldr	s13, [pc, #328]	; 8005ba8 <_ZN12KalmanFilter8getAngleEfffff+0x538>
 8005a60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	pk1Roll[2] = (1 - K[1] * H[1]) * pk1MinusRoll[2] + (0 - K[1] * H[2]) * pk1MinusRoll[4];
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	edd3 7a08 	vldr	s15, [r3, #32]
 8005a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8005aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aaa:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8005ba8 <_ZN12KalmanFilter8getAngleEfffff+0x538>
 8005aae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pk1Roll[3] = (0 - K[2] * H[1]) * pk1MinusRoll[1] + (1 - K[2] * H[2]) * pk1MinusRoll[3];
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005ba8 <_ZN12KalmanFilter8getAngleEfffff+0x538>
 8005ada:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8005af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	pk1Roll[4] = (0 - K[2] * H[1]) * pk1MinusRoll[2] + (1 - K[2] * H[2]) * pk1MinusRoll[4];
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b24:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005ba8 <_ZN12KalmanFilter8getAngleEfffff+0x538>
 8005b28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8005b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	xkRoll[1] = xk1Roll[1];
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	649a      	str	r2, [r3, #72]	; 0x48
	xkRoll[2] = xk1Roll[2];
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	64da      	str	r2, [r3, #76]	; 0x4c

	pkRoll[1] = pk1Roll[1];
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	609a      	str	r2, [r3, #8]
	pkRoll[2] = pk1Roll[2];
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	60da      	str	r2, [r3, #12]
	pkRoll[3] = pk1Roll[3];
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	611a      	str	r2, [r3, #16]
	pkRoll[4] = pk1Roll[4];
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	615a      	str	r2, [r3, #20]

	return xkRoll[1];
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b96:	ee07 3a90 	vmov	s15, r3
}
 8005b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	00000000 	.word	0x00000000

08005bac <_Znwj>:
 8005bac:	2801      	cmp	r0, #1
 8005bae:	bf38      	it	cc
 8005bb0:	2001      	movcc	r0, #1
 8005bb2:	b510      	push	{r4, lr}
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f001 fbba 	bl	8007330 <malloc>
 8005bbc:	b930      	cbnz	r0, 8005bcc <_Znwj+0x20>
 8005bbe:	f000 f807 	bl	8005bd0 <_ZSt15get_new_handlerv>
 8005bc2:	b908      	cbnz	r0, 8005bc8 <_Znwj+0x1c>
 8005bc4:	f001 fb82 	bl	80072cc <abort>
 8005bc8:	4780      	blx	r0
 8005bca:	e7f4      	b.n	8005bb6 <_Znwj+0xa>
 8005bcc:	bd10      	pop	{r4, pc}
	...

08005bd0 <_ZSt15get_new_handlerv>:
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <_ZSt15get_new_handlerv+0xc>)
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	f3bf 8f5b 	dmb	ish
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000230 	.word	0x20000230

08005be0 <sin>:
 8005be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005be2:	ec53 2b10 	vmov	r2, r3, d0
 8005be6:	4826      	ldr	r0, [pc, #152]	; (8005c80 <sin+0xa0>)
 8005be8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bec:	4281      	cmp	r1, r0
 8005bee:	dc07      	bgt.n	8005c00 <sin+0x20>
 8005bf0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005c78 <sin+0x98>
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f001 f993 	bl	8006f20 <__kernel_sin>
 8005bfa:	ec51 0b10 	vmov	r0, r1, d0
 8005bfe:	e007      	b.n	8005c10 <sin+0x30>
 8005c00:	4820      	ldr	r0, [pc, #128]	; (8005c84 <sin+0xa4>)
 8005c02:	4281      	cmp	r1, r0
 8005c04:	dd09      	ble.n	8005c1a <sin+0x3a>
 8005c06:	ee10 0a10 	vmov	r0, s0
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f7fa fb3c 	bl	8000288 <__aeabi_dsub>
 8005c10:	ec41 0b10 	vmov	d0, r0, r1
 8005c14:	b005      	add	sp, #20
 8005c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c1a:	4668      	mov	r0, sp
 8005c1c:	f000 fab8 	bl	8006190 <__ieee754_rem_pio2>
 8005c20:	f000 0003 	and.w	r0, r0, #3
 8005c24:	2801      	cmp	r0, #1
 8005c26:	d008      	beq.n	8005c3a <sin+0x5a>
 8005c28:	2802      	cmp	r0, #2
 8005c2a:	d00d      	beq.n	8005c48 <sin+0x68>
 8005c2c:	b9d0      	cbnz	r0, 8005c64 <sin+0x84>
 8005c2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c32:	ed9d 0b00 	vldr	d0, [sp]
 8005c36:	2001      	movs	r0, #1
 8005c38:	e7dd      	b.n	8005bf6 <sin+0x16>
 8005c3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c3e:	ed9d 0b00 	vldr	d0, [sp]
 8005c42:	f000 fd65 	bl	8006710 <__kernel_cos>
 8005c46:	e7d8      	b.n	8005bfa <sin+0x1a>
 8005c48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c4c:	ed9d 0b00 	vldr	d0, [sp]
 8005c50:	2001      	movs	r0, #1
 8005c52:	f001 f965 	bl	8006f20 <__kernel_sin>
 8005c56:	ec53 2b10 	vmov	r2, r3, d0
 8005c5a:	ee10 0a10 	vmov	r0, s0
 8005c5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005c62:	e7d5      	b.n	8005c10 <sin+0x30>
 8005c64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c68:	ed9d 0b00 	vldr	d0, [sp]
 8005c6c:	f000 fd50 	bl	8006710 <__kernel_cos>
 8005c70:	e7f1      	b.n	8005c56 <sin+0x76>
 8005c72:	bf00      	nop
 8005c74:	f3af 8000 	nop.w
	...
 8005c80:	3fe921fb 	.word	0x3fe921fb
 8005c84:	7fefffff 	.word	0x7fefffff

08005c88 <asin>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	ed2d 8b02 	vpush	{d8}
 8005c8e:	ec55 4b10 	vmov	r4, r5, d0
 8005c92:	f000 f869 	bl	8005d68 <__ieee754_asin>
 8005c96:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <asin+0x68>)
 8005c98:	eeb0 8a40 	vmov.f32	s16, s0
 8005c9c:	eef0 8a60 	vmov.f32	s17, s1
 8005ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	d01c      	beq.n	8005ce2 <asin+0x5a>
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fa ff3c 	bl	8000b2c <__aeabi_dcmpun>
 8005cb4:	b9a8      	cbnz	r0, 8005ce2 <asin+0x5a>
 8005cb6:	ec45 4b10 	vmov	d0, r4, r5
 8005cba:	f001 f9ef 	bl	800709c <fabs>
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <asin+0x6c>)
 8005cc0:	ec51 0b10 	vmov	r0, r1, d0
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f7fa ff27 	bl	8000b18 <__aeabi_dcmpgt>
 8005cca:	b150      	cbz	r0, 8005ce2 <asin+0x5a>
 8005ccc:	f001 fb06 	bl	80072dc <__errno>
 8005cd0:	ecbd 8b02 	vpop	{d8}
 8005cd4:	2321      	movs	r3, #33	; 0x21
 8005cd6:	6003      	str	r3, [r0, #0]
 8005cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cdc:	4806      	ldr	r0, [pc, #24]	; (8005cf8 <asin+0x70>)
 8005cde:	f001 ba67 	b.w	80071b0 <nan>
 8005ce2:	eeb0 0a48 	vmov.f32	s0, s16
 8005ce6:	eef0 0a68 	vmov.f32	s1, s17
 8005cea:	ecbd 8b02 	vpop	{d8}
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	20000025 	.word	0x20000025
 8005cf4:	3ff00000 	.word	0x3ff00000
 8005cf8:	0800a5f8 	.word	0x0800a5f8

08005cfc <sqrt>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	ed2d 8b02 	vpush	{d8}
 8005d02:	ec55 4b10 	vmov	r4, r5, d0
 8005d06:	f000 fc4d 	bl	80065a4 <__ieee754_sqrt>
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <sqrt+0x64>)
 8005d0c:	eeb0 8a40 	vmov.f32	s16, s0
 8005d10:	eef0 8a60 	vmov.f32	s17, s1
 8005d14:	f993 3000 	ldrsb.w	r3, [r3]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	d019      	beq.n	8005d50 <sqrt+0x54>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	4620      	mov	r0, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7fa ff02 	bl	8000b2c <__aeabi_dcmpun>
 8005d28:	b990      	cbnz	r0, 8005d50 <sqrt+0x54>
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fed3 	bl	8000adc <__aeabi_dcmplt>
 8005d36:	b158      	cbz	r0, 8005d50 <sqrt+0x54>
 8005d38:	f001 fad0 	bl	80072dc <__errno>
 8005d3c:	2321      	movs	r3, #33	; 0x21
 8005d3e:	6003      	str	r3, [r0, #0]
 8005d40:	2200      	movs	r2, #0
 8005d42:	2300      	movs	r3, #0
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	f7fa fd80 	bl	800084c <__aeabi_ddiv>
 8005d4c:	ec41 0b18 	vmov	d8, r0, r1
 8005d50:	eeb0 0a48 	vmov.f32	s0, s16
 8005d54:	eef0 0a68 	vmov.f32	s1, s17
 8005d58:	ecbd 8b02 	vpop	{d8}
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000025 	.word	0x20000025
 8005d64:	00000000 	.word	0x00000000

08005d68 <__ieee754_asin>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	ed2d 8b04 	vpush	{d8-d9}
 8005d70:	ec55 4b10 	vmov	r4, r5, d0
 8005d74:	4bcc      	ldr	r3, [pc, #816]	; (80060a8 <__ieee754_asin+0x340>)
 8005d76:	b083      	sub	sp, #12
 8005d78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005d7c:	4598      	cmp	r8, r3
 8005d7e:	9501      	str	r5, [sp, #4]
 8005d80:	dd35      	ble.n	8005dee <__ieee754_asin+0x86>
 8005d82:	ee10 3a10 	vmov	r3, s0
 8005d86:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8005d8a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8005d8e:	ea58 0303 	orrs.w	r3, r8, r3
 8005d92:	d117      	bne.n	8005dc4 <__ieee754_asin+0x5c>
 8005d94:	a3aa      	add	r3, pc, #680	; (adr r3, 8006040 <__ieee754_asin+0x2d8>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	ee10 0a10 	vmov	r0, s0
 8005d9e:	4629      	mov	r1, r5
 8005da0:	f7fa fc2a 	bl	80005f8 <__aeabi_dmul>
 8005da4:	a3a8      	add	r3, pc, #672	; (adr r3, 8006048 <__ieee754_asin+0x2e0>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	4606      	mov	r6, r0
 8005dac:	460f      	mov	r7, r1
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fc21 	bl	80005f8 <__aeabi_dmul>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4630      	mov	r0, r6
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	f7fa fa65 	bl	800028c <__adddf3>
 8005dc2:	e00b      	b.n	8005ddc <__ieee754_asin+0x74>
 8005dc4:	ee10 2a10 	vmov	r2, s0
 8005dc8:	462b      	mov	r3, r5
 8005dca:	ee10 0a10 	vmov	r0, s0
 8005dce:	4629      	mov	r1, r5
 8005dd0:	f7fa fa5a 	bl	8000288 <__aeabi_dsub>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	f7fa fd38 	bl	800084c <__aeabi_ddiv>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	ec45 4b10 	vmov	d0, r4, r5
 8005de4:	b003      	add	sp, #12
 8005de6:	ecbd 8b04 	vpop	{d8-d9}
 8005dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dee:	4baf      	ldr	r3, [pc, #700]	; (80060ac <__ieee754_asin+0x344>)
 8005df0:	4598      	cmp	r8, r3
 8005df2:	dc11      	bgt.n	8005e18 <__ieee754_asin+0xb0>
 8005df4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005df8:	f280 80ae 	bge.w	8005f58 <__ieee754_asin+0x1f0>
 8005dfc:	a394      	add	r3, pc, #592	; (adr r3, 8006050 <__ieee754_asin+0x2e8>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	ee10 0a10 	vmov	r0, s0
 8005e06:	4629      	mov	r1, r5
 8005e08:	f7fa fa40 	bl	800028c <__adddf3>
 8005e0c:	4ba8      	ldr	r3, [pc, #672]	; (80060b0 <__ieee754_asin+0x348>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f7fa fe82 	bl	8000b18 <__aeabi_dcmpgt>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1e3      	bne.n	8005de0 <__ieee754_asin+0x78>
 8005e18:	ec45 4b10 	vmov	d0, r4, r5
 8005e1c:	f001 f93e 	bl	800709c <fabs>
 8005e20:	49a3      	ldr	r1, [pc, #652]	; (80060b0 <__ieee754_asin+0x348>)
 8005e22:	ec53 2b10 	vmov	r2, r3, d0
 8005e26:	2000      	movs	r0, #0
 8005e28:	f7fa fa2e 	bl	8000288 <__aeabi_dsub>
 8005e2c:	4ba1      	ldr	r3, [pc, #644]	; (80060b4 <__ieee754_asin+0x34c>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f7fa fbe2 	bl	80005f8 <__aeabi_dmul>
 8005e34:	a388      	add	r3, pc, #544	; (adr r3, 8006058 <__ieee754_asin+0x2f0>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	f7fa fbdb 	bl	80005f8 <__aeabi_dmul>
 8005e42:	a387      	add	r3, pc, #540	; (adr r3, 8006060 <__ieee754_asin+0x2f8>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa fa20 	bl	800028c <__adddf3>
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	462b      	mov	r3, r5
 8005e50:	f7fa fbd2 	bl	80005f8 <__aeabi_dmul>
 8005e54:	a384      	add	r3, pc, #528	; (adr r3, 8006068 <__ieee754_asin+0x300>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa fa15 	bl	8000288 <__aeabi_dsub>
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	f7fa fbc9 	bl	80005f8 <__aeabi_dmul>
 8005e66:	a382      	add	r3, pc, #520	; (adr r3, 8006070 <__ieee754_asin+0x308>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa fa0e 	bl	800028c <__adddf3>
 8005e70:	4622      	mov	r2, r4
 8005e72:	462b      	mov	r3, r5
 8005e74:	f7fa fbc0 	bl	80005f8 <__aeabi_dmul>
 8005e78:	a37f      	add	r3, pc, #508	; (adr r3, 8006078 <__ieee754_asin+0x310>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fa03 	bl	8000288 <__aeabi_dsub>
 8005e82:	4622      	mov	r2, r4
 8005e84:	462b      	mov	r3, r5
 8005e86:	f7fa fbb7 	bl	80005f8 <__aeabi_dmul>
 8005e8a:	a37d      	add	r3, pc, #500	; (adr r3, 8006080 <__ieee754_asin+0x318>)
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f7fa f9fc 	bl	800028c <__adddf3>
 8005e94:	4622      	mov	r2, r4
 8005e96:	462b      	mov	r3, r5
 8005e98:	f7fa fbae 	bl	80005f8 <__aeabi_dmul>
 8005e9c:	a37a      	add	r3, pc, #488	; (adr r3, 8006088 <__ieee754_asin+0x320>)
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	ec41 0b18 	vmov	d8, r0, r1
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	f7fa fba5 	bl	80005f8 <__aeabi_dmul>
 8005eae:	a378      	add	r3, pc, #480	; (adr r3, 8006090 <__ieee754_asin+0x328>)
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f7fa f9e8 	bl	8000288 <__aeabi_dsub>
 8005eb8:	4622      	mov	r2, r4
 8005eba:	462b      	mov	r3, r5
 8005ebc:	f7fa fb9c 	bl	80005f8 <__aeabi_dmul>
 8005ec0:	a375      	add	r3, pc, #468	; (adr r3, 8006098 <__ieee754_asin+0x330>)
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	f7fa f9e1 	bl	800028c <__adddf3>
 8005eca:	4622      	mov	r2, r4
 8005ecc:	462b      	mov	r3, r5
 8005ece:	f7fa fb93 	bl	80005f8 <__aeabi_dmul>
 8005ed2:	a373      	add	r3, pc, #460	; (adr r3, 80060a0 <__ieee754_asin+0x338>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f7fa f9d6 	bl	8000288 <__aeabi_dsub>
 8005edc:	4622      	mov	r2, r4
 8005ede:	462b      	mov	r3, r5
 8005ee0:	f7fa fb8a 	bl	80005f8 <__aeabi_dmul>
 8005ee4:	4b72      	ldr	r3, [pc, #456]	; (80060b0 <__ieee754_asin+0x348>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f7fa f9d0 	bl	800028c <__adddf3>
 8005eec:	ec45 4b10 	vmov	d0, r4, r5
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	460f      	mov	r7, r1
 8005ef4:	f000 fb56 	bl	80065a4 <__ieee754_sqrt>
 8005ef8:	4b6f      	ldr	r3, [pc, #444]	; (80060b8 <__ieee754_asin+0x350>)
 8005efa:	4598      	cmp	r8, r3
 8005efc:	ec5b ab10 	vmov	sl, fp, d0
 8005f00:	f340 80dc 	ble.w	80060bc <__ieee754_asin+0x354>
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	ec51 0b18 	vmov	r0, r1, d8
 8005f0c:	f7fa fc9e 	bl	800084c <__aeabi_ddiv>
 8005f10:	4652      	mov	r2, sl
 8005f12:	465b      	mov	r3, fp
 8005f14:	f7fa fb70 	bl	80005f8 <__aeabi_dmul>
 8005f18:	4652      	mov	r2, sl
 8005f1a:	465b      	mov	r3, fp
 8005f1c:	f7fa f9b6 	bl	800028c <__adddf3>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	f7fa f9b2 	bl	800028c <__adddf3>
 8005f28:	a347      	add	r3, pc, #284	; (adr r3, 8006048 <__ieee754_asin+0x2e0>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7fa f9ab 	bl	8000288 <__aeabi_dsub>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	a142      	add	r1, pc, #264	; (adr r1, 8006040 <__ieee754_asin+0x2d8>)
 8005f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f3c:	f7fa f9a4 	bl	8000288 <__aeabi_dsub>
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bfdc      	itt	le
 8005f46:	4602      	movle	r2, r0
 8005f48:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	bfdc      	itt	le
 8005f52:	4614      	movle	r4, r2
 8005f54:	461d      	movle	r5, r3
 8005f56:	e743      	b.n	8005de0 <__ieee754_asin+0x78>
 8005f58:	ee10 2a10 	vmov	r2, s0
 8005f5c:	ee10 0a10 	vmov	r0, s0
 8005f60:	462b      	mov	r3, r5
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa fb48 	bl	80005f8 <__aeabi_dmul>
 8005f68:	a33b      	add	r3, pc, #236	; (adr r3, 8006058 <__ieee754_asin+0x2f0>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460f      	mov	r7, r1
 8005f72:	f7fa fb41 	bl	80005f8 <__aeabi_dmul>
 8005f76:	a33a      	add	r3, pc, #232	; (adr r3, 8006060 <__ieee754_asin+0x2f8>)
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f7fa f986 	bl	800028c <__adddf3>
 8005f80:	4632      	mov	r2, r6
 8005f82:	463b      	mov	r3, r7
 8005f84:	f7fa fb38 	bl	80005f8 <__aeabi_dmul>
 8005f88:	a337      	add	r3, pc, #220	; (adr r3, 8006068 <__ieee754_asin+0x300>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f7fa f97b 	bl	8000288 <__aeabi_dsub>
 8005f92:	4632      	mov	r2, r6
 8005f94:	463b      	mov	r3, r7
 8005f96:	f7fa fb2f 	bl	80005f8 <__aeabi_dmul>
 8005f9a:	a335      	add	r3, pc, #212	; (adr r3, 8006070 <__ieee754_asin+0x308>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f7fa f974 	bl	800028c <__adddf3>
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	f7fa fb26 	bl	80005f8 <__aeabi_dmul>
 8005fac:	a332      	add	r3, pc, #200	; (adr r3, 8006078 <__ieee754_asin+0x310>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa f969 	bl	8000288 <__aeabi_dsub>
 8005fb6:	4632      	mov	r2, r6
 8005fb8:	463b      	mov	r3, r7
 8005fba:	f7fa fb1d 	bl	80005f8 <__aeabi_dmul>
 8005fbe:	a330      	add	r3, pc, #192	; (adr r3, 8006080 <__ieee754_asin+0x318>)
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f7fa f962 	bl	800028c <__adddf3>
 8005fc8:	4632      	mov	r2, r6
 8005fca:	463b      	mov	r3, r7
 8005fcc:	f7fa fb14 	bl	80005f8 <__aeabi_dmul>
 8005fd0:	a32d      	add	r3, pc, #180	; (adr r3, 8006088 <__ieee754_asin+0x320>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	4689      	mov	r9, r1
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	f7fa fb0b 	bl	80005f8 <__aeabi_dmul>
 8005fe2:	a32b      	add	r3, pc, #172	; (adr r3, 8006090 <__ieee754_asin+0x328>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f7fa f94e 	bl	8000288 <__aeabi_dsub>
 8005fec:	4632      	mov	r2, r6
 8005fee:	463b      	mov	r3, r7
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	a328      	add	r3, pc, #160	; (adr r3, 8006098 <__ieee754_asin+0x330>)
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa f947 	bl	800028c <__adddf3>
 8005ffe:	4632      	mov	r2, r6
 8006000:	463b      	mov	r3, r7
 8006002:	f7fa faf9 	bl	80005f8 <__aeabi_dmul>
 8006006:	a326      	add	r3, pc, #152	; (adr r3, 80060a0 <__ieee754_asin+0x338>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f7fa f93c 	bl	8000288 <__aeabi_dsub>
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	f7fa faf0 	bl	80005f8 <__aeabi_dmul>
 8006018:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <__ieee754_asin+0x348>)
 800601a:	2200      	movs	r2, #0
 800601c:	f7fa f936 	bl	800028c <__adddf3>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4640      	mov	r0, r8
 8006026:	4649      	mov	r1, r9
 8006028:	f7fa fc10 	bl	800084c <__aeabi_ddiv>
 800602c:	4622      	mov	r2, r4
 800602e:	462b      	mov	r3, r5
 8006030:	f7fa fae2 	bl	80005f8 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4620      	mov	r0, r4
 800603a:	4629      	mov	r1, r5
 800603c:	e6bf      	b.n	8005dbe <__ieee754_asin+0x56>
 800603e:	bf00      	nop
 8006040:	54442d18 	.word	0x54442d18
 8006044:	3ff921fb 	.word	0x3ff921fb
 8006048:	33145c07 	.word	0x33145c07
 800604c:	3c91a626 	.word	0x3c91a626
 8006050:	8800759c 	.word	0x8800759c
 8006054:	7e37e43c 	.word	0x7e37e43c
 8006058:	0dfdf709 	.word	0x0dfdf709
 800605c:	3f023de1 	.word	0x3f023de1
 8006060:	7501b288 	.word	0x7501b288
 8006064:	3f49efe0 	.word	0x3f49efe0
 8006068:	b5688f3b 	.word	0xb5688f3b
 800606c:	3fa48228 	.word	0x3fa48228
 8006070:	0e884455 	.word	0x0e884455
 8006074:	3fc9c155 	.word	0x3fc9c155
 8006078:	03eb6f7d 	.word	0x03eb6f7d
 800607c:	3fd4d612 	.word	0x3fd4d612
 8006080:	55555555 	.word	0x55555555
 8006084:	3fc55555 	.word	0x3fc55555
 8006088:	b12e9282 	.word	0xb12e9282
 800608c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006090:	1b8d0159 	.word	0x1b8d0159
 8006094:	3fe6066c 	.word	0x3fe6066c
 8006098:	9c598ac8 	.word	0x9c598ac8
 800609c:	40002ae5 	.word	0x40002ae5
 80060a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80060a4:	40033a27 	.word	0x40033a27
 80060a8:	3fefffff 	.word	0x3fefffff
 80060ac:	3fdfffff 	.word	0x3fdfffff
 80060b0:	3ff00000 	.word	0x3ff00000
 80060b4:	3fe00000 	.word	0x3fe00000
 80060b8:	3fef3332 	.word	0x3fef3332
 80060bc:	ee10 2a10 	vmov	r2, s0
 80060c0:	ee10 0a10 	vmov	r0, s0
 80060c4:	465b      	mov	r3, fp
 80060c6:	4659      	mov	r1, fp
 80060c8:	f7fa f8e0 	bl	800028c <__adddf3>
 80060cc:	4632      	mov	r2, r6
 80060ce:	463b      	mov	r3, r7
 80060d0:	ec41 0b19 	vmov	d9, r0, r1
 80060d4:	ec51 0b18 	vmov	r0, r1, d8
 80060d8:	f7fa fbb8 	bl	800084c <__aeabi_ddiv>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	ec51 0b19 	vmov	r0, r1, d9
 80060e4:	f7fa fa88 	bl	80005f8 <__aeabi_dmul>
 80060e8:	f04f 0800 	mov.w	r8, #0
 80060ec:	4606      	mov	r6, r0
 80060ee:	460f      	mov	r7, r1
 80060f0:	4642      	mov	r2, r8
 80060f2:	465b      	mov	r3, fp
 80060f4:	4640      	mov	r0, r8
 80060f6:	4659      	mov	r1, fp
 80060f8:	f7fa fa7e 	bl	80005f8 <__aeabi_dmul>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa f8c0 	bl	8000288 <__aeabi_dsub>
 8006108:	4642      	mov	r2, r8
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
 800610e:	465b      	mov	r3, fp
 8006110:	4650      	mov	r0, sl
 8006112:	4659      	mov	r1, fp
 8006114:	f7fa f8ba 	bl	800028c <__adddf3>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4620      	mov	r0, r4
 800611e:	4629      	mov	r1, r5
 8006120:	f7fa fb94 	bl	800084c <__aeabi_ddiv>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	f7fa f8b0 	bl	800028c <__adddf3>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	a113      	add	r1, pc, #76	; (adr r1, 8006180 <__ieee754_asin+0x418>)
 8006132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006136:	f7fa f8a7 	bl	8000288 <__aeabi_dsub>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa f8a1 	bl	8000288 <__aeabi_dsub>
 8006146:	4642      	mov	r2, r8
 8006148:	4604      	mov	r4, r0
 800614a:	460d      	mov	r5, r1
 800614c:	465b      	mov	r3, fp
 800614e:	4640      	mov	r0, r8
 8006150:	4659      	mov	r1, fp
 8006152:	f7fa f89b 	bl	800028c <__adddf3>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	a10b      	add	r1, pc, #44	; (adr r1, 8006188 <__ieee754_asin+0x420>)
 800615c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006160:	f7fa f892 	bl	8000288 <__aeabi_dsub>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4620      	mov	r0, r4
 800616a:	4629      	mov	r1, r5
 800616c:	f7fa f88c 	bl	8000288 <__aeabi_dsub>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	a104      	add	r1, pc, #16	; (adr r1, 8006188 <__ieee754_asin+0x420>)
 8006176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800617a:	e6df      	b.n	8005f3c <__ieee754_asin+0x1d4>
 800617c:	f3af 8000 	nop.w
 8006180:	33145c07 	.word	0x33145c07
 8006184:	3c91a626 	.word	0x3c91a626
 8006188:	54442d18 	.word	0x54442d18
 800618c:	3fe921fb 	.word	0x3fe921fb

08006190 <__ieee754_rem_pio2>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	ed2d 8b02 	vpush	{d8}
 8006198:	ec55 4b10 	vmov	r4, r5, d0
 800619c:	4bca      	ldr	r3, [pc, #808]	; (80064c8 <__ieee754_rem_pio2+0x338>)
 800619e:	b08b      	sub	sp, #44	; 0x2c
 80061a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80061a4:	4598      	cmp	r8, r3
 80061a6:	4682      	mov	sl, r0
 80061a8:	9502      	str	r5, [sp, #8]
 80061aa:	dc08      	bgt.n	80061be <__ieee754_rem_pio2+0x2e>
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	ed80 0b00 	vstr	d0, [r0]
 80061b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80061b8:	f04f 0b00 	mov.w	fp, #0
 80061bc:	e028      	b.n	8006210 <__ieee754_rem_pio2+0x80>
 80061be:	4bc3      	ldr	r3, [pc, #780]	; (80064cc <__ieee754_rem_pio2+0x33c>)
 80061c0:	4598      	cmp	r8, r3
 80061c2:	dc78      	bgt.n	80062b6 <__ieee754_rem_pio2+0x126>
 80061c4:	9b02      	ldr	r3, [sp, #8]
 80061c6:	4ec2      	ldr	r6, [pc, #776]	; (80064d0 <__ieee754_rem_pio2+0x340>)
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	ee10 0a10 	vmov	r0, s0
 80061ce:	a3b0      	add	r3, pc, #704	; (adr r3, 8006490 <__ieee754_rem_pio2+0x300>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	4629      	mov	r1, r5
 80061d6:	dd39      	ble.n	800624c <__ieee754_rem_pio2+0xbc>
 80061d8:	f7fa f856 	bl	8000288 <__aeabi_dsub>
 80061dc:	45b0      	cmp	r8, r6
 80061de:	4604      	mov	r4, r0
 80061e0:	460d      	mov	r5, r1
 80061e2:	d01b      	beq.n	800621c <__ieee754_rem_pio2+0x8c>
 80061e4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006498 <__ieee754_rem_pio2+0x308>)
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f7fa f84d 	bl	8000288 <__aeabi_dsub>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	e9ca 2300 	strd	r2, r3, [sl]
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa f845 	bl	8000288 <__aeabi_dsub>
 80061fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8006498 <__ieee754_rem_pio2+0x308>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f7fa f840 	bl	8000288 <__aeabi_dsub>
 8006208:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800620c:	f04f 0b01 	mov.w	fp, #1
 8006210:	4658      	mov	r0, fp
 8006212:	b00b      	add	sp, #44	; 0x2c
 8006214:	ecbd 8b02 	vpop	{d8}
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621c:	a3a0      	add	r3, pc, #640	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x310>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7fa f831 	bl	8000288 <__aeabi_dsub>
 8006226:	a3a0      	add	r3, pc, #640	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x318>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	4604      	mov	r4, r0
 800622e:	460d      	mov	r5, r1
 8006230:	f7fa f82a 	bl	8000288 <__aeabi_dsub>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	e9ca 2300 	strd	r2, r3, [sl]
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f7fa f822 	bl	8000288 <__aeabi_dsub>
 8006244:	a398      	add	r3, pc, #608	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x318>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	e7db      	b.n	8006204 <__ieee754_rem_pio2+0x74>
 800624c:	f7fa f81e 	bl	800028c <__adddf3>
 8006250:	45b0      	cmp	r8, r6
 8006252:	4604      	mov	r4, r0
 8006254:	460d      	mov	r5, r1
 8006256:	d016      	beq.n	8006286 <__ieee754_rem_pio2+0xf6>
 8006258:	a38f      	add	r3, pc, #572	; (adr r3, 8006498 <__ieee754_rem_pio2+0x308>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7fa f815 	bl	800028c <__adddf3>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	e9ca 2300 	strd	r2, r3, [sl]
 800626a:	4620      	mov	r0, r4
 800626c:	4629      	mov	r1, r5
 800626e:	f7fa f80b 	bl	8000288 <__aeabi_dsub>
 8006272:	a389      	add	r3, pc, #548	; (adr r3, 8006498 <__ieee754_rem_pio2+0x308>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fa f808 	bl	800028c <__adddf3>
 800627c:	f04f 3bff 	mov.w	fp, #4294967295
 8006280:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006284:	e7c4      	b.n	8006210 <__ieee754_rem_pio2+0x80>
 8006286:	a386      	add	r3, pc, #536	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x310>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f7f9 fffe 	bl	800028c <__adddf3>
 8006290:	a385      	add	r3, pc, #532	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x318>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	4604      	mov	r4, r0
 8006298:	460d      	mov	r5, r1
 800629a:	f7f9 fff7 	bl	800028c <__adddf3>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	e9ca 2300 	strd	r2, r3, [sl]
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7f9 ffed 	bl	8000288 <__aeabi_dsub>
 80062ae:	a37e      	add	r3, pc, #504	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x318>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	e7e0      	b.n	8006278 <__ieee754_rem_pio2+0xe8>
 80062b6:	4b87      	ldr	r3, [pc, #540]	; (80064d4 <__ieee754_rem_pio2+0x344>)
 80062b8:	4598      	cmp	r8, r3
 80062ba:	f300 80d9 	bgt.w	8006470 <__ieee754_rem_pio2+0x2e0>
 80062be:	f000 feed 	bl	800709c <fabs>
 80062c2:	ec55 4b10 	vmov	r4, r5, d0
 80062c6:	ee10 0a10 	vmov	r0, s0
 80062ca:	a379      	add	r3, pc, #484	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x320>)
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa f991 	bl	80005f8 <__aeabi_dmul>
 80062d6:	4b80      	ldr	r3, [pc, #512]	; (80064d8 <__ieee754_rem_pio2+0x348>)
 80062d8:	2200      	movs	r2, #0
 80062da:	f7f9 ffd7 	bl	800028c <__adddf3>
 80062de:	f7fa fc3b 	bl	8000b58 <__aeabi_d2iz>
 80062e2:	4683      	mov	fp, r0
 80062e4:	f7fa f91e 	bl	8000524 <__aeabi_i2d>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	ec43 2b18 	vmov	d8, r2, r3
 80062f0:	a367      	add	r3, pc, #412	; (adr r3, 8006490 <__ieee754_rem_pio2+0x300>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7fa f97f 	bl	80005f8 <__aeabi_dmul>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7f9 ffc1 	bl	8000288 <__aeabi_dsub>
 8006306:	a364      	add	r3, pc, #400	; (adr r3, 8006498 <__ieee754_rem_pio2+0x308>)
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	4606      	mov	r6, r0
 800630e:	460f      	mov	r7, r1
 8006310:	ec51 0b18 	vmov	r0, r1, d8
 8006314:	f7fa f970 	bl	80005f8 <__aeabi_dmul>
 8006318:	f1bb 0f1f 	cmp.w	fp, #31
 800631c:	4604      	mov	r4, r0
 800631e:	460d      	mov	r5, r1
 8006320:	dc0d      	bgt.n	800633e <__ieee754_rem_pio2+0x1ae>
 8006322:	4b6e      	ldr	r3, [pc, #440]	; (80064dc <__ieee754_rem_pio2+0x34c>)
 8006324:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632c:	4543      	cmp	r3, r8
 800632e:	d006      	beq.n	800633e <__ieee754_rem_pio2+0x1ae>
 8006330:	4622      	mov	r2, r4
 8006332:	462b      	mov	r3, r5
 8006334:	4630      	mov	r0, r6
 8006336:	4639      	mov	r1, r7
 8006338:	f7f9 ffa6 	bl	8000288 <__aeabi_dsub>
 800633c:	e00f      	b.n	800635e <__ieee754_rem_pio2+0x1ce>
 800633e:	462b      	mov	r3, r5
 8006340:	4622      	mov	r2, r4
 8006342:	4630      	mov	r0, r6
 8006344:	4639      	mov	r1, r7
 8006346:	f7f9 ff9f 	bl	8000288 <__aeabi_dsub>
 800634a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006354:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006358:	f1b8 0f10 	cmp.w	r8, #16
 800635c:	dc02      	bgt.n	8006364 <__ieee754_rem_pio2+0x1d4>
 800635e:	e9ca 0100 	strd	r0, r1, [sl]
 8006362:	e039      	b.n	80063d8 <__ieee754_rem_pio2+0x248>
 8006364:	a34e      	add	r3, pc, #312	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x310>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	ec51 0b18 	vmov	r0, r1, d8
 800636e:	f7fa f943 	bl	80005f8 <__aeabi_dmul>
 8006372:	4604      	mov	r4, r0
 8006374:	460d      	mov	r5, r1
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4630      	mov	r0, r6
 800637c:	4639      	mov	r1, r7
 800637e:	f7f9 ff83 	bl	8000288 <__aeabi_dsub>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4680      	mov	r8, r0
 8006388:	4689      	mov	r9, r1
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	f7f9 ff7b 	bl	8000288 <__aeabi_dsub>
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	f7f9 ff77 	bl	8000288 <__aeabi_dsub>
 800639a:	a343      	add	r3, pc, #268	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x318>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	4604      	mov	r4, r0
 80063a2:	460d      	mov	r5, r1
 80063a4:	ec51 0b18 	vmov	r0, r1, d8
 80063a8:	f7fa f926 	bl	80005f8 <__aeabi_dmul>
 80063ac:	4622      	mov	r2, r4
 80063ae:	462b      	mov	r3, r5
 80063b0:	f7f9 ff6a 	bl	8000288 <__aeabi_dsub>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	4640      	mov	r0, r8
 80063be:	4649      	mov	r1, r9
 80063c0:	f7f9 ff62 	bl	8000288 <__aeabi_dsub>
 80063c4:	9a03      	ldr	r2, [sp, #12]
 80063c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b31      	cmp	r3, #49	; 0x31
 80063ce:	dc24      	bgt.n	800641a <__ieee754_rem_pio2+0x28a>
 80063d0:	e9ca 0100 	strd	r0, r1, [sl]
 80063d4:	4646      	mov	r6, r8
 80063d6:	464f      	mov	r7, r9
 80063d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80063dc:	4630      	mov	r0, r6
 80063de:	4642      	mov	r2, r8
 80063e0:	464b      	mov	r3, r9
 80063e2:	4639      	mov	r1, r7
 80063e4:	f7f9 ff50 	bl	8000288 <__aeabi_dsub>
 80063e8:	462b      	mov	r3, r5
 80063ea:	4622      	mov	r2, r4
 80063ec:	f7f9 ff4c 	bl	8000288 <__aeabi_dsub>
 80063f0:	9b02      	ldr	r3, [sp, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80063f8:	f6bf af0a 	bge.w	8006210 <__ieee754_rem_pio2+0x80>
 80063fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006400:	f8ca 3004 	str.w	r3, [sl, #4]
 8006404:	f8ca 8000 	str.w	r8, [sl]
 8006408:	f8ca 0008 	str.w	r0, [sl, #8]
 800640c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006410:	f8ca 300c 	str.w	r3, [sl, #12]
 8006414:	f1cb 0b00 	rsb	fp, fp, #0
 8006418:	e6fa      	b.n	8006210 <__ieee754_rem_pio2+0x80>
 800641a:	a327      	add	r3, pc, #156	; (adr r3, 80064b8 <__ieee754_rem_pio2+0x328>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	ec51 0b18 	vmov	r0, r1, d8
 8006424:	f7fa f8e8 	bl	80005f8 <__aeabi_dmul>
 8006428:	4604      	mov	r4, r0
 800642a:	460d      	mov	r5, r1
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7f9 ff28 	bl	8000288 <__aeabi_dsub>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4606      	mov	r6, r0
 800643e:	460f      	mov	r7, r1
 8006440:	4640      	mov	r0, r8
 8006442:	4649      	mov	r1, r9
 8006444:	f7f9 ff20 	bl	8000288 <__aeabi_dsub>
 8006448:	4622      	mov	r2, r4
 800644a:	462b      	mov	r3, r5
 800644c:	f7f9 ff1c 	bl	8000288 <__aeabi_dsub>
 8006450:	a31b      	add	r3, pc, #108	; (adr r3, 80064c0 <__ieee754_rem_pio2+0x330>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	4604      	mov	r4, r0
 8006458:	460d      	mov	r5, r1
 800645a:	ec51 0b18 	vmov	r0, r1, d8
 800645e:	f7fa f8cb 	bl	80005f8 <__aeabi_dmul>
 8006462:	4622      	mov	r2, r4
 8006464:	462b      	mov	r3, r5
 8006466:	f7f9 ff0f 	bl	8000288 <__aeabi_dsub>
 800646a:	4604      	mov	r4, r0
 800646c:	460d      	mov	r5, r1
 800646e:	e75f      	b.n	8006330 <__ieee754_rem_pio2+0x1a0>
 8006470:	4b1b      	ldr	r3, [pc, #108]	; (80064e0 <__ieee754_rem_pio2+0x350>)
 8006472:	4598      	cmp	r8, r3
 8006474:	dd36      	ble.n	80064e4 <__ieee754_rem_pio2+0x354>
 8006476:	ee10 2a10 	vmov	r2, s0
 800647a:	462b      	mov	r3, r5
 800647c:	4620      	mov	r0, r4
 800647e:	4629      	mov	r1, r5
 8006480:	f7f9 ff02 	bl	8000288 <__aeabi_dsub>
 8006484:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006488:	e9ca 0100 	strd	r0, r1, [sl]
 800648c:	e694      	b.n	80061b8 <__ieee754_rem_pio2+0x28>
 800648e:	bf00      	nop
 8006490:	54400000 	.word	0x54400000
 8006494:	3ff921fb 	.word	0x3ff921fb
 8006498:	1a626331 	.word	0x1a626331
 800649c:	3dd0b461 	.word	0x3dd0b461
 80064a0:	1a600000 	.word	0x1a600000
 80064a4:	3dd0b461 	.word	0x3dd0b461
 80064a8:	2e037073 	.word	0x2e037073
 80064ac:	3ba3198a 	.word	0x3ba3198a
 80064b0:	6dc9c883 	.word	0x6dc9c883
 80064b4:	3fe45f30 	.word	0x3fe45f30
 80064b8:	2e000000 	.word	0x2e000000
 80064bc:	3ba3198a 	.word	0x3ba3198a
 80064c0:	252049c1 	.word	0x252049c1
 80064c4:	397b839a 	.word	0x397b839a
 80064c8:	3fe921fb 	.word	0x3fe921fb
 80064cc:	4002d97b 	.word	0x4002d97b
 80064d0:	3ff921fb 	.word	0x3ff921fb
 80064d4:	413921fb 	.word	0x413921fb
 80064d8:	3fe00000 	.word	0x3fe00000
 80064dc:	0800a148 	.word	0x0800a148
 80064e0:	7fefffff 	.word	0x7fefffff
 80064e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80064e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80064ec:	ee10 0a10 	vmov	r0, s0
 80064f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80064f4:	ee10 6a10 	vmov	r6, s0
 80064f8:	460f      	mov	r7, r1
 80064fa:	f7fa fb2d 	bl	8000b58 <__aeabi_d2iz>
 80064fe:	f7fa f811 	bl	8000524 <__aeabi_i2d>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4630      	mov	r0, r6
 8006508:	4639      	mov	r1, r7
 800650a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800650e:	f7f9 febb 	bl	8000288 <__aeabi_dsub>
 8006512:	4b22      	ldr	r3, [pc, #136]	; (800659c <__ieee754_rem_pio2+0x40c>)
 8006514:	2200      	movs	r2, #0
 8006516:	f7fa f86f 	bl	80005f8 <__aeabi_dmul>
 800651a:	460f      	mov	r7, r1
 800651c:	4606      	mov	r6, r0
 800651e:	f7fa fb1b 	bl	8000b58 <__aeabi_d2iz>
 8006522:	f7f9 ffff 	bl	8000524 <__aeabi_i2d>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4630      	mov	r0, r6
 800652c:	4639      	mov	r1, r7
 800652e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006532:	f7f9 fea9 	bl	8000288 <__aeabi_dsub>
 8006536:	4b19      	ldr	r3, [pc, #100]	; (800659c <__ieee754_rem_pio2+0x40c>)
 8006538:	2200      	movs	r2, #0
 800653a:	f7fa f85d 	bl	80005f8 <__aeabi_dmul>
 800653e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006542:	ad04      	add	r5, sp, #16
 8006544:	f04f 0803 	mov.w	r8, #3
 8006548:	46a9      	mov	r9, r5
 800654a:	2600      	movs	r6, #0
 800654c:	2700      	movs	r7, #0
 800654e:	4632      	mov	r2, r6
 8006550:	463b      	mov	r3, r7
 8006552:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006556:	46c3      	mov	fp, r8
 8006558:	3d08      	subs	r5, #8
 800655a:	f108 38ff 	add.w	r8, r8, #4294967295
 800655e:	f7fa fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006562:	2800      	cmp	r0, #0
 8006564:	d1f3      	bne.n	800654e <__ieee754_rem_pio2+0x3be>
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <__ieee754_rem_pio2+0x410>)
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2302      	movs	r3, #2
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	4622      	mov	r2, r4
 8006570:	465b      	mov	r3, fp
 8006572:	4651      	mov	r1, sl
 8006574:	4648      	mov	r0, r9
 8006576:	f000 f993 	bl	80068a0 <__kernel_rem_pio2>
 800657a:	9b02      	ldr	r3, [sp, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	4683      	mov	fp, r0
 8006580:	f6bf ae46 	bge.w	8006210 <__ieee754_rem_pio2+0x80>
 8006584:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006588:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800658c:	f8ca 3004 	str.w	r3, [sl, #4]
 8006590:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006594:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006598:	e73a      	b.n	8006410 <__ieee754_rem_pio2+0x280>
 800659a:	bf00      	nop
 800659c:	41700000 	.word	0x41700000
 80065a0:	0800a1c8 	.word	0x0800a1c8

080065a4 <__ieee754_sqrt>:
 80065a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a8:	ec55 4b10 	vmov	r4, r5, d0
 80065ac:	4e56      	ldr	r6, [pc, #344]	; (8006708 <__ieee754_sqrt+0x164>)
 80065ae:	43ae      	bics	r6, r5
 80065b0:	ee10 0a10 	vmov	r0, s0
 80065b4:	ee10 3a10 	vmov	r3, s0
 80065b8:	4629      	mov	r1, r5
 80065ba:	462a      	mov	r2, r5
 80065bc:	d110      	bne.n	80065e0 <__ieee754_sqrt+0x3c>
 80065be:	ee10 2a10 	vmov	r2, s0
 80065c2:	462b      	mov	r3, r5
 80065c4:	f7fa f818 	bl	80005f8 <__aeabi_dmul>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7f9 fe5c 	bl	800028c <__adddf3>
 80065d4:	4604      	mov	r4, r0
 80065d6:	460d      	mov	r5, r1
 80065d8:	ec45 4b10 	vmov	d0, r4, r5
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	dc10      	bgt.n	8006606 <__ieee754_sqrt+0x62>
 80065e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80065e8:	4330      	orrs	r0, r6
 80065ea:	d0f5      	beq.n	80065d8 <__ieee754_sqrt+0x34>
 80065ec:	b15d      	cbz	r5, 8006606 <__ieee754_sqrt+0x62>
 80065ee:	ee10 2a10 	vmov	r2, s0
 80065f2:	462b      	mov	r3, r5
 80065f4:	ee10 0a10 	vmov	r0, s0
 80065f8:	f7f9 fe46 	bl	8000288 <__aeabi_dsub>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	f7fa f924 	bl	800084c <__aeabi_ddiv>
 8006604:	e7e6      	b.n	80065d4 <__ieee754_sqrt+0x30>
 8006606:	1509      	asrs	r1, r1, #20
 8006608:	d076      	beq.n	80066f8 <__ieee754_sqrt+0x154>
 800660a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800660e:	07ce      	lsls	r6, r1, #31
 8006610:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006614:	bf5e      	ittt	pl
 8006616:	0fda      	lsrpl	r2, r3, #31
 8006618:	005b      	lslpl	r3, r3, #1
 800661a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800661e:	0fda      	lsrs	r2, r3, #31
 8006620:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006624:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006628:	2000      	movs	r0, #0
 800662a:	106d      	asrs	r5, r5, #1
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	f04f 0e16 	mov.w	lr, #22
 8006632:	4684      	mov	ip, r0
 8006634:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006638:	eb0c 0401 	add.w	r4, ip, r1
 800663c:	4294      	cmp	r4, r2
 800663e:	bfde      	ittt	le
 8006640:	1b12      	suble	r2, r2, r4
 8006642:	eb04 0c01 	addle.w	ip, r4, r1
 8006646:	1840      	addle	r0, r0, r1
 8006648:	0052      	lsls	r2, r2, #1
 800664a:	f1be 0e01 	subs.w	lr, lr, #1
 800664e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006652:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006656:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800665a:	d1ed      	bne.n	8006638 <__ieee754_sqrt+0x94>
 800665c:	4671      	mov	r1, lr
 800665e:	2720      	movs	r7, #32
 8006660:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006664:	4562      	cmp	r2, ip
 8006666:	eb04 060e 	add.w	r6, r4, lr
 800666a:	dc02      	bgt.n	8006672 <__ieee754_sqrt+0xce>
 800666c:	d113      	bne.n	8006696 <__ieee754_sqrt+0xf2>
 800666e:	429e      	cmp	r6, r3
 8006670:	d811      	bhi.n	8006696 <__ieee754_sqrt+0xf2>
 8006672:	2e00      	cmp	r6, #0
 8006674:	eb06 0e04 	add.w	lr, r6, r4
 8006678:	da43      	bge.n	8006702 <__ieee754_sqrt+0x15e>
 800667a:	f1be 0f00 	cmp.w	lr, #0
 800667e:	db40      	blt.n	8006702 <__ieee754_sqrt+0x15e>
 8006680:	f10c 0801 	add.w	r8, ip, #1
 8006684:	eba2 020c 	sub.w	r2, r2, ip
 8006688:	429e      	cmp	r6, r3
 800668a:	bf88      	it	hi
 800668c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006690:	1b9b      	subs	r3, r3, r6
 8006692:	4421      	add	r1, r4
 8006694:	46c4      	mov	ip, r8
 8006696:	0052      	lsls	r2, r2, #1
 8006698:	3f01      	subs	r7, #1
 800669a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800669e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80066a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80066a6:	d1dd      	bne.n	8006664 <__ieee754_sqrt+0xc0>
 80066a8:	4313      	orrs	r3, r2
 80066aa:	d006      	beq.n	80066ba <__ieee754_sqrt+0x116>
 80066ac:	1c4c      	adds	r4, r1, #1
 80066ae:	bf13      	iteet	ne
 80066b0:	3101      	addne	r1, #1
 80066b2:	3001      	addeq	r0, #1
 80066b4:	4639      	moveq	r1, r7
 80066b6:	f021 0101 	bicne.w	r1, r1, #1
 80066ba:	1043      	asrs	r3, r0, #1
 80066bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80066c0:	0849      	lsrs	r1, r1, #1
 80066c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80066c6:	07c2      	lsls	r2, r0, #31
 80066c8:	bf48      	it	mi
 80066ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80066ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80066d2:	460c      	mov	r4, r1
 80066d4:	463d      	mov	r5, r7
 80066d6:	e77f      	b.n	80065d8 <__ieee754_sqrt+0x34>
 80066d8:	0ada      	lsrs	r2, r3, #11
 80066da:	3815      	subs	r0, #21
 80066dc:	055b      	lsls	r3, r3, #21
 80066de:	2a00      	cmp	r2, #0
 80066e0:	d0fa      	beq.n	80066d8 <__ieee754_sqrt+0x134>
 80066e2:	02d7      	lsls	r7, r2, #11
 80066e4:	d50a      	bpl.n	80066fc <__ieee754_sqrt+0x158>
 80066e6:	f1c1 0420 	rsb	r4, r1, #32
 80066ea:	fa23 f404 	lsr.w	r4, r3, r4
 80066ee:	1e4d      	subs	r5, r1, #1
 80066f0:	408b      	lsls	r3, r1
 80066f2:	4322      	orrs	r2, r4
 80066f4:	1b41      	subs	r1, r0, r5
 80066f6:	e788      	b.n	800660a <__ieee754_sqrt+0x66>
 80066f8:	4608      	mov	r0, r1
 80066fa:	e7f0      	b.n	80066de <__ieee754_sqrt+0x13a>
 80066fc:	0052      	lsls	r2, r2, #1
 80066fe:	3101      	adds	r1, #1
 8006700:	e7ef      	b.n	80066e2 <__ieee754_sqrt+0x13e>
 8006702:	46e0      	mov	r8, ip
 8006704:	e7be      	b.n	8006684 <__ieee754_sqrt+0xe0>
 8006706:	bf00      	nop
 8006708:	7ff00000 	.word	0x7ff00000
 800670c:	00000000 	.word	0x00000000

08006710 <__kernel_cos>:
 8006710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	ec57 6b10 	vmov	r6, r7, d0
 8006718:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800671c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006720:	ed8d 1b00 	vstr	d1, [sp]
 8006724:	da07      	bge.n	8006736 <__kernel_cos+0x26>
 8006726:	ee10 0a10 	vmov	r0, s0
 800672a:	4639      	mov	r1, r7
 800672c:	f7fa fa14 	bl	8000b58 <__aeabi_d2iz>
 8006730:	2800      	cmp	r0, #0
 8006732:	f000 8088 	beq.w	8006846 <__kernel_cos+0x136>
 8006736:	4632      	mov	r2, r6
 8006738:	463b      	mov	r3, r7
 800673a:	4630      	mov	r0, r6
 800673c:	4639      	mov	r1, r7
 800673e:	f7f9 ff5b 	bl	80005f8 <__aeabi_dmul>
 8006742:	4b51      	ldr	r3, [pc, #324]	; (8006888 <__kernel_cos+0x178>)
 8006744:	2200      	movs	r2, #0
 8006746:	4604      	mov	r4, r0
 8006748:	460d      	mov	r5, r1
 800674a:	f7f9 ff55 	bl	80005f8 <__aeabi_dmul>
 800674e:	a340      	add	r3, pc, #256	; (adr r3, 8006850 <__kernel_cos+0x140>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	4682      	mov	sl, r0
 8006756:	468b      	mov	fp, r1
 8006758:	4620      	mov	r0, r4
 800675a:	4629      	mov	r1, r5
 800675c:	f7f9 ff4c 	bl	80005f8 <__aeabi_dmul>
 8006760:	a33d      	add	r3, pc, #244	; (adr r3, 8006858 <__kernel_cos+0x148>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd91 	bl	800028c <__adddf3>
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	f7f9 ff43 	bl	80005f8 <__aeabi_dmul>
 8006772:	a33b      	add	r3, pc, #236	; (adr r3, 8006860 <__kernel_cos+0x150>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 fd86 	bl	8000288 <__aeabi_dsub>
 800677c:	4622      	mov	r2, r4
 800677e:	462b      	mov	r3, r5
 8006780:	f7f9 ff3a 	bl	80005f8 <__aeabi_dmul>
 8006784:	a338      	add	r3, pc, #224	; (adr r3, 8006868 <__kernel_cos+0x158>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 fd7f 	bl	800028c <__adddf3>
 800678e:	4622      	mov	r2, r4
 8006790:	462b      	mov	r3, r5
 8006792:	f7f9 ff31 	bl	80005f8 <__aeabi_dmul>
 8006796:	a336      	add	r3, pc, #216	; (adr r3, 8006870 <__kernel_cos+0x160>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 fd74 	bl	8000288 <__aeabi_dsub>
 80067a0:	4622      	mov	r2, r4
 80067a2:	462b      	mov	r3, r5
 80067a4:	f7f9 ff28 	bl	80005f8 <__aeabi_dmul>
 80067a8:	a333      	add	r3, pc, #204	; (adr r3, 8006878 <__kernel_cos+0x168>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fd6d 	bl	800028c <__adddf3>
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f7f9 ff1f 	bl	80005f8 <__aeabi_dmul>
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	f7f9 ff1b 	bl	80005f8 <__aeabi_dmul>
 80067c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067c6:	4604      	mov	r4, r0
 80067c8:	460d      	mov	r5, r1
 80067ca:	4630      	mov	r0, r6
 80067cc:	4639      	mov	r1, r7
 80067ce:	f7f9 ff13 	bl	80005f8 <__aeabi_dmul>
 80067d2:	460b      	mov	r3, r1
 80067d4:	4602      	mov	r2, r0
 80067d6:	4629      	mov	r1, r5
 80067d8:	4620      	mov	r0, r4
 80067da:	f7f9 fd55 	bl	8000288 <__aeabi_dsub>
 80067de:	4b2b      	ldr	r3, [pc, #172]	; (800688c <__kernel_cos+0x17c>)
 80067e0:	4598      	cmp	r8, r3
 80067e2:	4606      	mov	r6, r0
 80067e4:	460f      	mov	r7, r1
 80067e6:	dc10      	bgt.n	800680a <__kernel_cos+0xfa>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4650      	mov	r0, sl
 80067ee:	4659      	mov	r1, fp
 80067f0:	f7f9 fd4a 	bl	8000288 <__aeabi_dsub>
 80067f4:	460b      	mov	r3, r1
 80067f6:	4926      	ldr	r1, [pc, #152]	; (8006890 <__kernel_cos+0x180>)
 80067f8:	4602      	mov	r2, r0
 80067fa:	2000      	movs	r0, #0
 80067fc:	f7f9 fd44 	bl	8000288 <__aeabi_dsub>
 8006800:	ec41 0b10 	vmov	d0, r0, r1
 8006804:	b003      	add	sp, #12
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	4b22      	ldr	r3, [pc, #136]	; (8006894 <__kernel_cos+0x184>)
 800680c:	4920      	ldr	r1, [pc, #128]	; (8006890 <__kernel_cos+0x180>)
 800680e:	4598      	cmp	r8, r3
 8006810:	bfcc      	ite	gt
 8006812:	4d21      	ldrgt	r5, [pc, #132]	; (8006898 <__kernel_cos+0x188>)
 8006814:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006818:	2400      	movs	r4, #0
 800681a:	4622      	mov	r2, r4
 800681c:	462b      	mov	r3, r5
 800681e:	2000      	movs	r0, #0
 8006820:	f7f9 fd32 	bl	8000288 <__aeabi_dsub>
 8006824:	4622      	mov	r2, r4
 8006826:	4680      	mov	r8, r0
 8006828:	4689      	mov	r9, r1
 800682a:	462b      	mov	r3, r5
 800682c:	4650      	mov	r0, sl
 800682e:	4659      	mov	r1, fp
 8006830:	f7f9 fd2a 	bl	8000288 <__aeabi_dsub>
 8006834:	4632      	mov	r2, r6
 8006836:	463b      	mov	r3, r7
 8006838:	f7f9 fd26 	bl	8000288 <__aeabi_dsub>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	e7da      	b.n	80067fc <__kernel_cos+0xec>
 8006846:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006880 <__kernel_cos+0x170>
 800684a:	e7db      	b.n	8006804 <__kernel_cos+0xf4>
 800684c:	f3af 8000 	nop.w
 8006850:	be8838d4 	.word	0xbe8838d4
 8006854:	bda8fae9 	.word	0xbda8fae9
 8006858:	bdb4b1c4 	.word	0xbdb4b1c4
 800685c:	3e21ee9e 	.word	0x3e21ee9e
 8006860:	809c52ad 	.word	0x809c52ad
 8006864:	3e927e4f 	.word	0x3e927e4f
 8006868:	19cb1590 	.word	0x19cb1590
 800686c:	3efa01a0 	.word	0x3efa01a0
 8006870:	16c15177 	.word	0x16c15177
 8006874:	3f56c16c 	.word	0x3f56c16c
 8006878:	5555554c 	.word	0x5555554c
 800687c:	3fa55555 	.word	0x3fa55555
 8006880:	00000000 	.word	0x00000000
 8006884:	3ff00000 	.word	0x3ff00000
 8006888:	3fe00000 	.word	0x3fe00000
 800688c:	3fd33332 	.word	0x3fd33332
 8006890:	3ff00000 	.word	0x3ff00000
 8006894:	3fe90000 	.word	0x3fe90000
 8006898:	3fd20000 	.word	0x3fd20000
 800689c:	00000000 	.word	0x00000000

080068a0 <__kernel_rem_pio2>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	ed2d 8b02 	vpush	{d8}
 80068a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80068ac:	f112 0f14 	cmn.w	r2, #20
 80068b0:	9308      	str	r3, [sp, #32]
 80068b2:	9101      	str	r1, [sp, #4]
 80068b4:	4bc6      	ldr	r3, [pc, #792]	; (8006bd0 <__kernel_rem_pio2+0x330>)
 80068b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80068b8:	9009      	str	r0, [sp, #36]	; 0x24
 80068ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	9b08      	ldr	r3, [sp, #32]
 80068c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068c6:	bfa8      	it	ge
 80068c8:	1ed4      	subge	r4, r2, #3
 80068ca:	9306      	str	r3, [sp, #24]
 80068cc:	bfb2      	itee	lt
 80068ce:	2400      	movlt	r4, #0
 80068d0:	2318      	movge	r3, #24
 80068d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80068d6:	f06f 0317 	mvn.w	r3, #23
 80068da:	fb04 3303 	mla	r3, r4, r3, r3
 80068de:	eb03 0a02 	add.w	sl, r3, r2
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	9a06      	ldr	r2, [sp, #24]
 80068e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006bc0 <__kernel_rem_pio2+0x320>
 80068ea:	eb03 0802 	add.w	r8, r3, r2
 80068ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80068f0:	1aa7      	subs	r7, r4, r2
 80068f2:	ae20      	add	r6, sp, #128	; 0x80
 80068f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80068f8:	2500      	movs	r5, #0
 80068fa:	4545      	cmp	r5, r8
 80068fc:	dd18      	ble.n	8006930 <__kernel_rem_pio2+0x90>
 80068fe:	9b08      	ldr	r3, [sp, #32]
 8006900:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006904:	aa20      	add	r2, sp, #128	; 0x80
 8006906:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006bc0 <__kernel_rem_pio2+0x320>
 800690a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800690e:	f1c3 0301 	rsb	r3, r3, #1
 8006912:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006916:	9307      	str	r3, [sp, #28]
 8006918:	9b07      	ldr	r3, [sp, #28]
 800691a:	9a04      	ldr	r2, [sp, #16]
 800691c:	4443      	add	r3, r8
 800691e:	429a      	cmp	r2, r3
 8006920:	db2f      	blt.n	8006982 <__kernel_rem_pio2+0xe2>
 8006922:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006926:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800692a:	462f      	mov	r7, r5
 800692c:	2600      	movs	r6, #0
 800692e:	e01b      	b.n	8006968 <__kernel_rem_pio2+0xc8>
 8006930:	42ef      	cmn	r7, r5
 8006932:	d407      	bmi.n	8006944 <__kernel_rem_pio2+0xa4>
 8006934:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006938:	f7f9 fdf4 	bl	8000524 <__aeabi_i2d>
 800693c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006940:	3501      	adds	r5, #1
 8006942:	e7da      	b.n	80068fa <__kernel_rem_pio2+0x5a>
 8006944:	ec51 0b18 	vmov	r0, r1, d8
 8006948:	e7f8      	b.n	800693c <__kernel_rem_pio2+0x9c>
 800694a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006952:	f7f9 fe51 	bl	80005f8 <__aeabi_dmul>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800695e:	f7f9 fc95 	bl	800028c <__adddf3>
 8006962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006966:	3601      	adds	r6, #1
 8006968:	9b06      	ldr	r3, [sp, #24]
 800696a:	429e      	cmp	r6, r3
 800696c:	f1a7 0708 	sub.w	r7, r7, #8
 8006970:	ddeb      	ble.n	800694a <__kernel_rem_pio2+0xaa>
 8006972:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006976:	3508      	adds	r5, #8
 8006978:	ecab 7b02 	vstmia	fp!, {d7}
 800697c:	f108 0801 	add.w	r8, r8, #1
 8006980:	e7ca      	b.n	8006918 <__kernel_rem_pio2+0x78>
 8006982:	9b04      	ldr	r3, [sp, #16]
 8006984:	aa0c      	add	r2, sp, #48	; 0x30
 8006986:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800698a:	930b      	str	r3, [sp, #44]	; 0x2c
 800698c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800698e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006992:	9c04      	ldr	r4, [sp, #16]
 8006994:	930a      	str	r3, [sp, #40]	; 0x28
 8006996:	ab98      	add	r3, sp, #608	; 0x260
 8006998:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800699c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80069a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80069a4:	f8cd b008 	str.w	fp, [sp, #8]
 80069a8:	4625      	mov	r5, r4
 80069aa:	2d00      	cmp	r5, #0
 80069ac:	dc78      	bgt.n	8006aa0 <__kernel_rem_pio2+0x200>
 80069ae:	ec47 6b10 	vmov	d0, r6, r7
 80069b2:	4650      	mov	r0, sl
 80069b4:	f000 fc04 	bl	80071c0 <scalbn>
 80069b8:	ec57 6b10 	vmov	r6, r7, d0
 80069bc:	2200      	movs	r2, #0
 80069be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80069c2:	ee10 0a10 	vmov	r0, s0
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fe16 	bl	80005f8 <__aeabi_dmul>
 80069cc:	ec41 0b10 	vmov	d0, r0, r1
 80069d0:	f000 fb6e 	bl	80070b0 <floor>
 80069d4:	4b7f      	ldr	r3, [pc, #508]	; (8006bd4 <__kernel_rem_pio2+0x334>)
 80069d6:	ec51 0b10 	vmov	r0, r1, d0
 80069da:	2200      	movs	r2, #0
 80069dc:	f7f9 fe0c 	bl	80005f8 <__aeabi_dmul>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	f7f9 fc4e 	bl	8000288 <__aeabi_dsub>
 80069ec:	460f      	mov	r7, r1
 80069ee:	4606      	mov	r6, r0
 80069f0:	f7fa f8b2 	bl	8000b58 <__aeabi_d2iz>
 80069f4:	9007      	str	r0, [sp, #28]
 80069f6:	f7f9 fd95 	bl	8000524 <__aeabi_i2d>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4630      	mov	r0, r6
 8006a00:	4639      	mov	r1, r7
 8006a02:	f7f9 fc41 	bl	8000288 <__aeabi_dsub>
 8006a06:	f1ba 0f00 	cmp.w	sl, #0
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	460f      	mov	r7, r1
 8006a0e:	dd70      	ble.n	8006af2 <__kernel_rem_pio2+0x252>
 8006a10:	1e62      	subs	r2, r4, #1
 8006a12:	ab0c      	add	r3, sp, #48	; 0x30
 8006a14:	9d07      	ldr	r5, [sp, #28]
 8006a16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006a1a:	f1ca 0118 	rsb	r1, sl, #24
 8006a1e:	fa40 f301 	asr.w	r3, r0, r1
 8006a22:	441d      	add	r5, r3
 8006a24:	408b      	lsls	r3, r1
 8006a26:	1ac0      	subs	r0, r0, r3
 8006a28:	ab0c      	add	r3, sp, #48	; 0x30
 8006a2a:	9507      	str	r5, [sp, #28]
 8006a2c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006a30:	f1ca 0317 	rsb	r3, sl, #23
 8006a34:	fa40 f303 	asr.w	r3, r0, r3
 8006a38:	9302      	str	r3, [sp, #8]
 8006a3a:	9b02      	ldr	r3, [sp, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dd66      	ble.n	8006b0e <__kernel_rem_pio2+0x26e>
 8006a40:	9b07      	ldr	r3, [sp, #28]
 8006a42:	2200      	movs	r2, #0
 8006a44:	3301      	adds	r3, #1
 8006a46:	9307      	str	r3, [sp, #28]
 8006a48:	4615      	mov	r5, r2
 8006a4a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006a4e:	4294      	cmp	r4, r2
 8006a50:	f300 8099 	bgt.w	8006b86 <__kernel_rem_pio2+0x2e6>
 8006a54:	f1ba 0f00 	cmp.w	sl, #0
 8006a58:	dd07      	ble.n	8006a6a <__kernel_rem_pio2+0x1ca>
 8006a5a:	f1ba 0f01 	cmp.w	sl, #1
 8006a5e:	f000 80a5 	beq.w	8006bac <__kernel_rem_pio2+0x30c>
 8006a62:	f1ba 0f02 	cmp.w	sl, #2
 8006a66:	f000 80c1 	beq.w	8006bec <__kernel_rem_pio2+0x34c>
 8006a6a:	9b02      	ldr	r3, [sp, #8]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d14e      	bne.n	8006b0e <__kernel_rem_pio2+0x26e>
 8006a70:	4632      	mov	r2, r6
 8006a72:	463b      	mov	r3, r7
 8006a74:	4958      	ldr	r1, [pc, #352]	; (8006bd8 <__kernel_rem_pio2+0x338>)
 8006a76:	2000      	movs	r0, #0
 8006a78:	f7f9 fc06 	bl	8000288 <__aeabi_dsub>
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	d044      	beq.n	8006b0e <__kernel_rem_pio2+0x26e>
 8006a84:	4650      	mov	r0, sl
 8006a86:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006bc8 <__kernel_rem_pio2+0x328>
 8006a8a:	f000 fb99 	bl	80071c0 <scalbn>
 8006a8e:	4630      	mov	r0, r6
 8006a90:	4639      	mov	r1, r7
 8006a92:	ec53 2b10 	vmov	r2, r3, d0
 8006a96:	f7f9 fbf7 	bl	8000288 <__aeabi_dsub>
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	e036      	b.n	8006b0e <__kernel_rem_pio2+0x26e>
 8006aa0:	4b4e      	ldr	r3, [pc, #312]	; (8006bdc <__kernel_rem_pio2+0x33c>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7f9 fda6 	bl	80005f8 <__aeabi_dmul>
 8006aac:	f7fa f854 	bl	8000b58 <__aeabi_d2iz>
 8006ab0:	f7f9 fd38 	bl	8000524 <__aeabi_i2d>
 8006ab4:	4b4a      	ldr	r3, [pc, #296]	; (8006be0 <__kernel_rem_pio2+0x340>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4689      	mov	r9, r1
 8006abc:	f7f9 fd9c 	bl	80005f8 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	f7f9 fbde 	bl	8000288 <__aeabi_dsub>
 8006acc:	f7fa f844 	bl	8000b58 <__aeabi_d2iz>
 8006ad0:	9b02      	ldr	r3, [sp, #8]
 8006ad2:	f843 0b04 	str.w	r0, [r3], #4
 8006ad6:	3d01      	subs	r5, #1
 8006ad8:	9302      	str	r3, [sp, #8]
 8006ada:	ab70      	add	r3, sp, #448	; 0x1c0
 8006adc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	f7f9 fbd0 	bl	800028c <__adddf3>
 8006aec:	4606      	mov	r6, r0
 8006aee:	460f      	mov	r7, r1
 8006af0:	e75b      	b.n	80069aa <__kernel_rem_pio2+0x10a>
 8006af2:	d105      	bne.n	8006b00 <__kernel_rem_pio2+0x260>
 8006af4:	1e63      	subs	r3, r4, #1
 8006af6:	aa0c      	add	r2, sp, #48	; 0x30
 8006af8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006afc:	15c3      	asrs	r3, r0, #23
 8006afe:	e79b      	b.n	8006a38 <__kernel_rem_pio2+0x198>
 8006b00:	4b38      	ldr	r3, [pc, #224]	; (8006be4 <__kernel_rem_pio2+0x344>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	f7f9 fffe 	bl	8000b04 <__aeabi_dcmpge>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d139      	bne.n	8006b80 <__kernel_rem_pio2+0x2e0>
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2300      	movs	r3, #0
 8006b12:	4630      	mov	r0, r6
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7f9 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	f000 80b4 	beq.w	8006c88 <__kernel_rem_pio2+0x3e8>
 8006b20:	f104 3bff 	add.w	fp, r4, #4294967295
 8006b24:	465b      	mov	r3, fp
 8006b26:	2200      	movs	r2, #0
 8006b28:	9904      	ldr	r1, [sp, #16]
 8006b2a:	428b      	cmp	r3, r1
 8006b2c:	da65      	bge.n	8006bfa <__kernel_rem_pio2+0x35a>
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	d07b      	beq.n	8006c2a <__kernel_rem_pio2+0x38a>
 8006b32:	ab0c      	add	r3, sp, #48	; 0x30
 8006b34:	f1aa 0a18 	sub.w	sl, sl, #24
 8006b38:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80a0 	beq.w	8006c82 <__kernel_rem_pio2+0x3e2>
 8006b42:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006bc8 <__kernel_rem_pio2+0x328>
 8006b46:	4650      	mov	r0, sl
 8006b48:	f000 fb3a 	bl	80071c0 <scalbn>
 8006b4c:	4f23      	ldr	r7, [pc, #140]	; (8006bdc <__kernel_rem_pio2+0x33c>)
 8006b4e:	ec55 4b10 	vmov	r4, r5, d0
 8006b52:	46d8      	mov	r8, fp
 8006b54:	2600      	movs	r6, #0
 8006b56:	f1b8 0f00 	cmp.w	r8, #0
 8006b5a:	f280 80cf 	bge.w	8006cfc <__kernel_rem_pio2+0x45c>
 8006b5e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006bc0 <__kernel_rem_pio2+0x320>
 8006b62:	465f      	mov	r7, fp
 8006b64:	f04f 0800 	mov.w	r8, #0
 8006b68:	2f00      	cmp	r7, #0
 8006b6a:	f2c0 80fd 	blt.w	8006d68 <__kernel_rem_pio2+0x4c8>
 8006b6e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006b70:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006be8 <__kernel_rem_pio2+0x348>
 8006b74:	ec55 4b18 	vmov	r4, r5, d8
 8006b78:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006b7c:	2600      	movs	r6, #0
 8006b7e:	e0e5      	b.n	8006d4c <__kernel_rem_pio2+0x4ac>
 8006b80:	2302      	movs	r3, #2
 8006b82:	9302      	str	r3, [sp, #8]
 8006b84:	e75c      	b.n	8006a40 <__kernel_rem_pio2+0x1a0>
 8006b86:	f8db 3000 	ldr.w	r3, [fp]
 8006b8a:	b955      	cbnz	r5, 8006ba2 <__kernel_rem_pio2+0x302>
 8006b8c:	b123      	cbz	r3, 8006b98 <__kernel_rem_pio2+0x2f8>
 8006b8e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006b92:	f8cb 3000 	str.w	r3, [fp]
 8006b96:	2301      	movs	r3, #1
 8006b98:	3201      	adds	r2, #1
 8006b9a:	f10b 0b04 	add.w	fp, fp, #4
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	e755      	b.n	8006a4e <__kernel_rem_pio2+0x1ae>
 8006ba2:	1acb      	subs	r3, r1, r3
 8006ba4:	f8cb 3000 	str.w	r3, [fp]
 8006ba8:	462b      	mov	r3, r5
 8006baa:	e7f5      	b.n	8006b98 <__kernel_rem_pio2+0x2f8>
 8006bac:	1e62      	subs	r2, r4, #1
 8006bae:	ab0c      	add	r3, sp, #48	; 0x30
 8006bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006bb8:	a90c      	add	r1, sp, #48	; 0x30
 8006bba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006bbe:	e754      	b.n	8006a6a <__kernel_rem_pio2+0x1ca>
	...
 8006bcc:	3ff00000 	.word	0x3ff00000
 8006bd0:	0800a310 	.word	0x0800a310
 8006bd4:	40200000 	.word	0x40200000
 8006bd8:	3ff00000 	.word	0x3ff00000
 8006bdc:	3e700000 	.word	0x3e700000
 8006be0:	41700000 	.word	0x41700000
 8006be4:	3fe00000 	.word	0x3fe00000
 8006be8:	0800a2d0 	.word	0x0800a2d0
 8006bec:	1e62      	subs	r2, r4, #1
 8006bee:	ab0c      	add	r3, sp, #48	; 0x30
 8006bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006bf8:	e7de      	b.n	8006bb8 <__kernel_rem_pio2+0x318>
 8006bfa:	a90c      	add	r1, sp, #48	; 0x30
 8006bfc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	430a      	orrs	r2, r1
 8006c04:	e790      	b.n	8006b28 <__kernel_rem_pio2+0x288>
 8006c06:	3301      	adds	r3, #1
 8006c08:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	d0fa      	beq.n	8006c06 <__kernel_rem_pio2+0x366>
 8006c10:	9a08      	ldr	r2, [sp, #32]
 8006c12:	18e3      	adds	r3, r4, r3
 8006c14:	18a6      	adds	r6, r4, r2
 8006c16:	aa20      	add	r2, sp, #128	; 0x80
 8006c18:	1c65      	adds	r5, r4, #1
 8006c1a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006c1e:	9302      	str	r3, [sp, #8]
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	42ab      	cmp	r3, r5
 8006c24:	da04      	bge.n	8006c30 <__kernel_rem_pio2+0x390>
 8006c26:	461c      	mov	r4, r3
 8006c28:	e6b5      	b.n	8006996 <__kernel_rem_pio2+0xf6>
 8006c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e7eb      	b.n	8006c08 <__kernel_rem_pio2+0x368>
 8006c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c36:	f7f9 fc75 	bl	8000524 <__aeabi_i2d>
 8006c3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c40:	46b3      	mov	fp, r6
 8006c42:	461c      	mov	r4, r3
 8006c44:	2700      	movs	r7, #0
 8006c46:	f04f 0800 	mov.w	r8, #0
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	9b06      	ldr	r3, [sp, #24]
 8006c50:	429f      	cmp	r7, r3
 8006c52:	dd06      	ble.n	8006c62 <__kernel_rem_pio2+0x3c2>
 8006c54:	ab70      	add	r3, sp, #448	; 0x1c0
 8006c56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c5a:	e9c3 8900 	strd	r8, r9, [r3]
 8006c5e:	3501      	adds	r5, #1
 8006c60:	e7de      	b.n	8006c20 <__kernel_rem_pio2+0x380>
 8006c62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006c66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006c6a:	f7f9 fcc5 	bl	80005f8 <__aeabi_dmul>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4640      	mov	r0, r8
 8006c74:	4649      	mov	r1, r9
 8006c76:	f7f9 fb09 	bl	800028c <__adddf3>
 8006c7a:	3701      	adds	r7, #1
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4689      	mov	r9, r1
 8006c80:	e7e5      	b.n	8006c4e <__kernel_rem_pio2+0x3ae>
 8006c82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c86:	e754      	b.n	8006b32 <__kernel_rem_pio2+0x292>
 8006c88:	ec47 6b10 	vmov	d0, r6, r7
 8006c8c:	f1ca 0000 	rsb	r0, sl, #0
 8006c90:	f000 fa96 	bl	80071c0 <scalbn>
 8006c94:	ec57 6b10 	vmov	r6, r7, d0
 8006c98:	4b9f      	ldr	r3, [pc, #636]	; (8006f18 <__kernel_rem_pio2+0x678>)
 8006c9a:	ee10 0a10 	vmov	r0, s0
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 ff2f 	bl	8000b04 <__aeabi_dcmpge>
 8006ca6:	b300      	cbz	r0, 8006cea <__kernel_rem_pio2+0x44a>
 8006ca8:	4b9c      	ldr	r3, [pc, #624]	; (8006f1c <__kernel_rem_pio2+0x67c>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	4630      	mov	r0, r6
 8006cae:	4639      	mov	r1, r7
 8006cb0:	f7f9 fca2 	bl	80005f8 <__aeabi_dmul>
 8006cb4:	f7f9 ff50 	bl	8000b58 <__aeabi_d2iz>
 8006cb8:	4605      	mov	r5, r0
 8006cba:	f7f9 fc33 	bl	8000524 <__aeabi_i2d>
 8006cbe:	4b96      	ldr	r3, [pc, #600]	; (8006f18 <__kernel_rem_pio2+0x678>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f7f9 fc99 	bl	80005f8 <__aeabi_dmul>
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4639      	mov	r1, r7
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7f9 fadb 	bl	8000288 <__aeabi_dsub>
 8006cd2:	f7f9 ff41 	bl	8000b58 <__aeabi_d2iz>
 8006cd6:	f104 0b01 	add.w	fp, r4, #1
 8006cda:	ab0c      	add	r3, sp, #48	; 0x30
 8006cdc:	f10a 0a18 	add.w	sl, sl, #24
 8006ce0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006ce4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006ce8:	e72b      	b.n	8006b42 <__kernel_rem_pio2+0x2a2>
 8006cea:	4630      	mov	r0, r6
 8006cec:	4639      	mov	r1, r7
 8006cee:	f7f9 ff33 	bl	8000b58 <__aeabi_d2iz>
 8006cf2:	ab0c      	add	r3, sp, #48	; 0x30
 8006cf4:	46a3      	mov	fp, r4
 8006cf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006cfa:	e722      	b.n	8006b42 <__kernel_rem_pio2+0x2a2>
 8006cfc:	ab70      	add	r3, sp, #448	; 0x1c0
 8006cfe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8006d02:	ab0c      	add	r3, sp, #48	; 0x30
 8006d04:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006d08:	f7f9 fc0c 	bl	8000524 <__aeabi_i2d>
 8006d0c:	4622      	mov	r2, r4
 8006d0e:	462b      	mov	r3, r5
 8006d10:	f7f9 fc72 	bl	80005f8 <__aeabi_dmul>
 8006d14:	4632      	mov	r2, r6
 8006d16:	e9c9 0100 	strd	r0, r1, [r9]
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	4629      	mov	r1, r5
 8006d20:	f7f9 fc6a 	bl	80005f8 <__aeabi_dmul>
 8006d24:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d28:	4604      	mov	r4, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	e713      	b.n	8006b56 <__kernel_rem_pio2+0x2b6>
 8006d2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006d32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006d36:	f7f9 fc5f 	bl	80005f8 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 faa3 	bl	800028c <__adddf3>
 8006d46:	3601      	adds	r6, #1
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	429e      	cmp	r6, r3
 8006d50:	dc01      	bgt.n	8006d56 <__kernel_rem_pio2+0x4b6>
 8006d52:	45b0      	cmp	r8, r6
 8006d54:	daeb      	bge.n	8006d2e <__kernel_rem_pio2+0x48e>
 8006d56:	ab48      	add	r3, sp, #288	; 0x120
 8006d58:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006d5c:	e9c3 4500 	strd	r4, r5, [r3]
 8006d60:	3f01      	subs	r7, #1
 8006d62:	f108 0801 	add.w	r8, r8, #1
 8006d66:	e6ff      	b.n	8006b68 <__kernel_rem_pio2+0x2c8>
 8006d68:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	dc0b      	bgt.n	8006d86 <__kernel_rem_pio2+0x4e6>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	dc6e      	bgt.n	8006e50 <__kernel_rem_pio2+0x5b0>
 8006d72:	d045      	beq.n	8006e00 <__kernel_rem_pio2+0x560>
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	f003 0007 	and.w	r0, r3, #7
 8006d7a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006d7e:	ecbd 8b02 	vpop	{d8}
 8006d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d86:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d1f3      	bne.n	8006d74 <__kernel_rem_pio2+0x4d4>
 8006d8c:	ab48      	add	r3, sp, #288	; 0x120
 8006d8e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8006d92:	46d0      	mov	r8, sl
 8006d94:	46d9      	mov	r9, fp
 8006d96:	f1b9 0f00 	cmp.w	r9, #0
 8006d9a:	f1a8 0808 	sub.w	r8, r8, #8
 8006d9e:	dc64      	bgt.n	8006e6a <__kernel_rem_pio2+0x5ca>
 8006da0:	465c      	mov	r4, fp
 8006da2:	2c01      	cmp	r4, #1
 8006da4:	f1aa 0a08 	sub.w	sl, sl, #8
 8006da8:	dc7e      	bgt.n	8006ea8 <__kernel_rem_pio2+0x608>
 8006daa:	2000      	movs	r0, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	f1bb 0f01 	cmp.w	fp, #1
 8006db2:	f300 8097 	bgt.w	8006ee4 <__kernel_rem_pio2+0x644>
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006dbc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 8099 	bne.w	8006ef8 <__kernel_rem_pio2+0x658>
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	e9c3 5600 	strd	r5, r6, [r3]
 8006dcc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006dd0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006dd4:	e7ce      	b.n	8006d74 <__kernel_rem_pio2+0x4d4>
 8006dd6:	ab48      	add	r3, sp, #288	; 0x120
 8006dd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f7f9 fa54 	bl	800028c <__adddf3>
 8006de4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006de8:	f1bb 0f00 	cmp.w	fp, #0
 8006dec:	daf3      	bge.n	8006dd6 <__kernel_rem_pio2+0x536>
 8006dee:	9b02      	ldr	r3, [sp, #8]
 8006df0:	b113      	cbz	r3, 8006df8 <__kernel_rem_pio2+0x558>
 8006df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006df6:	4619      	mov	r1, r3
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	e9c3 0100 	strd	r0, r1, [r3]
 8006dfe:	e7b9      	b.n	8006d74 <__kernel_rem_pio2+0x4d4>
 8006e00:	2000      	movs	r0, #0
 8006e02:	2100      	movs	r1, #0
 8006e04:	e7f0      	b.n	8006de8 <__kernel_rem_pio2+0x548>
 8006e06:	ab48      	add	r3, sp, #288	; 0x120
 8006e08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 fa3c 	bl	800028c <__adddf3>
 8006e14:	3c01      	subs	r4, #1
 8006e16:	2c00      	cmp	r4, #0
 8006e18:	daf5      	bge.n	8006e06 <__kernel_rem_pio2+0x566>
 8006e1a:	9b02      	ldr	r3, [sp, #8]
 8006e1c:	b1e3      	cbz	r3, 8006e58 <__kernel_rem_pio2+0x5b8>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e24:	9c01      	ldr	r4, [sp, #4]
 8006e26:	e9c4 2300 	strd	r2, r3, [r4]
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006e32:	f7f9 fa29 	bl	8000288 <__aeabi_dsub>
 8006e36:	ad4a      	add	r5, sp, #296	; 0x128
 8006e38:	2401      	movs	r4, #1
 8006e3a:	45a3      	cmp	fp, r4
 8006e3c:	da0f      	bge.n	8006e5e <__kernel_rem_pio2+0x5be>
 8006e3e:	9b02      	ldr	r3, [sp, #8]
 8006e40:	b113      	cbz	r3, 8006e48 <__kernel_rem_pio2+0x5a8>
 8006e42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e46:	4619      	mov	r1, r3
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e4e:	e791      	b.n	8006d74 <__kernel_rem_pio2+0x4d4>
 8006e50:	465c      	mov	r4, fp
 8006e52:	2000      	movs	r0, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	e7de      	b.n	8006e16 <__kernel_rem_pio2+0x576>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	e7e2      	b.n	8006e24 <__kernel_rem_pio2+0x584>
 8006e5e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006e62:	f7f9 fa13 	bl	800028c <__adddf3>
 8006e66:	3401      	adds	r4, #1
 8006e68:	e7e7      	b.n	8006e3a <__kernel_rem_pio2+0x59a>
 8006e6a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8006e6e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8006e72:	4620      	mov	r0, r4
 8006e74:	4632      	mov	r2, r6
 8006e76:	463b      	mov	r3, r7
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 fa07 	bl	800028c <__adddf3>
 8006e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 f9fd 	bl	8000288 <__aeabi_dsub>
 8006e8e:	4632      	mov	r2, r6
 8006e90:	463b      	mov	r3, r7
 8006e92:	f7f9 f9fb 	bl	800028c <__adddf3>
 8006e96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006e9a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006e9e:	ed88 7b00 	vstr	d7, [r8]
 8006ea2:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ea6:	e776      	b.n	8006d96 <__kernel_rem_pio2+0x4f6>
 8006ea8:	e9da 8900 	ldrd	r8, r9, [sl]
 8006eac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4632      	mov	r2, r6
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 f9e8 	bl	800028c <__adddf3>
 8006ebc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	f7f9 f9de 	bl	8000288 <__aeabi_dsub>
 8006ecc:	4632      	mov	r2, r6
 8006ece:	463b      	mov	r3, r7
 8006ed0:	f7f9 f9dc 	bl	800028c <__adddf3>
 8006ed4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006ed8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006edc:	ed8a 7b00 	vstr	d7, [sl]
 8006ee0:	3c01      	subs	r4, #1
 8006ee2:	e75e      	b.n	8006da2 <__kernel_rem_pio2+0x502>
 8006ee4:	ab48      	add	r3, sp, #288	; 0x120
 8006ee6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f7f9 f9cd 	bl	800028c <__adddf3>
 8006ef2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ef6:	e75a      	b.n	8006dae <__kernel_rem_pio2+0x50e>
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	9a01      	ldr	r2, [sp, #4]
 8006efc:	601d      	str	r5, [r3, #0]
 8006efe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006f02:	605c      	str	r4, [r3, #4]
 8006f04:	609f      	str	r7, [r3, #8]
 8006f06:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006f0a:	60d3      	str	r3, [r2, #12]
 8006f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f10:	6110      	str	r0, [r2, #16]
 8006f12:	6153      	str	r3, [r2, #20]
 8006f14:	e72e      	b.n	8006d74 <__kernel_rem_pio2+0x4d4>
 8006f16:	bf00      	nop
 8006f18:	41700000 	.word	0x41700000
 8006f1c:	3e700000 	.word	0x3e700000

08006f20 <__kernel_sin>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	ed2d 8b04 	vpush	{d8-d9}
 8006f28:	eeb0 8a41 	vmov.f32	s16, s2
 8006f2c:	eef0 8a61 	vmov.f32	s17, s3
 8006f30:	ec55 4b10 	vmov	r4, r5, d0
 8006f34:	b083      	sub	sp, #12
 8006f36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006f3e:	9001      	str	r0, [sp, #4]
 8006f40:	da06      	bge.n	8006f50 <__kernel_sin+0x30>
 8006f42:	ee10 0a10 	vmov	r0, s0
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fe06 	bl	8000b58 <__aeabi_d2iz>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d051      	beq.n	8006ff4 <__kernel_sin+0xd4>
 8006f50:	4622      	mov	r2, r4
 8006f52:	462b      	mov	r3, r5
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 fb4e 	bl	80005f8 <__aeabi_dmul>
 8006f5c:	4682      	mov	sl, r0
 8006f5e:	468b      	mov	fp, r1
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7f9 fb46 	bl	80005f8 <__aeabi_dmul>
 8006f6c:	a341      	add	r3, pc, #260	; (adr r3, 8007074 <__kernel_sin+0x154>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	4680      	mov	r8, r0
 8006f74:	4689      	mov	r9, r1
 8006f76:	4650      	mov	r0, sl
 8006f78:	4659      	mov	r1, fp
 8006f7a:	f7f9 fb3d 	bl	80005f8 <__aeabi_dmul>
 8006f7e:	a33f      	add	r3, pc, #252	; (adr r3, 800707c <__kernel_sin+0x15c>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 f980 	bl	8000288 <__aeabi_dsub>
 8006f88:	4652      	mov	r2, sl
 8006f8a:	465b      	mov	r3, fp
 8006f8c:	f7f9 fb34 	bl	80005f8 <__aeabi_dmul>
 8006f90:	a33c      	add	r3, pc, #240	; (adr r3, 8007084 <__kernel_sin+0x164>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 f979 	bl	800028c <__adddf3>
 8006f9a:	4652      	mov	r2, sl
 8006f9c:	465b      	mov	r3, fp
 8006f9e:	f7f9 fb2b 	bl	80005f8 <__aeabi_dmul>
 8006fa2:	a33a      	add	r3, pc, #232	; (adr r3, 800708c <__kernel_sin+0x16c>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f7f9 f96e 	bl	8000288 <__aeabi_dsub>
 8006fac:	4652      	mov	r2, sl
 8006fae:	465b      	mov	r3, fp
 8006fb0:	f7f9 fb22 	bl	80005f8 <__aeabi_dmul>
 8006fb4:	a337      	add	r3, pc, #220	; (adr r3, 8007094 <__kernel_sin+0x174>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f967 	bl	800028c <__adddf3>
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	460f      	mov	r7, r1
 8006fc4:	b9eb      	cbnz	r3, 8007002 <__kernel_sin+0xe2>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4650      	mov	r0, sl
 8006fcc:	4659      	mov	r1, fp
 8006fce:	f7f9 fb13 	bl	80005f8 <__aeabi_dmul>
 8006fd2:	a325      	add	r3, pc, #148	; (adr r3, 8007068 <__kernel_sin+0x148>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f7f9 f956 	bl	8000288 <__aeabi_dsub>
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	f7f9 fb0a 	bl	80005f8 <__aeabi_dmul>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7f9 f94e 	bl	800028c <__adddf3>
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	ec45 4b10 	vmov	d0, r4, r5
 8006ff8:	b003      	add	sp, #12
 8006ffa:	ecbd 8b04 	vpop	{d8-d9}
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <__kernel_sin+0x150>)
 8007004:	ec51 0b18 	vmov	r0, r1, d8
 8007008:	2200      	movs	r2, #0
 800700a:	f7f9 faf5 	bl	80005f8 <__aeabi_dmul>
 800700e:	4632      	mov	r2, r6
 8007010:	ec41 0b19 	vmov	d9, r0, r1
 8007014:	463b      	mov	r3, r7
 8007016:	4640      	mov	r0, r8
 8007018:	4649      	mov	r1, r9
 800701a:	f7f9 faed 	bl	80005f8 <__aeabi_dmul>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	ec51 0b19 	vmov	r0, r1, d9
 8007026:	f7f9 f92f 	bl	8000288 <__aeabi_dsub>
 800702a:	4652      	mov	r2, sl
 800702c:	465b      	mov	r3, fp
 800702e:	f7f9 fae3 	bl	80005f8 <__aeabi_dmul>
 8007032:	ec53 2b18 	vmov	r2, r3, d8
 8007036:	f7f9 f927 	bl	8000288 <__aeabi_dsub>
 800703a:	a30b      	add	r3, pc, #44	; (adr r3, 8007068 <__kernel_sin+0x148>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	4606      	mov	r6, r0
 8007042:	460f      	mov	r7, r1
 8007044:	4640      	mov	r0, r8
 8007046:	4649      	mov	r1, r9
 8007048:	f7f9 fad6 	bl	80005f8 <__aeabi_dmul>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4630      	mov	r0, r6
 8007052:	4639      	mov	r1, r7
 8007054:	f7f9 f91a 	bl	800028c <__adddf3>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4620      	mov	r0, r4
 800705e:	4629      	mov	r1, r5
 8007060:	f7f9 f912 	bl	8000288 <__aeabi_dsub>
 8007064:	e7c4      	b.n	8006ff0 <__kernel_sin+0xd0>
 8007066:	bf00      	nop
 8007068:	55555549 	.word	0x55555549
 800706c:	3fc55555 	.word	0x3fc55555
 8007070:	3fe00000 	.word	0x3fe00000
 8007074:	5acfd57c 	.word	0x5acfd57c
 8007078:	3de5d93a 	.word	0x3de5d93a
 800707c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007080:	3e5ae5e6 	.word	0x3e5ae5e6
 8007084:	57b1fe7d 	.word	0x57b1fe7d
 8007088:	3ec71de3 	.word	0x3ec71de3
 800708c:	19c161d5 	.word	0x19c161d5
 8007090:	3f2a01a0 	.word	0x3f2a01a0
 8007094:	1110f8a6 	.word	0x1110f8a6
 8007098:	3f811111 	.word	0x3f811111

0800709c <fabs>:
 800709c:	ec51 0b10 	vmov	r0, r1, d0
 80070a0:	ee10 2a10 	vmov	r2, s0
 80070a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070a8:	ec43 2b10 	vmov	d0, r2, r3
 80070ac:	4770      	bx	lr
	...

080070b0 <floor>:
 80070b0:	ec51 0b10 	vmov	r0, r1, d0
 80070b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80070bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80070c0:	2e13      	cmp	r6, #19
 80070c2:	ee10 5a10 	vmov	r5, s0
 80070c6:	ee10 8a10 	vmov	r8, s0
 80070ca:	460c      	mov	r4, r1
 80070cc:	dc32      	bgt.n	8007134 <floor+0x84>
 80070ce:	2e00      	cmp	r6, #0
 80070d0:	da14      	bge.n	80070fc <floor+0x4c>
 80070d2:	a333      	add	r3, pc, #204	; (adr r3, 80071a0 <floor+0xf0>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f7f9 f8d8 	bl	800028c <__adddf3>
 80070dc:	2200      	movs	r2, #0
 80070de:	2300      	movs	r3, #0
 80070e0:	f7f9 fd1a 	bl	8000b18 <__aeabi_dcmpgt>
 80070e4:	b138      	cbz	r0, 80070f6 <floor+0x46>
 80070e6:	2c00      	cmp	r4, #0
 80070e8:	da57      	bge.n	800719a <floor+0xea>
 80070ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80070ee:	431d      	orrs	r5, r3
 80070f0:	d001      	beq.n	80070f6 <floor+0x46>
 80070f2:	4c2d      	ldr	r4, [pc, #180]	; (80071a8 <floor+0xf8>)
 80070f4:	2500      	movs	r5, #0
 80070f6:	4621      	mov	r1, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	e025      	b.n	8007148 <floor+0x98>
 80070fc:	4f2b      	ldr	r7, [pc, #172]	; (80071ac <floor+0xfc>)
 80070fe:	4137      	asrs	r7, r6
 8007100:	ea01 0307 	and.w	r3, r1, r7
 8007104:	4303      	orrs	r3, r0
 8007106:	d01f      	beq.n	8007148 <floor+0x98>
 8007108:	a325      	add	r3, pc, #148	; (adr r3, 80071a0 <floor+0xf0>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 f8bd 	bl	800028c <__adddf3>
 8007112:	2200      	movs	r2, #0
 8007114:	2300      	movs	r3, #0
 8007116:	f7f9 fcff 	bl	8000b18 <__aeabi_dcmpgt>
 800711a:	2800      	cmp	r0, #0
 800711c:	d0eb      	beq.n	80070f6 <floor+0x46>
 800711e:	2c00      	cmp	r4, #0
 8007120:	bfbe      	ittt	lt
 8007122:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007126:	fa43 f606 	asrlt.w	r6, r3, r6
 800712a:	19a4      	addlt	r4, r4, r6
 800712c:	ea24 0407 	bic.w	r4, r4, r7
 8007130:	2500      	movs	r5, #0
 8007132:	e7e0      	b.n	80070f6 <floor+0x46>
 8007134:	2e33      	cmp	r6, #51	; 0x33
 8007136:	dd0b      	ble.n	8007150 <floor+0xa0>
 8007138:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800713c:	d104      	bne.n	8007148 <floor+0x98>
 800713e:	ee10 2a10 	vmov	r2, s0
 8007142:	460b      	mov	r3, r1
 8007144:	f7f9 f8a2 	bl	800028c <__adddf3>
 8007148:	ec41 0b10 	vmov	d0, r0, r1
 800714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007150:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007154:	f04f 33ff 	mov.w	r3, #4294967295
 8007158:	fa23 f707 	lsr.w	r7, r3, r7
 800715c:	4207      	tst	r7, r0
 800715e:	d0f3      	beq.n	8007148 <floor+0x98>
 8007160:	a30f      	add	r3, pc, #60	; (adr r3, 80071a0 <floor+0xf0>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f7f9 f891 	bl	800028c <__adddf3>
 800716a:	2200      	movs	r2, #0
 800716c:	2300      	movs	r3, #0
 800716e:	f7f9 fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 8007172:	2800      	cmp	r0, #0
 8007174:	d0bf      	beq.n	80070f6 <floor+0x46>
 8007176:	2c00      	cmp	r4, #0
 8007178:	da02      	bge.n	8007180 <floor+0xd0>
 800717a:	2e14      	cmp	r6, #20
 800717c:	d103      	bne.n	8007186 <floor+0xd6>
 800717e:	3401      	adds	r4, #1
 8007180:	ea25 0507 	bic.w	r5, r5, r7
 8007184:	e7b7      	b.n	80070f6 <floor+0x46>
 8007186:	2301      	movs	r3, #1
 8007188:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800718c:	fa03 f606 	lsl.w	r6, r3, r6
 8007190:	4435      	add	r5, r6
 8007192:	4545      	cmp	r5, r8
 8007194:	bf38      	it	cc
 8007196:	18e4      	addcc	r4, r4, r3
 8007198:	e7f2      	b.n	8007180 <floor+0xd0>
 800719a:	2500      	movs	r5, #0
 800719c:	462c      	mov	r4, r5
 800719e:	e7aa      	b.n	80070f6 <floor+0x46>
 80071a0:	8800759c 	.word	0x8800759c
 80071a4:	7e37e43c 	.word	0x7e37e43c
 80071a8:	bff00000 	.word	0xbff00000
 80071ac:	000fffff 	.word	0x000fffff

080071b0 <nan>:
 80071b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80071b8 <nan+0x8>
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	00000000 	.word	0x00000000
 80071bc:	7ff80000 	.word	0x7ff80000

080071c0 <scalbn>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	ec55 4b10 	vmov	r4, r5, d0
 80071c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80071ca:	4606      	mov	r6, r0
 80071cc:	462b      	mov	r3, r5
 80071ce:	b99a      	cbnz	r2, 80071f8 <scalbn+0x38>
 80071d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071d4:	4323      	orrs	r3, r4
 80071d6:	d036      	beq.n	8007246 <scalbn+0x86>
 80071d8:	4b39      	ldr	r3, [pc, #228]	; (80072c0 <scalbn+0x100>)
 80071da:	4629      	mov	r1, r5
 80071dc:	ee10 0a10 	vmov	r0, s0
 80071e0:	2200      	movs	r2, #0
 80071e2:	f7f9 fa09 	bl	80005f8 <__aeabi_dmul>
 80071e6:	4b37      	ldr	r3, [pc, #220]	; (80072c4 <scalbn+0x104>)
 80071e8:	429e      	cmp	r6, r3
 80071ea:	4604      	mov	r4, r0
 80071ec:	460d      	mov	r5, r1
 80071ee:	da10      	bge.n	8007212 <scalbn+0x52>
 80071f0:	a32b      	add	r3, pc, #172	; (adr r3, 80072a0 <scalbn+0xe0>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	e03a      	b.n	800726e <scalbn+0xae>
 80071f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80071fc:	428a      	cmp	r2, r1
 80071fe:	d10c      	bne.n	800721a <scalbn+0x5a>
 8007200:	ee10 2a10 	vmov	r2, s0
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f9 f840 	bl	800028c <__adddf3>
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	e019      	b.n	8007246 <scalbn+0x86>
 8007212:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007216:	460b      	mov	r3, r1
 8007218:	3a36      	subs	r2, #54	; 0x36
 800721a:	4432      	add	r2, r6
 800721c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007220:	428a      	cmp	r2, r1
 8007222:	dd08      	ble.n	8007236 <scalbn+0x76>
 8007224:	2d00      	cmp	r5, #0
 8007226:	a120      	add	r1, pc, #128	; (adr r1, 80072a8 <scalbn+0xe8>)
 8007228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800722c:	da1c      	bge.n	8007268 <scalbn+0xa8>
 800722e:	a120      	add	r1, pc, #128	; (adr r1, 80072b0 <scalbn+0xf0>)
 8007230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007234:	e018      	b.n	8007268 <scalbn+0xa8>
 8007236:	2a00      	cmp	r2, #0
 8007238:	dd08      	ble.n	800724c <scalbn+0x8c>
 800723a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800723e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007242:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007246:	ec45 4b10 	vmov	d0, r4, r5
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007250:	da19      	bge.n	8007286 <scalbn+0xc6>
 8007252:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007256:	429e      	cmp	r6, r3
 8007258:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800725c:	dd0a      	ble.n	8007274 <scalbn+0xb4>
 800725e:	a112      	add	r1, pc, #72	; (adr r1, 80072a8 <scalbn+0xe8>)
 8007260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e2      	bne.n	800722e <scalbn+0x6e>
 8007268:	a30f      	add	r3, pc, #60	; (adr r3, 80072a8 <scalbn+0xe8>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f9 f9c3 	bl	80005f8 <__aeabi_dmul>
 8007272:	e7cb      	b.n	800720c <scalbn+0x4c>
 8007274:	a10a      	add	r1, pc, #40	; (adr r1, 80072a0 <scalbn+0xe0>)
 8007276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0b8      	beq.n	80071f0 <scalbn+0x30>
 800727e:	a10e      	add	r1, pc, #56	; (adr r1, 80072b8 <scalbn+0xf8>)
 8007280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007284:	e7b4      	b.n	80071f0 <scalbn+0x30>
 8007286:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800728a:	3236      	adds	r2, #54	; 0x36
 800728c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007290:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007294:	4620      	mov	r0, r4
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <scalbn+0x108>)
 8007298:	2200      	movs	r2, #0
 800729a:	e7e8      	b.n	800726e <scalbn+0xae>
 800729c:	f3af 8000 	nop.w
 80072a0:	c2f8f359 	.word	0xc2f8f359
 80072a4:	01a56e1f 	.word	0x01a56e1f
 80072a8:	8800759c 	.word	0x8800759c
 80072ac:	7e37e43c 	.word	0x7e37e43c
 80072b0:	8800759c 	.word	0x8800759c
 80072b4:	fe37e43c 	.word	0xfe37e43c
 80072b8:	c2f8f359 	.word	0xc2f8f359
 80072bc:	81a56e1f 	.word	0x81a56e1f
 80072c0:	43500000 	.word	0x43500000
 80072c4:	ffff3cb0 	.word	0xffff3cb0
 80072c8:	3c900000 	.word	0x3c900000

080072cc <abort>:
 80072cc:	b508      	push	{r3, lr}
 80072ce:	2006      	movs	r0, #6
 80072d0:	f000 fda2 	bl	8007e18 <raise>
 80072d4:	2001      	movs	r0, #1
 80072d6:	f7fa f911 	bl	80014fc <_exit>
	...

080072dc <__errno>:
 80072dc:	4b01      	ldr	r3, [pc, #4]	; (80072e4 <__errno+0x8>)
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20000028 	.word	0x20000028

080072e8 <__libc_init_array>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	4d0d      	ldr	r5, [pc, #52]	; (8007320 <__libc_init_array+0x38>)
 80072ec:	4c0d      	ldr	r4, [pc, #52]	; (8007324 <__libc_init_array+0x3c>)
 80072ee:	1b64      	subs	r4, r4, r5
 80072f0:	10a4      	asrs	r4, r4, #2
 80072f2:	2600      	movs	r6, #0
 80072f4:	42a6      	cmp	r6, r4
 80072f6:	d109      	bne.n	800730c <__libc_init_array+0x24>
 80072f8:	4d0b      	ldr	r5, [pc, #44]	; (8007328 <__libc_init_array+0x40>)
 80072fa:	4c0c      	ldr	r4, [pc, #48]	; (800732c <__libc_init_array+0x44>)
 80072fc:	f002 fed8 	bl	800a0b0 <_init>
 8007300:	1b64      	subs	r4, r4, r5
 8007302:	10a4      	asrs	r4, r4, #2
 8007304:	2600      	movs	r6, #0
 8007306:	42a6      	cmp	r6, r4
 8007308:	d105      	bne.n	8007316 <__libc_init_array+0x2e>
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007310:	4798      	blx	r3
 8007312:	3601      	adds	r6, #1
 8007314:	e7ee      	b.n	80072f4 <__libc_init_array+0xc>
 8007316:	f855 3b04 	ldr.w	r3, [r5], #4
 800731a:	4798      	blx	r3
 800731c:	3601      	adds	r6, #1
 800731e:	e7f2      	b.n	8007306 <__libc_init_array+0x1e>
 8007320:	0800a704 	.word	0x0800a704
 8007324:	0800a704 	.word	0x0800a704
 8007328:	0800a704 	.word	0x0800a704
 800732c:	0800a708 	.word	0x0800a708

08007330 <malloc>:
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <malloc+0xc>)
 8007332:	4601      	mov	r1, r0
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	f000 b85b 	b.w	80073f0 <_malloc_r>
 800733a:	bf00      	nop
 800733c:	20000028 	.word	0x20000028

08007340 <memset>:
 8007340:	4402      	add	r2, r0
 8007342:	4603      	mov	r3, r0
 8007344:	4293      	cmp	r3, r2
 8007346:	d100      	bne.n	800734a <memset+0xa>
 8007348:	4770      	bx	lr
 800734a:	f803 1b01 	strb.w	r1, [r3], #1
 800734e:	e7f9      	b.n	8007344 <memset+0x4>

08007350 <_free_r>:
 8007350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007352:	2900      	cmp	r1, #0
 8007354:	d048      	beq.n	80073e8 <_free_r+0x98>
 8007356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800735a:	9001      	str	r0, [sp, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f1a1 0404 	sub.w	r4, r1, #4
 8007362:	bfb8      	it	lt
 8007364:	18e4      	addlt	r4, r4, r3
 8007366:	f001 fd2b 	bl	8008dc0 <__malloc_lock>
 800736a:	4a20      	ldr	r2, [pc, #128]	; (80073ec <_free_r+0x9c>)
 800736c:	9801      	ldr	r0, [sp, #4]
 800736e:	6813      	ldr	r3, [r2, #0]
 8007370:	4615      	mov	r5, r2
 8007372:	b933      	cbnz	r3, 8007382 <_free_r+0x32>
 8007374:	6063      	str	r3, [r4, #4]
 8007376:	6014      	str	r4, [r2, #0]
 8007378:	b003      	add	sp, #12
 800737a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800737e:	f001 bd25 	b.w	8008dcc <__malloc_unlock>
 8007382:	42a3      	cmp	r3, r4
 8007384:	d90b      	bls.n	800739e <_free_r+0x4e>
 8007386:	6821      	ldr	r1, [r4, #0]
 8007388:	1862      	adds	r2, r4, r1
 800738a:	4293      	cmp	r3, r2
 800738c:	bf04      	itt	eq
 800738e:	681a      	ldreq	r2, [r3, #0]
 8007390:	685b      	ldreq	r3, [r3, #4]
 8007392:	6063      	str	r3, [r4, #4]
 8007394:	bf04      	itt	eq
 8007396:	1852      	addeq	r2, r2, r1
 8007398:	6022      	streq	r2, [r4, #0]
 800739a:	602c      	str	r4, [r5, #0]
 800739c:	e7ec      	b.n	8007378 <_free_r+0x28>
 800739e:	461a      	mov	r2, r3
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b10b      	cbz	r3, 80073a8 <_free_r+0x58>
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d9fa      	bls.n	800739e <_free_r+0x4e>
 80073a8:	6811      	ldr	r1, [r2, #0]
 80073aa:	1855      	adds	r5, r2, r1
 80073ac:	42a5      	cmp	r5, r4
 80073ae:	d10b      	bne.n	80073c8 <_free_r+0x78>
 80073b0:	6824      	ldr	r4, [r4, #0]
 80073b2:	4421      	add	r1, r4
 80073b4:	1854      	adds	r4, r2, r1
 80073b6:	42a3      	cmp	r3, r4
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	d1dd      	bne.n	8007378 <_free_r+0x28>
 80073bc:	681c      	ldr	r4, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	6053      	str	r3, [r2, #4]
 80073c2:	4421      	add	r1, r4
 80073c4:	6011      	str	r1, [r2, #0]
 80073c6:	e7d7      	b.n	8007378 <_free_r+0x28>
 80073c8:	d902      	bls.n	80073d0 <_free_r+0x80>
 80073ca:	230c      	movs	r3, #12
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	e7d3      	b.n	8007378 <_free_r+0x28>
 80073d0:	6825      	ldr	r5, [r4, #0]
 80073d2:	1961      	adds	r1, r4, r5
 80073d4:	428b      	cmp	r3, r1
 80073d6:	bf04      	itt	eq
 80073d8:	6819      	ldreq	r1, [r3, #0]
 80073da:	685b      	ldreq	r3, [r3, #4]
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	bf04      	itt	eq
 80073e0:	1949      	addeq	r1, r1, r5
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	6054      	str	r4, [r2, #4]
 80073e6:	e7c7      	b.n	8007378 <_free_r+0x28>
 80073e8:	b003      	add	sp, #12
 80073ea:	bd30      	pop	{r4, r5, pc}
 80073ec:	20000234 	.word	0x20000234

080073f0 <_malloc_r>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	1ccd      	adds	r5, r1, #3
 80073f4:	f025 0503 	bic.w	r5, r5, #3
 80073f8:	3508      	adds	r5, #8
 80073fa:	2d0c      	cmp	r5, #12
 80073fc:	bf38      	it	cc
 80073fe:	250c      	movcc	r5, #12
 8007400:	2d00      	cmp	r5, #0
 8007402:	4606      	mov	r6, r0
 8007404:	db01      	blt.n	800740a <_malloc_r+0x1a>
 8007406:	42a9      	cmp	r1, r5
 8007408:	d903      	bls.n	8007412 <_malloc_r+0x22>
 800740a:	230c      	movs	r3, #12
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	2000      	movs	r0, #0
 8007410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007412:	f001 fcd5 	bl	8008dc0 <__malloc_lock>
 8007416:	4921      	ldr	r1, [pc, #132]	; (800749c <_malloc_r+0xac>)
 8007418:	680a      	ldr	r2, [r1, #0]
 800741a:	4614      	mov	r4, r2
 800741c:	b99c      	cbnz	r4, 8007446 <_malloc_r+0x56>
 800741e:	4f20      	ldr	r7, [pc, #128]	; (80074a0 <_malloc_r+0xb0>)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	b923      	cbnz	r3, 800742e <_malloc_r+0x3e>
 8007424:	4621      	mov	r1, r4
 8007426:	4630      	mov	r0, r6
 8007428:	f000 fcbe 	bl	8007da8 <_sbrk_r>
 800742c:	6038      	str	r0, [r7, #0]
 800742e:	4629      	mov	r1, r5
 8007430:	4630      	mov	r0, r6
 8007432:	f000 fcb9 	bl	8007da8 <_sbrk_r>
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	d123      	bne.n	8007482 <_malloc_r+0x92>
 800743a:	230c      	movs	r3, #12
 800743c:	6033      	str	r3, [r6, #0]
 800743e:	4630      	mov	r0, r6
 8007440:	f001 fcc4 	bl	8008dcc <__malloc_unlock>
 8007444:	e7e3      	b.n	800740e <_malloc_r+0x1e>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	1b5b      	subs	r3, r3, r5
 800744a:	d417      	bmi.n	800747c <_malloc_r+0x8c>
 800744c:	2b0b      	cmp	r3, #11
 800744e:	d903      	bls.n	8007458 <_malloc_r+0x68>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	441c      	add	r4, r3
 8007454:	6025      	str	r5, [r4, #0]
 8007456:	e004      	b.n	8007462 <_malloc_r+0x72>
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	42a2      	cmp	r2, r4
 800745c:	bf0c      	ite	eq
 800745e:	600b      	streq	r3, [r1, #0]
 8007460:	6053      	strne	r3, [r2, #4]
 8007462:	4630      	mov	r0, r6
 8007464:	f001 fcb2 	bl	8008dcc <__malloc_unlock>
 8007468:	f104 000b 	add.w	r0, r4, #11
 800746c:	1d23      	adds	r3, r4, #4
 800746e:	f020 0007 	bic.w	r0, r0, #7
 8007472:	1ac2      	subs	r2, r0, r3
 8007474:	d0cc      	beq.n	8007410 <_malloc_r+0x20>
 8007476:	1a1b      	subs	r3, r3, r0
 8007478:	50a3      	str	r3, [r4, r2]
 800747a:	e7c9      	b.n	8007410 <_malloc_r+0x20>
 800747c:	4622      	mov	r2, r4
 800747e:	6864      	ldr	r4, [r4, #4]
 8007480:	e7cc      	b.n	800741c <_malloc_r+0x2c>
 8007482:	1cc4      	adds	r4, r0, #3
 8007484:	f024 0403 	bic.w	r4, r4, #3
 8007488:	42a0      	cmp	r0, r4
 800748a:	d0e3      	beq.n	8007454 <_malloc_r+0x64>
 800748c:	1a21      	subs	r1, r4, r0
 800748e:	4630      	mov	r0, r6
 8007490:	f000 fc8a 	bl	8007da8 <_sbrk_r>
 8007494:	3001      	adds	r0, #1
 8007496:	d1dd      	bne.n	8007454 <_malloc_r+0x64>
 8007498:	e7cf      	b.n	800743a <_malloc_r+0x4a>
 800749a:	bf00      	nop
 800749c:	20000234 	.word	0x20000234
 80074a0:	20000238 	.word	0x20000238

080074a4 <__cvt>:
 80074a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	ec55 4b10 	vmov	r4, r5, d0
 80074ac:	2d00      	cmp	r5, #0
 80074ae:	460e      	mov	r6, r1
 80074b0:	4619      	mov	r1, r3
 80074b2:	462b      	mov	r3, r5
 80074b4:	bfbb      	ittet	lt
 80074b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074ba:	461d      	movlt	r5, r3
 80074bc:	2300      	movge	r3, #0
 80074be:	232d      	movlt	r3, #45	; 0x2d
 80074c0:	700b      	strb	r3, [r1, #0]
 80074c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074c8:	4691      	mov	r9, r2
 80074ca:	f023 0820 	bic.w	r8, r3, #32
 80074ce:	bfbc      	itt	lt
 80074d0:	4622      	movlt	r2, r4
 80074d2:	4614      	movlt	r4, r2
 80074d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074d8:	d005      	beq.n	80074e6 <__cvt+0x42>
 80074da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074de:	d100      	bne.n	80074e2 <__cvt+0x3e>
 80074e0:	3601      	adds	r6, #1
 80074e2:	2102      	movs	r1, #2
 80074e4:	e000      	b.n	80074e8 <__cvt+0x44>
 80074e6:	2103      	movs	r1, #3
 80074e8:	ab03      	add	r3, sp, #12
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	ab02      	add	r3, sp, #8
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	ec45 4b10 	vmov	d0, r4, r5
 80074f4:	4653      	mov	r3, sl
 80074f6:	4632      	mov	r2, r6
 80074f8:	f000 fd6a 	bl	8007fd0 <_dtoa_r>
 80074fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007500:	4607      	mov	r7, r0
 8007502:	d102      	bne.n	800750a <__cvt+0x66>
 8007504:	f019 0f01 	tst.w	r9, #1
 8007508:	d022      	beq.n	8007550 <__cvt+0xac>
 800750a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800750e:	eb07 0906 	add.w	r9, r7, r6
 8007512:	d110      	bne.n	8007536 <__cvt+0x92>
 8007514:	783b      	ldrb	r3, [r7, #0]
 8007516:	2b30      	cmp	r3, #48	; 0x30
 8007518:	d10a      	bne.n	8007530 <__cvt+0x8c>
 800751a:	2200      	movs	r2, #0
 800751c:	2300      	movs	r3, #0
 800751e:	4620      	mov	r0, r4
 8007520:	4629      	mov	r1, r5
 8007522:	f7f9 fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007526:	b918      	cbnz	r0, 8007530 <__cvt+0x8c>
 8007528:	f1c6 0601 	rsb	r6, r6, #1
 800752c:	f8ca 6000 	str.w	r6, [sl]
 8007530:	f8da 3000 	ldr.w	r3, [sl]
 8007534:	4499      	add	r9, r3
 8007536:	2200      	movs	r2, #0
 8007538:	2300      	movs	r3, #0
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	f7f9 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007542:	b108      	cbz	r0, 8007548 <__cvt+0xa4>
 8007544:	f8cd 900c 	str.w	r9, [sp, #12]
 8007548:	2230      	movs	r2, #48	; 0x30
 800754a:	9b03      	ldr	r3, [sp, #12]
 800754c:	454b      	cmp	r3, r9
 800754e:	d307      	bcc.n	8007560 <__cvt+0xbc>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007554:	1bdb      	subs	r3, r3, r7
 8007556:	4638      	mov	r0, r7
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	b004      	add	sp, #16
 800755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007560:	1c59      	adds	r1, r3, #1
 8007562:	9103      	str	r1, [sp, #12]
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	e7f0      	b.n	800754a <__cvt+0xa6>

08007568 <__exponent>:
 8007568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800756a:	4603      	mov	r3, r0
 800756c:	2900      	cmp	r1, #0
 800756e:	bfb8      	it	lt
 8007570:	4249      	neglt	r1, r1
 8007572:	f803 2b02 	strb.w	r2, [r3], #2
 8007576:	bfb4      	ite	lt
 8007578:	222d      	movlt	r2, #45	; 0x2d
 800757a:	222b      	movge	r2, #43	; 0x2b
 800757c:	2909      	cmp	r1, #9
 800757e:	7042      	strb	r2, [r0, #1]
 8007580:	dd2a      	ble.n	80075d8 <__exponent+0x70>
 8007582:	f10d 0407 	add.w	r4, sp, #7
 8007586:	46a4      	mov	ip, r4
 8007588:	270a      	movs	r7, #10
 800758a:	46a6      	mov	lr, r4
 800758c:	460a      	mov	r2, r1
 800758e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007592:	fb07 1516 	mls	r5, r7, r6, r1
 8007596:	3530      	adds	r5, #48	; 0x30
 8007598:	2a63      	cmp	r2, #99	; 0x63
 800759a:	f104 34ff 	add.w	r4, r4, #4294967295
 800759e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075a2:	4631      	mov	r1, r6
 80075a4:	dcf1      	bgt.n	800758a <__exponent+0x22>
 80075a6:	3130      	adds	r1, #48	; 0x30
 80075a8:	f1ae 0502 	sub.w	r5, lr, #2
 80075ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075b0:	1c44      	adds	r4, r0, #1
 80075b2:	4629      	mov	r1, r5
 80075b4:	4561      	cmp	r1, ip
 80075b6:	d30a      	bcc.n	80075ce <__exponent+0x66>
 80075b8:	f10d 0209 	add.w	r2, sp, #9
 80075bc:	eba2 020e 	sub.w	r2, r2, lr
 80075c0:	4565      	cmp	r5, ip
 80075c2:	bf88      	it	hi
 80075c4:	2200      	movhi	r2, #0
 80075c6:	4413      	add	r3, r2
 80075c8:	1a18      	subs	r0, r3, r0
 80075ca:	b003      	add	sp, #12
 80075cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80075d6:	e7ed      	b.n	80075b4 <__exponent+0x4c>
 80075d8:	2330      	movs	r3, #48	; 0x30
 80075da:	3130      	adds	r1, #48	; 0x30
 80075dc:	7083      	strb	r3, [r0, #2]
 80075de:	70c1      	strb	r1, [r0, #3]
 80075e0:	1d03      	adds	r3, r0, #4
 80075e2:	e7f1      	b.n	80075c8 <__exponent+0x60>

080075e4 <_printf_float>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	ed2d 8b02 	vpush	{d8}
 80075ec:	b08d      	sub	sp, #52	; 0x34
 80075ee:	460c      	mov	r4, r1
 80075f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075f4:	4616      	mov	r6, r2
 80075f6:	461f      	mov	r7, r3
 80075f8:	4605      	mov	r5, r0
 80075fa:	f001 fbcb 	bl	8008d94 <_localeconv_r>
 80075fe:	f8d0 a000 	ldr.w	sl, [r0]
 8007602:	4650      	mov	r0, sl
 8007604:	f7f8 fde4 	bl	80001d0 <strlen>
 8007608:	2300      	movs	r3, #0
 800760a:	930a      	str	r3, [sp, #40]	; 0x28
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	9305      	str	r3, [sp, #20]
 8007610:	f8d8 3000 	ldr.w	r3, [r8]
 8007614:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007618:	3307      	adds	r3, #7
 800761a:	f023 0307 	bic.w	r3, r3, #7
 800761e:	f103 0208 	add.w	r2, r3, #8
 8007622:	f8c8 2000 	str.w	r2, [r8]
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800762e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007632:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007636:	9307      	str	r3, [sp, #28]
 8007638:	f8cd 8018 	str.w	r8, [sp, #24]
 800763c:	ee08 0a10 	vmov	s16, r0
 8007640:	4b9f      	ldr	r3, [pc, #636]	; (80078c0 <_printf_float+0x2dc>)
 8007642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007646:	f04f 32ff 	mov.w	r2, #4294967295
 800764a:	f7f9 fa6f 	bl	8000b2c <__aeabi_dcmpun>
 800764e:	bb88      	cbnz	r0, 80076b4 <_printf_float+0xd0>
 8007650:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007654:	4b9a      	ldr	r3, [pc, #616]	; (80078c0 <_printf_float+0x2dc>)
 8007656:	f04f 32ff 	mov.w	r2, #4294967295
 800765a:	f7f9 fa49 	bl	8000af0 <__aeabi_dcmple>
 800765e:	bb48      	cbnz	r0, 80076b4 <_printf_float+0xd0>
 8007660:	2200      	movs	r2, #0
 8007662:	2300      	movs	r3, #0
 8007664:	4640      	mov	r0, r8
 8007666:	4649      	mov	r1, r9
 8007668:	f7f9 fa38 	bl	8000adc <__aeabi_dcmplt>
 800766c:	b110      	cbz	r0, 8007674 <_printf_float+0x90>
 800766e:	232d      	movs	r3, #45	; 0x2d
 8007670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007674:	4b93      	ldr	r3, [pc, #588]	; (80078c4 <_printf_float+0x2e0>)
 8007676:	4894      	ldr	r0, [pc, #592]	; (80078c8 <_printf_float+0x2e4>)
 8007678:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800767c:	bf94      	ite	ls
 800767e:	4698      	movls	r8, r3
 8007680:	4680      	movhi	r8, r0
 8007682:	2303      	movs	r3, #3
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	9b05      	ldr	r3, [sp, #20]
 8007688:	f023 0204 	bic.w	r2, r3, #4
 800768c:	6022      	str	r2, [r4, #0]
 800768e:	f04f 0900 	mov.w	r9, #0
 8007692:	9700      	str	r7, [sp, #0]
 8007694:	4633      	mov	r3, r6
 8007696:	aa0b      	add	r2, sp, #44	; 0x2c
 8007698:	4621      	mov	r1, r4
 800769a:	4628      	mov	r0, r5
 800769c:	f000 f9d8 	bl	8007a50 <_printf_common>
 80076a0:	3001      	adds	r0, #1
 80076a2:	f040 8090 	bne.w	80077c6 <_printf_float+0x1e2>
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295
 80076aa:	b00d      	add	sp, #52	; 0x34
 80076ac:	ecbd 8b02 	vpop	{d8}
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	4642      	mov	r2, r8
 80076b6:	464b      	mov	r3, r9
 80076b8:	4640      	mov	r0, r8
 80076ba:	4649      	mov	r1, r9
 80076bc:	f7f9 fa36 	bl	8000b2c <__aeabi_dcmpun>
 80076c0:	b140      	cbz	r0, 80076d4 <_printf_float+0xf0>
 80076c2:	464b      	mov	r3, r9
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bfbc      	itt	lt
 80076c8:	232d      	movlt	r3, #45	; 0x2d
 80076ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076ce:	487f      	ldr	r0, [pc, #508]	; (80078cc <_printf_float+0x2e8>)
 80076d0:	4b7f      	ldr	r3, [pc, #508]	; (80078d0 <_printf_float+0x2ec>)
 80076d2:	e7d1      	b.n	8007678 <_printf_float+0x94>
 80076d4:	6863      	ldr	r3, [r4, #4]
 80076d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076da:	9206      	str	r2, [sp, #24]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	d13f      	bne.n	8007760 <_printf_float+0x17c>
 80076e0:	2306      	movs	r3, #6
 80076e2:	6063      	str	r3, [r4, #4]
 80076e4:	9b05      	ldr	r3, [sp, #20]
 80076e6:	6861      	ldr	r1, [r4, #4]
 80076e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076ec:	2300      	movs	r3, #0
 80076ee:	9303      	str	r3, [sp, #12]
 80076f0:	ab0a      	add	r3, sp, #40	; 0x28
 80076f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076f6:	ab09      	add	r3, sp, #36	; 0x24
 80076f8:	ec49 8b10 	vmov	d0, r8, r9
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	6022      	str	r2, [r4, #0]
 8007700:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007704:	4628      	mov	r0, r5
 8007706:	f7ff fecd 	bl	80074a4 <__cvt>
 800770a:	9b06      	ldr	r3, [sp, #24]
 800770c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800770e:	2b47      	cmp	r3, #71	; 0x47
 8007710:	4680      	mov	r8, r0
 8007712:	d108      	bne.n	8007726 <_printf_float+0x142>
 8007714:	1cc8      	adds	r0, r1, #3
 8007716:	db02      	blt.n	800771e <_printf_float+0x13a>
 8007718:	6863      	ldr	r3, [r4, #4]
 800771a:	4299      	cmp	r1, r3
 800771c:	dd41      	ble.n	80077a2 <_printf_float+0x1be>
 800771e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007722:	fa5f fb8b 	uxtb.w	fp, fp
 8007726:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800772a:	d820      	bhi.n	800776e <_printf_float+0x18a>
 800772c:	3901      	subs	r1, #1
 800772e:	465a      	mov	r2, fp
 8007730:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007734:	9109      	str	r1, [sp, #36]	; 0x24
 8007736:	f7ff ff17 	bl	8007568 <__exponent>
 800773a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773c:	1813      	adds	r3, r2, r0
 800773e:	2a01      	cmp	r2, #1
 8007740:	4681      	mov	r9, r0
 8007742:	6123      	str	r3, [r4, #16]
 8007744:	dc02      	bgt.n	800774c <_printf_float+0x168>
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	07d2      	lsls	r2, r2, #31
 800774a:	d501      	bpl.n	8007750 <_printf_float+0x16c>
 800774c:	3301      	adds	r3, #1
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007754:	2b00      	cmp	r3, #0
 8007756:	d09c      	beq.n	8007692 <_printf_float+0xae>
 8007758:	232d      	movs	r3, #45	; 0x2d
 800775a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800775e:	e798      	b.n	8007692 <_printf_float+0xae>
 8007760:	9a06      	ldr	r2, [sp, #24]
 8007762:	2a47      	cmp	r2, #71	; 0x47
 8007764:	d1be      	bne.n	80076e4 <_printf_float+0x100>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1bc      	bne.n	80076e4 <_printf_float+0x100>
 800776a:	2301      	movs	r3, #1
 800776c:	e7b9      	b.n	80076e2 <_printf_float+0xfe>
 800776e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007772:	d118      	bne.n	80077a6 <_printf_float+0x1c2>
 8007774:	2900      	cmp	r1, #0
 8007776:	6863      	ldr	r3, [r4, #4]
 8007778:	dd0b      	ble.n	8007792 <_printf_float+0x1ae>
 800777a:	6121      	str	r1, [r4, #16]
 800777c:	b913      	cbnz	r3, 8007784 <_printf_float+0x1a0>
 800777e:	6822      	ldr	r2, [r4, #0]
 8007780:	07d0      	lsls	r0, r2, #31
 8007782:	d502      	bpl.n	800778a <_printf_float+0x1a6>
 8007784:	3301      	adds	r3, #1
 8007786:	440b      	add	r3, r1
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	65a1      	str	r1, [r4, #88]	; 0x58
 800778c:	f04f 0900 	mov.w	r9, #0
 8007790:	e7de      	b.n	8007750 <_printf_float+0x16c>
 8007792:	b913      	cbnz	r3, 800779a <_printf_float+0x1b6>
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	07d2      	lsls	r2, r2, #31
 8007798:	d501      	bpl.n	800779e <_printf_float+0x1ba>
 800779a:	3302      	adds	r3, #2
 800779c:	e7f4      	b.n	8007788 <_printf_float+0x1a4>
 800779e:	2301      	movs	r3, #1
 80077a0:	e7f2      	b.n	8007788 <_printf_float+0x1a4>
 80077a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a8:	4299      	cmp	r1, r3
 80077aa:	db05      	blt.n	80077b8 <_printf_float+0x1d4>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	6121      	str	r1, [r4, #16]
 80077b0:	07d8      	lsls	r0, r3, #31
 80077b2:	d5ea      	bpl.n	800778a <_printf_float+0x1a6>
 80077b4:	1c4b      	adds	r3, r1, #1
 80077b6:	e7e7      	b.n	8007788 <_printf_float+0x1a4>
 80077b8:	2900      	cmp	r1, #0
 80077ba:	bfd4      	ite	le
 80077bc:	f1c1 0202 	rsble	r2, r1, #2
 80077c0:	2201      	movgt	r2, #1
 80077c2:	4413      	add	r3, r2
 80077c4:	e7e0      	b.n	8007788 <_printf_float+0x1a4>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	055a      	lsls	r2, r3, #21
 80077ca:	d407      	bmi.n	80077dc <_printf_float+0x1f8>
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	4642      	mov	r2, r8
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	d12c      	bne.n	8007834 <_printf_float+0x250>
 80077da:	e764      	b.n	80076a6 <_printf_float+0xc2>
 80077dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077e0:	f240 80e0 	bls.w	80079a4 <_printf_float+0x3c0>
 80077e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077e8:	2200      	movs	r2, #0
 80077ea:	2300      	movs	r3, #0
 80077ec:	f7f9 f96c 	bl	8000ac8 <__aeabi_dcmpeq>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d034      	beq.n	800785e <_printf_float+0x27a>
 80077f4:	4a37      	ldr	r2, [pc, #220]	; (80078d4 <_printf_float+0x2f0>)
 80077f6:	2301      	movs	r3, #1
 80077f8:	4631      	mov	r1, r6
 80077fa:	4628      	mov	r0, r5
 80077fc:	47b8      	blx	r7
 80077fe:	3001      	adds	r0, #1
 8007800:	f43f af51 	beq.w	80076a6 <_printf_float+0xc2>
 8007804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007808:	429a      	cmp	r2, r3
 800780a:	db02      	blt.n	8007812 <_printf_float+0x22e>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	07d8      	lsls	r0, r3, #31
 8007810:	d510      	bpl.n	8007834 <_printf_float+0x250>
 8007812:	ee18 3a10 	vmov	r3, s16
 8007816:	4652      	mov	r2, sl
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	f43f af41 	beq.w	80076a6 <_printf_float+0xc2>
 8007824:	f04f 0800 	mov.w	r8, #0
 8007828:	f104 091a 	add.w	r9, r4, #26
 800782c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782e:	3b01      	subs	r3, #1
 8007830:	4543      	cmp	r3, r8
 8007832:	dc09      	bgt.n	8007848 <_printf_float+0x264>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	079b      	lsls	r3, r3, #30
 8007838:	f100 8105 	bmi.w	8007a46 <_printf_float+0x462>
 800783c:	68e0      	ldr	r0, [r4, #12]
 800783e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007840:	4298      	cmp	r0, r3
 8007842:	bfb8      	it	lt
 8007844:	4618      	movlt	r0, r3
 8007846:	e730      	b.n	80076aa <_printf_float+0xc6>
 8007848:	2301      	movs	r3, #1
 800784a:	464a      	mov	r2, r9
 800784c:	4631      	mov	r1, r6
 800784e:	4628      	mov	r0, r5
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	f43f af27 	beq.w	80076a6 <_printf_float+0xc2>
 8007858:	f108 0801 	add.w	r8, r8, #1
 800785c:	e7e6      	b.n	800782c <_printf_float+0x248>
 800785e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	dc39      	bgt.n	80078d8 <_printf_float+0x2f4>
 8007864:	4a1b      	ldr	r2, [pc, #108]	; (80078d4 <_printf_float+0x2f0>)
 8007866:	2301      	movs	r3, #1
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f af19 	beq.w	80076a6 <_printf_float+0xc2>
 8007874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007878:	4313      	orrs	r3, r2
 800787a:	d102      	bne.n	8007882 <_printf_float+0x29e>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	07d9      	lsls	r1, r3, #31
 8007880:	d5d8      	bpl.n	8007834 <_printf_float+0x250>
 8007882:	ee18 3a10 	vmov	r3, s16
 8007886:	4652      	mov	r2, sl
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	f43f af09 	beq.w	80076a6 <_printf_float+0xc2>
 8007894:	f04f 0900 	mov.w	r9, #0
 8007898:	f104 0a1a 	add.w	sl, r4, #26
 800789c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800789e:	425b      	negs	r3, r3
 80078a0:	454b      	cmp	r3, r9
 80078a2:	dc01      	bgt.n	80078a8 <_printf_float+0x2c4>
 80078a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a6:	e792      	b.n	80077ce <_printf_float+0x1ea>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4652      	mov	r2, sl
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f aef7 	beq.w	80076a6 <_printf_float+0xc2>
 80078b8:	f109 0901 	add.w	r9, r9, #1
 80078bc:	e7ee      	b.n	800789c <_printf_float+0x2b8>
 80078be:	bf00      	nop
 80078c0:	7fefffff 	.word	0x7fefffff
 80078c4:	0800a324 	.word	0x0800a324
 80078c8:	0800a328 	.word	0x0800a328
 80078cc:	0800a330 	.word	0x0800a330
 80078d0:	0800a32c 	.word	0x0800a32c
 80078d4:	0800a334 	.word	0x0800a334
 80078d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078dc:	429a      	cmp	r2, r3
 80078de:	bfa8      	it	ge
 80078e0:	461a      	movge	r2, r3
 80078e2:	2a00      	cmp	r2, #0
 80078e4:	4691      	mov	r9, r2
 80078e6:	dc37      	bgt.n	8007958 <_printf_float+0x374>
 80078e8:	f04f 0b00 	mov.w	fp, #0
 80078ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f0:	f104 021a 	add.w	r2, r4, #26
 80078f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078f6:	9305      	str	r3, [sp, #20]
 80078f8:	eba3 0309 	sub.w	r3, r3, r9
 80078fc:	455b      	cmp	r3, fp
 80078fe:	dc33      	bgt.n	8007968 <_printf_float+0x384>
 8007900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007904:	429a      	cmp	r2, r3
 8007906:	db3b      	blt.n	8007980 <_printf_float+0x39c>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	07da      	lsls	r2, r3, #31
 800790c:	d438      	bmi.n	8007980 <_printf_float+0x39c>
 800790e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007910:	9b05      	ldr	r3, [sp, #20]
 8007912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	eba2 0901 	sub.w	r9, r2, r1
 800791a:	4599      	cmp	r9, r3
 800791c:	bfa8      	it	ge
 800791e:	4699      	movge	r9, r3
 8007920:	f1b9 0f00 	cmp.w	r9, #0
 8007924:	dc35      	bgt.n	8007992 <_printf_float+0x3ae>
 8007926:	f04f 0800 	mov.w	r8, #0
 800792a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800792e:	f104 0a1a 	add.w	sl, r4, #26
 8007932:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007936:	1a9b      	subs	r3, r3, r2
 8007938:	eba3 0309 	sub.w	r3, r3, r9
 800793c:	4543      	cmp	r3, r8
 800793e:	f77f af79 	ble.w	8007834 <_printf_float+0x250>
 8007942:	2301      	movs	r3, #1
 8007944:	4652      	mov	r2, sl
 8007946:	4631      	mov	r1, r6
 8007948:	4628      	mov	r0, r5
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	f43f aeaa 	beq.w	80076a6 <_printf_float+0xc2>
 8007952:	f108 0801 	add.w	r8, r8, #1
 8007956:	e7ec      	b.n	8007932 <_printf_float+0x34e>
 8007958:	4613      	mov	r3, r2
 800795a:	4631      	mov	r1, r6
 800795c:	4642      	mov	r2, r8
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d1c0      	bne.n	80078e8 <_printf_float+0x304>
 8007966:	e69e      	b.n	80076a6 <_printf_float+0xc2>
 8007968:	2301      	movs	r3, #1
 800796a:	4631      	mov	r1, r6
 800796c:	4628      	mov	r0, r5
 800796e:	9205      	str	r2, [sp, #20]
 8007970:	47b8      	blx	r7
 8007972:	3001      	adds	r0, #1
 8007974:	f43f ae97 	beq.w	80076a6 <_printf_float+0xc2>
 8007978:	9a05      	ldr	r2, [sp, #20]
 800797a:	f10b 0b01 	add.w	fp, fp, #1
 800797e:	e7b9      	b.n	80078f4 <_printf_float+0x310>
 8007980:	ee18 3a10 	vmov	r3, s16
 8007984:	4652      	mov	r2, sl
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	d1be      	bne.n	800790e <_printf_float+0x32a>
 8007990:	e689      	b.n	80076a6 <_printf_float+0xc2>
 8007992:	9a05      	ldr	r2, [sp, #20]
 8007994:	464b      	mov	r3, r9
 8007996:	4442      	add	r2, r8
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	d1c1      	bne.n	8007926 <_printf_float+0x342>
 80079a2:	e680      	b.n	80076a6 <_printf_float+0xc2>
 80079a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079a6:	2a01      	cmp	r2, #1
 80079a8:	dc01      	bgt.n	80079ae <_printf_float+0x3ca>
 80079aa:	07db      	lsls	r3, r3, #31
 80079ac:	d538      	bpl.n	8007a20 <_printf_float+0x43c>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4642      	mov	r2, r8
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	f43f ae74 	beq.w	80076a6 <_printf_float+0xc2>
 80079be:	ee18 3a10 	vmov	r3, s16
 80079c2:	4652      	mov	r2, sl
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b8      	blx	r7
 80079ca:	3001      	adds	r0, #1
 80079cc:	f43f ae6b 	beq.w	80076a6 <_printf_float+0xc2>
 80079d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079d4:	2200      	movs	r2, #0
 80079d6:	2300      	movs	r3, #0
 80079d8:	f7f9 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80079dc:	b9d8      	cbnz	r0, 8007a16 <_printf_float+0x432>
 80079de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e0:	f108 0201 	add.w	r2, r8, #1
 80079e4:	3b01      	subs	r3, #1
 80079e6:	4631      	mov	r1, r6
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b8      	blx	r7
 80079ec:	3001      	adds	r0, #1
 80079ee:	d10e      	bne.n	8007a0e <_printf_float+0x42a>
 80079f0:	e659      	b.n	80076a6 <_printf_float+0xc2>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4652      	mov	r2, sl
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	f43f ae52 	beq.w	80076a6 <_printf_float+0xc2>
 8007a02:	f108 0801 	add.w	r8, r8, #1
 8007a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	4543      	cmp	r3, r8
 8007a0c:	dcf1      	bgt.n	80079f2 <_printf_float+0x40e>
 8007a0e:	464b      	mov	r3, r9
 8007a10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a14:	e6dc      	b.n	80077d0 <_printf_float+0x1ec>
 8007a16:	f04f 0800 	mov.w	r8, #0
 8007a1a:	f104 0a1a 	add.w	sl, r4, #26
 8007a1e:	e7f2      	b.n	8007a06 <_printf_float+0x422>
 8007a20:	2301      	movs	r3, #1
 8007a22:	4642      	mov	r2, r8
 8007a24:	e7df      	b.n	80079e6 <_printf_float+0x402>
 8007a26:	2301      	movs	r3, #1
 8007a28:	464a      	mov	r2, r9
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	f43f ae38 	beq.w	80076a6 <_printf_float+0xc2>
 8007a36:	f108 0801 	add.w	r8, r8, #1
 8007a3a:	68e3      	ldr	r3, [r4, #12]
 8007a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a3e:	1a5b      	subs	r3, r3, r1
 8007a40:	4543      	cmp	r3, r8
 8007a42:	dcf0      	bgt.n	8007a26 <_printf_float+0x442>
 8007a44:	e6fa      	b.n	800783c <_printf_float+0x258>
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	f104 0919 	add.w	r9, r4, #25
 8007a4e:	e7f4      	b.n	8007a3a <_printf_float+0x456>

08007a50 <_printf_common>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	4616      	mov	r6, r2
 8007a56:	4699      	mov	r9, r3
 8007a58:	688a      	ldr	r2, [r1, #8]
 8007a5a:	690b      	ldr	r3, [r1, #16]
 8007a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	bfb8      	it	lt
 8007a64:	4613      	movlt	r3, r2
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	b10a      	cbz	r2, 8007a76 <_printf_common+0x26>
 8007a72:	3301      	adds	r3, #1
 8007a74:	6033      	str	r3, [r6, #0]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	0699      	lsls	r1, r3, #26
 8007a7a:	bf42      	ittt	mi
 8007a7c:	6833      	ldrmi	r3, [r6, #0]
 8007a7e:	3302      	addmi	r3, #2
 8007a80:	6033      	strmi	r3, [r6, #0]
 8007a82:	6825      	ldr	r5, [r4, #0]
 8007a84:	f015 0506 	ands.w	r5, r5, #6
 8007a88:	d106      	bne.n	8007a98 <_printf_common+0x48>
 8007a8a:	f104 0a19 	add.w	sl, r4, #25
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	6832      	ldr	r2, [r6, #0]
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dc26      	bgt.n	8007ae6 <_printf_common+0x96>
 8007a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a9c:	1e13      	subs	r3, r2, #0
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	bf18      	it	ne
 8007aa2:	2301      	movne	r3, #1
 8007aa4:	0692      	lsls	r2, r2, #26
 8007aa6:	d42b      	bmi.n	8007b00 <_printf_common+0xb0>
 8007aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aac:	4649      	mov	r1, r9
 8007aae:	4638      	mov	r0, r7
 8007ab0:	47c0      	blx	r8
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d01e      	beq.n	8007af4 <_printf_common+0xa4>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	68e5      	ldr	r5, [r4, #12]
 8007aba:	6832      	ldr	r2, [r6, #0]
 8007abc:	f003 0306 	and.w	r3, r3, #6
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	bf08      	it	eq
 8007ac4:	1aad      	subeq	r5, r5, r2
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	bf0c      	ite	eq
 8007acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad0:	2500      	movne	r5, #0
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	bfc4      	itt	gt
 8007ad6:	1a9b      	subgt	r3, r3, r2
 8007ad8:	18ed      	addgt	r5, r5, r3
 8007ada:	2600      	movs	r6, #0
 8007adc:	341a      	adds	r4, #26
 8007ade:	42b5      	cmp	r5, r6
 8007ae0:	d11a      	bne.n	8007b18 <_printf_common+0xc8>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e008      	b.n	8007af8 <_printf_common+0xa8>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4652      	mov	r2, sl
 8007aea:	4649      	mov	r1, r9
 8007aec:	4638      	mov	r0, r7
 8007aee:	47c0      	blx	r8
 8007af0:	3001      	adds	r0, #1
 8007af2:	d103      	bne.n	8007afc <_printf_common+0xac>
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295
 8007af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afc:	3501      	adds	r5, #1
 8007afe:	e7c6      	b.n	8007a8e <_printf_common+0x3e>
 8007b00:	18e1      	adds	r1, r4, r3
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	2030      	movs	r0, #48	; 0x30
 8007b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b0a:	4422      	add	r2, r4
 8007b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b14:	3302      	adds	r3, #2
 8007b16:	e7c7      	b.n	8007aa8 <_printf_common+0x58>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	4638      	mov	r0, r7
 8007b20:	47c0      	blx	r8
 8007b22:	3001      	adds	r0, #1
 8007b24:	d0e6      	beq.n	8007af4 <_printf_common+0xa4>
 8007b26:	3601      	adds	r6, #1
 8007b28:	e7d9      	b.n	8007ade <_printf_common+0x8e>
	...

08007b2c <_printf_i>:
 8007b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b30:	460c      	mov	r4, r1
 8007b32:	4691      	mov	r9, r2
 8007b34:	7e27      	ldrb	r7, [r4, #24]
 8007b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b38:	2f78      	cmp	r7, #120	; 0x78
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	469a      	mov	sl, r3
 8007b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b42:	d807      	bhi.n	8007b54 <_printf_i+0x28>
 8007b44:	2f62      	cmp	r7, #98	; 0x62
 8007b46:	d80a      	bhi.n	8007b5e <_printf_i+0x32>
 8007b48:	2f00      	cmp	r7, #0
 8007b4a:	f000 80d8 	beq.w	8007cfe <_printf_i+0x1d2>
 8007b4e:	2f58      	cmp	r7, #88	; 0x58
 8007b50:	f000 80a3 	beq.w	8007c9a <_printf_i+0x16e>
 8007b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b5c:	e03a      	b.n	8007bd4 <_printf_i+0xa8>
 8007b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b62:	2b15      	cmp	r3, #21
 8007b64:	d8f6      	bhi.n	8007b54 <_printf_i+0x28>
 8007b66:	a001      	add	r0, pc, #4	; (adr r0, 8007b6c <_printf_i+0x40>)
 8007b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b6c:	08007bc5 	.word	0x08007bc5
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007b55 	.word	0x08007b55
 8007b78:	08007b55 	.word	0x08007b55
 8007b7c:	08007b55 	.word	0x08007b55
 8007b80:	08007b55 	.word	0x08007b55
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007b55 	.word	0x08007b55
 8007b8c:	08007b55 	.word	0x08007b55
 8007b90:	08007b55 	.word	0x08007b55
 8007b94:	08007b55 	.word	0x08007b55
 8007b98:	08007ce5 	.word	0x08007ce5
 8007b9c:	08007c09 	.word	0x08007c09
 8007ba0:	08007cc7 	.word	0x08007cc7
 8007ba4:	08007b55 	.word	0x08007b55
 8007ba8:	08007b55 	.word	0x08007b55
 8007bac:	08007d07 	.word	0x08007d07
 8007bb0:	08007b55 	.word	0x08007b55
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007b55 	.word	0x08007b55
 8007bbc:	08007b55 	.word	0x08007b55
 8007bc0:	08007ccf 	.word	0x08007ccf
 8007bc4:	680b      	ldr	r3, [r1, #0]
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	600a      	str	r2, [r1, #0]
 8007bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e0a3      	b.n	8007d20 <_printf_i+0x1f4>
 8007bd8:	6825      	ldr	r5, [r4, #0]
 8007bda:	6808      	ldr	r0, [r1, #0]
 8007bdc:	062e      	lsls	r6, r5, #24
 8007bde:	f100 0304 	add.w	r3, r0, #4
 8007be2:	d50a      	bpl.n	8007bfa <_printf_i+0xce>
 8007be4:	6805      	ldr	r5, [r0, #0]
 8007be6:	600b      	str	r3, [r1, #0]
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	da03      	bge.n	8007bf4 <_printf_i+0xc8>
 8007bec:	232d      	movs	r3, #45	; 0x2d
 8007bee:	426d      	negs	r5, r5
 8007bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf4:	485e      	ldr	r0, [pc, #376]	; (8007d70 <_printf_i+0x244>)
 8007bf6:	230a      	movs	r3, #10
 8007bf8:	e019      	b.n	8007c2e <_printf_i+0x102>
 8007bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bfe:	6805      	ldr	r5, [r0, #0]
 8007c00:	600b      	str	r3, [r1, #0]
 8007c02:	bf18      	it	ne
 8007c04:	b22d      	sxthne	r5, r5
 8007c06:	e7ef      	b.n	8007be8 <_printf_i+0xbc>
 8007c08:	680b      	ldr	r3, [r1, #0]
 8007c0a:	6825      	ldr	r5, [r4, #0]
 8007c0c:	1d18      	adds	r0, r3, #4
 8007c0e:	6008      	str	r0, [r1, #0]
 8007c10:	0628      	lsls	r0, r5, #24
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0xec>
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <_printf_i+0xf2>
 8007c18:	0669      	lsls	r1, r5, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0xe8>
 8007c1c:	881d      	ldrh	r5, [r3, #0]
 8007c1e:	4854      	ldr	r0, [pc, #336]	; (8007d70 <_printf_i+0x244>)
 8007c20:	2f6f      	cmp	r7, #111	; 0x6f
 8007c22:	bf0c      	ite	eq
 8007c24:	2308      	moveq	r3, #8
 8007c26:	230a      	movne	r3, #10
 8007c28:	2100      	movs	r1, #0
 8007c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c2e:	6866      	ldr	r6, [r4, #4]
 8007c30:	60a6      	str	r6, [r4, #8]
 8007c32:	2e00      	cmp	r6, #0
 8007c34:	bfa2      	ittt	ge
 8007c36:	6821      	ldrge	r1, [r4, #0]
 8007c38:	f021 0104 	bicge.w	r1, r1, #4
 8007c3c:	6021      	strge	r1, [r4, #0]
 8007c3e:	b90d      	cbnz	r5, 8007c44 <_printf_i+0x118>
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	d04d      	beq.n	8007ce0 <_printf_i+0x1b4>
 8007c44:	4616      	mov	r6, r2
 8007c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c4e:	5dc7      	ldrb	r7, [r0, r7]
 8007c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c54:	462f      	mov	r7, r5
 8007c56:	42bb      	cmp	r3, r7
 8007c58:	460d      	mov	r5, r1
 8007c5a:	d9f4      	bls.n	8007c46 <_printf_i+0x11a>
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d10b      	bne.n	8007c78 <_printf_i+0x14c>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	07df      	lsls	r7, r3, #31
 8007c64:	d508      	bpl.n	8007c78 <_printf_i+0x14c>
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	6861      	ldr	r1, [r4, #4]
 8007c6a:	4299      	cmp	r1, r3
 8007c6c:	bfde      	ittt	le
 8007c6e:	2330      	movle	r3, #48	; 0x30
 8007c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c78:	1b92      	subs	r2, r2, r6
 8007c7a:	6122      	str	r2, [r4, #16]
 8007c7c:	f8cd a000 	str.w	sl, [sp]
 8007c80:	464b      	mov	r3, r9
 8007c82:	aa03      	add	r2, sp, #12
 8007c84:	4621      	mov	r1, r4
 8007c86:	4640      	mov	r0, r8
 8007c88:	f7ff fee2 	bl	8007a50 <_printf_common>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d14c      	bne.n	8007d2a <_printf_i+0x1fe>
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	b004      	add	sp, #16
 8007c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9a:	4835      	ldr	r0, [pc, #212]	; (8007d70 <_printf_i+0x244>)
 8007c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	680e      	ldr	r6, [r1, #0]
 8007ca4:	061f      	lsls	r7, r3, #24
 8007ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007caa:	600e      	str	r6, [r1, #0]
 8007cac:	d514      	bpl.n	8007cd8 <_printf_i+0x1ac>
 8007cae:	07d9      	lsls	r1, r3, #31
 8007cb0:	bf44      	itt	mi
 8007cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007cb6:	6023      	strmi	r3, [r4, #0]
 8007cb8:	b91d      	cbnz	r5, 8007cc2 <_printf_i+0x196>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	f023 0320 	bic.w	r3, r3, #32
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	2310      	movs	r3, #16
 8007cc4:	e7b0      	b.n	8007c28 <_printf_i+0xfc>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	f043 0320 	orr.w	r3, r3, #32
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	2378      	movs	r3, #120	; 0x78
 8007cd0:	4828      	ldr	r0, [pc, #160]	; (8007d74 <_printf_i+0x248>)
 8007cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cd6:	e7e3      	b.n	8007ca0 <_printf_i+0x174>
 8007cd8:	065e      	lsls	r6, r3, #25
 8007cda:	bf48      	it	mi
 8007cdc:	b2ad      	uxthmi	r5, r5
 8007cde:	e7e6      	b.n	8007cae <_printf_i+0x182>
 8007ce0:	4616      	mov	r6, r2
 8007ce2:	e7bb      	b.n	8007c5c <_printf_i+0x130>
 8007ce4:	680b      	ldr	r3, [r1, #0]
 8007ce6:	6826      	ldr	r6, [r4, #0]
 8007ce8:	6960      	ldr	r0, [r4, #20]
 8007cea:	1d1d      	adds	r5, r3, #4
 8007cec:	600d      	str	r5, [r1, #0]
 8007cee:	0635      	lsls	r5, r6, #24
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_i+0x1cc>
 8007cf4:	6018      	str	r0, [r3, #0]
 8007cf6:	e002      	b.n	8007cfe <_printf_i+0x1d2>
 8007cf8:	0671      	lsls	r1, r6, #25
 8007cfa:	d5fb      	bpl.n	8007cf4 <_printf_i+0x1c8>
 8007cfc:	8018      	strh	r0, [r3, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6123      	str	r3, [r4, #16]
 8007d02:	4616      	mov	r6, r2
 8007d04:	e7ba      	b.n	8007c7c <_printf_i+0x150>
 8007d06:	680b      	ldr	r3, [r1, #0]
 8007d08:	1d1a      	adds	r2, r3, #4
 8007d0a:	600a      	str	r2, [r1, #0]
 8007d0c:	681e      	ldr	r6, [r3, #0]
 8007d0e:	6862      	ldr	r2, [r4, #4]
 8007d10:	2100      	movs	r1, #0
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7f8 fa64 	bl	80001e0 <memchr>
 8007d18:	b108      	cbz	r0, 8007d1e <_printf_i+0x1f2>
 8007d1a:	1b80      	subs	r0, r0, r6
 8007d1c:	6060      	str	r0, [r4, #4]
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	2300      	movs	r3, #0
 8007d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d28:	e7a8      	b.n	8007c7c <_printf_i+0x150>
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4640      	mov	r0, r8
 8007d32:	47d0      	blx	sl
 8007d34:	3001      	adds	r0, #1
 8007d36:	d0ab      	beq.n	8007c90 <_printf_i+0x164>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	079b      	lsls	r3, r3, #30
 8007d3c:	d413      	bmi.n	8007d66 <_printf_i+0x23a>
 8007d3e:	68e0      	ldr	r0, [r4, #12]
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	4298      	cmp	r0, r3
 8007d44:	bfb8      	it	lt
 8007d46:	4618      	movlt	r0, r3
 8007d48:	e7a4      	b.n	8007c94 <_printf_i+0x168>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	4649      	mov	r1, r9
 8007d50:	4640      	mov	r0, r8
 8007d52:	47d0      	blx	sl
 8007d54:	3001      	adds	r0, #1
 8007d56:	d09b      	beq.n	8007c90 <_printf_i+0x164>
 8007d58:	3501      	adds	r5, #1
 8007d5a:	68e3      	ldr	r3, [r4, #12]
 8007d5c:	9903      	ldr	r1, [sp, #12]
 8007d5e:	1a5b      	subs	r3, r3, r1
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	dcf2      	bgt.n	8007d4a <_printf_i+0x21e>
 8007d64:	e7eb      	b.n	8007d3e <_printf_i+0x212>
 8007d66:	2500      	movs	r5, #0
 8007d68:	f104 0619 	add.w	r6, r4, #25
 8007d6c:	e7f5      	b.n	8007d5a <_printf_i+0x22e>
 8007d6e:	bf00      	nop
 8007d70:	0800a336 	.word	0x0800a336
 8007d74:	0800a347 	.word	0x0800a347

08007d78 <iprintf>:
 8007d78:	b40f      	push	{r0, r1, r2, r3}
 8007d7a:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <iprintf+0x2c>)
 8007d7c:	b513      	push	{r0, r1, r4, lr}
 8007d7e:	681c      	ldr	r4, [r3, #0]
 8007d80:	b124      	cbz	r4, 8007d8c <iprintf+0x14>
 8007d82:	69a3      	ldr	r3, [r4, #24]
 8007d84:	b913      	cbnz	r3, 8007d8c <iprintf+0x14>
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 ff66 	bl	8008c58 <__sinit>
 8007d8c:	ab05      	add	r3, sp, #20
 8007d8e:	9a04      	ldr	r2, [sp, #16]
 8007d90:	68a1      	ldr	r1, [r4, #8]
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	4620      	mov	r0, r4
 8007d96:	f001 fd31 	bl	80097fc <_vfiprintf_r>
 8007d9a:	b002      	add	sp, #8
 8007d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da0:	b004      	add	sp, #16
 8007da2:	4770      	bx	lr
 8007da4:	20000028 	.word	0x20000028

08007da8 <_sbrk_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	; (8007dc4 <_sbrk_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7f9 fc1a 	bl	80015ec <_sbrk>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_sbrk_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_sbrk_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20000394 	.word	0x20000394

08007dc8 <_raise_r>:
 8007dc8:	291f      	cmp	r1, #31
 8007dca:	b538      	push	{r3, r4, r5, lr}
 8007dcc:	4604      	mov	r4, r0
 8007dce:	460d      	mov	r5, r1
 8007dd0:	d904      	bls.n	8007ddc <_raise_r+0x14>
 8007dd2:	2316      	movs	r3, #22
 8007dd4:	6003      	str	r3, [r0, #0]
 8007dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007dde:	b112      	cbz	r2, 8007de6 <_raise_r+0x1e>
 8007de0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007de4:	b94b      	cbnz	r3, 8007dfa <_raise_r+0x32>
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 f830 	bl	8007e4c <_getpid_r>
 8007dec:	462a      	mov	r2, r5
 8007dee:	4601      	mov	r1, r0
 8007df0:	4620      	mov	r0, r4
 8007df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007df6:	f000 b817 	b.w	8007e28 <_kill_r>
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d00a      	beq.n	8007e14 <_raise_r+0x4c>
 8007dfe:	1c59      	adds	r1, r3, #1
 8007e00:	d103      	bne.n	8007e0a <_raise_r+0x42>
 8007e02:	2316      	movs	r3, #22
 8007e04:	6003      	str	r3, [r0, #0]
 8007e06:	2001      	movs	r0, #1
 8007e08:	e7e7      	b.n	8007dda <_raise_r+0x12>
 8007e0a:	2400      	movs	r4, #0
 8007e0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e10:	4628      	mov	r0, r5
 8007e12:	4798      	blx	r3
 8007e14:	2000      	movs	r0, #0
 8007e16:	e7e0      	b.n	8007dda <_raise_r+0x12>

08007e18 <raise>:
 8007e18:	4b02      	ldr	r3, [pc, #8]	; (8007e24 <raise+0xc>)
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	f7ff bfd3 	b.w	8007dc8 <_raise_r>
 8007e22:	bf00      	nop
 8007e24:	20000028 	.word	0x20000028

08007e28 <_kill_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4d07      	ldr	r5, [pc, #28]	; (8007e48 <_kill_r+0x20>)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	4611      	mov	r1, r2
 8007e34:	602b      	str	r3, [r5, #0]
 8007e36:	f7f9 fb51 	bl	80014dc <_kill>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	d102      	bne.n	8007e44 <_kill_r+0x1c>
 8007e3e:	682b      	ldr	r3, [r5, #0]
 8007e40:	b103      	cbz	r3, 8007e44 <_kill_r+0x1c>
 8007e42:	6023      	str	r3, [r4, #0]
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	bf00      	nop
 8007e48:	20000394 	.word	0x20000394

08007e4c <_getpid_r>:
 8007e4c:	f7f9 bb3e 	b.w	80014cc <_getpid>

08007e50 <sniprintf>:
 8007e50:	b40c      	push	{r2, r3}
 8007e52:	b530      	push	{r4, r5, lr}
 8007e54:	4b17      	ldr	r3, [pc, #92]	; (8007eb4 <sniprintf+0x64>)
 8007e56:	1e0c      	subs	r4, r1, #0
 8007e58:	681d      	ldr	r5, [r3, #0]
 8007e5a:	b09d      	sub	sp, #116	; 0x74
 8007e5c:	da08      	bge.n	8007e70 <sniprintf+0x20>
 8007e5e:	238b      	movs	r3, #139	; 0x8b
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	f04f 30ff 	mov.w	r0, #4294967295
 8007e66:	b01d      	add	sp, #116	; 0x74
 8007e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e6c:	b002      	add	sp, #8
 8007e6e:	4770      	bx	lr
 8007e70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e78:	bf14      	ite	ne
 8007e7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e7e:	4623      	moveq	r3, r4
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	9307      	str	r3, [sp, #28]
 8007e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e88:	9002      	str	r0, [sp, #8]
 8007e8a:	9006      	str	r0, [sp, #24]
 8007e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e92:	ab21      	add	r3, sp, #132	; 0x84
 8007e94:	a902      	add	r1, sp, #8
 8007e96:	4628      	mov	r0, r5
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f001 fb85 	bl	80095a8 <_svfiprintf_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	bfbc      	itt	lt
 8007ea2:	238b      	movlt	r3, #139	; 0x8b
 8007ea4:	602b      	strlt	r3, [r5, #0]
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	d0dd      	beq.n	8007e66 <sniprintf+0x16>
 8007eaa:	9b02      	ldr	r3, [sp, #8]
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	e7d9      	b.n	8007e66 <sniprintf+0x16>
 8007eb2:	bf00      	nop
 8007eb4:	20000028 	.word	0x20000028

08007eb8 <quorem>:
 8007eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	6903      	ldr	r3, [r0, #16]
 8007ebe:	690c      	ldr	r4, [r1, #16]
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	4607      	mov	r7, r0
 8007ec4:	f2c0 8081 	blt.w	8007fca <quorem+0x112>
 8007ec8:	3c01      	subs	r4, #1
 8007eca:	f101 0814 	add.w	r8, r1, #20
 8007ece:	f100 0514 	add.w	r5, r0, #20
 8007ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007edc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ee8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007eec:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ef0:	d331      	bcc.n	8007f56 <quorem+0x9e>
 8007ef2:	f04f 0e00 	mov.w	lr, #0
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	46ac      	mov	ip, r5
 8007efa:	46f2      	mov	sl, lr
 8007efc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f00:	b293      	uxth	r3, r2
 8007f02:	fb06 e303 	mla	r3, r6, r3, lr
 8007f06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	ebaa 0303 	sub.w	r3, sl, r3
 8007f10:	0c12      	lsrs	r2, r2, #16
 8007f12:	f8dc a000 	ldr.w	sl, [ip]
 8007f16:	fb06 e202 	mla	r2, r6, r2, lr
 8007f1a:	fa13 f38a 	uxtah	r3, r3, sl
 8007f1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f22:	fa1f fa82 	uxth.w	sl, r2
 8007f26:	f8dc 2000 	ldr.w	r2, [ip]
 8007f2a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007f2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f38:	4581      	cmp	r9, r0
 8007f3a:	f84c 3b04 	str.w	r3, [ip], #4
 8007f3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f42:	d2db      	bcs.n	8007efc <quorem+0x44>
 8007f44:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f48:	b92b      	cbnz	r3, 8007f56 <quorem+0x9e>
 8007f4a:	9b01      	ldr	r3, [sp, #4]
 8007f4c:	3b04      	subs	r3, #4
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	d32e      	bcc.n	8007fb2 <quorem+0xfa>
 8007f54:	613c      	str	r4, [r7, #16]
 8007f56:	4638      	mov	r0, r7
 8007f58:	f001 f9bc 	bl	80092d4 <__mcmp>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	db24      	blt.n	8007faa <quorem+0xf2>
 8007f60:	3601      	adds	r6, #1
 8007f62:	4628      	mov	r0, r5
 8007f64:	f04f 0c00 	mov.w	ip, #0
 8007f68:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f6c:	f8d0 e000 	ldr.w	lr, [r0]
 8007f70:	b293      	uxth	r3, r2
 8007f72:	ebac 0303 	sub.w	r3, ip, r3
 8007f76:	0c12      	lsrs	r2, r2, #16
 8007f78:	fa13 f38e 	uxtah	r3, r3, lr
 8007f7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f8a:	45c1      	cmp	r9, r8
 8007f8c:	f840 3b04 	str.w	r3, [r0], #4
 8007f90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f94:	d2e8      	bcs.n	8007f68 <quorem+0xb0>
 8007f96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f9e:	b922      	cbnz	r2, 8007faa <quorem+0xf2>
 8007fa0:	3b04      	subs	r3, #4
 8007fa2:	429d      	cmp	r5, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	d30a      	bcc.n	8007fbe <quorem+0x106>
 8007fa8:	613c      	str	r4, [r7, #16]
 8007faa:	4630      	mov	r0, r6
 8007fac:	b003      	add	sp, #12
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb2:	6812      	ldr	r2, [r2, #0]
 8007fb4:	3b04      	subs	r3, #4
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d1cc      	bne.n	8007f54 <quorem+0x9c>
 8007fba:	3c01      	subs	r4, #1
 8007fbc:	e7c7      	b.n	8007f4e <quorem+0x96>
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	3b04      	subs	r3, #4
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <quorem+0xf0>
 8007fc6:	3c01      	subs	r4, #1
 8007fc8:	e7eb      	b.n	8007fa2 <quorem+0xea>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e7ee      	b.n	8007fac <quorem+0xf4>
	...

08007fd0 <_dtoa_r>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	ed2d 8b02 	vpush	{d8}
 8007fd8:	ec57 6b10 	vmov	r6, r7, d0
 8007fdc:	b095      	sub	sp, #84	; 0x54
 8007fde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fe0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fe4:	9105      	str	r1, [sp, #20]
 8007fe6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007fea:	4604      	mov	r4, r0
 8007fec:	9209      	str	r2, [sp, #36]	; 0x24
 8007fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ff0:	b975      	cbnz	r5, 8008010 <_dtoa_r+0x40>
 8007ff2:	2010      	movs	r0, #16
 8007ff4:	f7ff f99c 	bl	8007330 <malloc>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6260      	str	r0, [r4, #36]	; 0x24
 8007ffc:	b920      	cbnz	r0, 8008008 <_dtoa_r+0x38>
 8007ffe:	4bb2      	ldr	r3, [pc, #712]	; (80082c8 <_dtoa_r+0x2f8>)
 8008000:	21ea      	movs	r1, #234	; 0xea
 8008002:	48b2      	ldr	r0, [pc, #712]	; (80082cc <_dtoa_r+0x2fc>)
 8008004:	f001 fe40 	bl	8009c88 <__assert_func>
 8008008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800800c:	6005      	str	r5, [r0, #0]
 800800e:	60c5      	str	r5, [r0, #12]
 8008010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	b151      	cbz	r1, 800802c <_dtoa_r+0x5c>
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	604a      	str	r2, [r1, #4]
 800801a:	2301      	movs	r3, #1
 800801c:	4093      	lsls	r3, r2
 800801e:	608b      	str	r3, [r1, #8]
 8008020:	4620      	mov	r0, r4
 8008022:	f000 ff19 	bl	8008e58 <_Bfree>
 8008026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	1e3b      	subs	r3, r7, #0
 800802e:	bfb9      	ittee	lt
 8008030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008034:	9303      	strlt	r3, [sp, #12]
 8008036:	2300      	movge	r3, #0
 8008038:	f8c8 3000 	strge.w	r3, [r8]
 800803c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008040:	4ba3      	ldr	r3, [pc, #652]	; (80082d0 <_dtoa_r+0x300>)
 8008042:	bfbc      	itt	lt
 8008044:	2201      	movlt	r2, #1
 8008046:	f8c8 2000 	strlt.w	r2, [r8]
 800804a:	ea33 0309 	bics.w	r3, r3, r9
 800804e:	d11b      	bne.n	8008088 <_dtoa_r+0xb8>
 8008050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008052:	f242 730f 	movw	r3, #9999	; 0x270f
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800805c:	4333      	orrs	r3, r6
 800805e:	f000 857a 	beq.w	8008b56 <_dtoa_r+0xb86>
 8008062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008064:	b963      	cbnz	r3, 8008080 <_dtoa_r+0xb0>
 8008066:	4b9b      	ldr	r3, [pc, #620]	; (80082d4 <_dtoa_r+0x304>)
 8008068:	e024      	b.n	80080b4 <_dtoa_r+0xe4>
 800806a:	4b9b      	ldr	r3, [pc, #620]	; (80082d8 <_dtoa_r+0x308>)
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	3308      	adds	r3, #8
 8008070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	9800      	ldr	r0, [sp, #0]
 8008076:	b015      	add	sp, #84	; 0x54
 8008078:	ecbd 8b02 	vpop	{d8}
 800807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008080:	4b94      	ldr	r3, [pc, #592]	; (80082d4 <_dtoa_r+0x304>)
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	3303      	adds	r3, #3
 8008086:	e7f3      	b.n	8008070 <_dtoa_r+0xa0>
 8008088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	ec51 0b17 	vmov	r0, r1, d7
 8008092:	2300      	movs	r3, #0
 8008094:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008098:	f7f8 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800809c:	4680      	mov	r8, r0
 800809e:	b158      	cbz	r0, 80080b8 <_dtoa_r+0xe8>
 80080a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080a2:	2301      	movs	r3, #1
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8551 	beq.w	8008b50 <_dtoa_r+0xb80>
 80080ae:	488b      	ldr	r0, [pc, #556]	; (80082dc <_dtoa_r+0x30c>)
 80080b0:	6018      	str	r0, [r3, #0]
 80080b2:	1e43      	subs	r3, r0, #1
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	e7dd      	b.n	8008074 <_dtoa_r+0xa4>
 80080b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80080bc:	aa12      	add	r2, sp, #72	; 0x48
 80080be:	a913      	add	r1, sp, #76	; 0x4c
 80080c0:	4620      	mov	r0, r4
 80080c2:	f001 f9ab 	bl	800941c <__d2b>
 80080c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080ca:	4683      	mov	fp, r0
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	d07c      	beq.n	80081ca <_dtoa_r+0x1fa>
 80080d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80080d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80080de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080ea:	4b7d      	ldr	r3, [pc, #500]	; (80082e0 <_dtoa_r+0x310>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	4630      	mov	r0, r6
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 f8c9 	bl	8000288 <__aeabi_dsub>
 80080f6:	a36e      	add	r3, pc, #440	; (adr r3, 80082b0 <_dtoa_r+0x2e0>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f7f8 fa7c 	bl	80005f8 <__aeabi_dmul>
 8008100:	a36d      	add	r3, pc, #436	; (adr r3, 80082b8 <_dtoa_r+0x2e8>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 f8c1 	bl	800028c <__adddf3>
 800810a:	4606      	mov	r6, r0
 800810c:	4628      	mov	r0, r5
 800810e:	460f      	mov	r7, r1
 8008110:	f7f8 fa08 	bl	8000524 <__aeabi_i2d>
 8008114:	a36a      	add	r3, pc, #424	; (adr r3, 80082c0 <_dtoa_r+0x2f0>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 fa6d 	bl	80005f8 <__aeabi_dmul>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4630      	mov	r0, r6
 8008124:	4639      	mov	r1, r7
 8008126:	f7f8 f8b1 	bl	800028c <__adddf3>
 800812a:	4606      	mov	r6, r0
 800812c:	460f      	mov	r7, r1
 800812e:	f7f8 fd13 	bl	8000b58 <__aeabi_d2iz>
 8008132:	2200      	movs	r2, #0
 8008134:	4682      	mov	sl, r0
 8008136:	2300      	movs	r3, #0
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 fcce 	bl	8000adc <__aeabi_dcmplt>
 8008140:	b148      	cbz	r0, 8008156 <_dtoa_r+0x186>
 8008142:	4650      	mov	r0, sl
 8008144:	f7f8 f9ee 	bl	8000524 <__aeabi_i2d>
 8008148:	4632      	mov	r2, r6
 800814a:	463b      	mov	r3, r7
 800814c:	f7f8 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008150:	b908      	cbnz	r0, 8008156 <_dtoa_r+0x186>
 8008152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008156:	f1ba 0f16 	cmp.w	sl, #22
 800815a:	d854      	bhi.n	8008206 <_dtoa_r+0x236>
 800815c:	4b61      	ldr	r3, [pc, #388]	; (80082e4 <_dtoa_r+0x314>)
 800815e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800816a:	f7f8 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800816e:	2800      	cmp	r0, #0
 8008170:	d04b      	beq.n	800820a <_dtoa_r+0x23a>
 8008172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008176:	2300      	movs	r3, #0
 8008178:	930e      	str	r3, [sp, #56]	; 0x38
 800817a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800817c:	1b5d      	subs	r5, r3, r5
 800817e:	1e6b      	subs	r3, r5, #1
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	bf43      	ittte	mi
 8008184:	2300      	movmi	r3, #0
 8008186:	f1c5 0801 	rsbmi	r8, r5, #1
 800818a:	9304      	strmi	r3, [sp, #16]
 800818c:	f04f 0800 	movpl.w	r8, #0
 8008190:	f1ba 0f00 	cmp.w	sl, #0
 8008194:	db3b      	blt.n	800820e <_dtoa_r+0x23e>
 8008196:	9b04      	ldr	r3, [sp, #16]
 8008198:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800819c:	4453      	add	r3, sl
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	2300      	movs	r3, #0
 80081a2:	9306      	str	r3, [sp, #24]
 80081a4:	9b05      	ldr	r3, [sp, #20]
 80081a6:	2b09      	cmp	r3, #9
 80081a8:	d869      	bhi.n	800827e <_dtoa_r+0x2ae>
 80081aa:	2b05      	cmp	r3, #5
 80081ac:	bfc4      	itt	gt
 80081ae:	3b04      	subgt	r3, #4
 80081b0:	9305      	strgt	r3, [sp, #20]
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	f1a3 0302 	sub.w	r3, r3, #2
 80081b8:	bfcc      	ite	gt
 80081ba:	2500      	movgt	r5, #0
 80081bc:	2501      	movle	r5, #1
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d869      	bhi.n	8008296 <_dtoa_r+0x2c6>
 80081c2:	e8df f003 	tbb	[pc, r3]
 80081c6:	4e2c      	.short	0x4e2c
 80081c8:	5a4c      	.short	0x5a4c
 80081ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80081ce:	441d      	add	r5, r3
 80081d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	bfc1      	itttt	gt
 80081d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80081e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081e8:	bfda      	itte	le
 80081ea:	f1c3 0320 	rsble	r3, r3, #32
 80081ee:	fa06 f003 	lslle.w	r0, r6, r3
 80081f2:	4318      	orrgt	r0, r3
 80081f4:	f7f8 f986 	bl	8000504 <__aeabi_ui2d>
 80081f8:	2301      	movs	r3, #1
 80081fa:	4606      	mov	r6, r0
 80081fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008200:	3d01      	subs	r5, #1
 8008202:	9310      	str	r3, [sp, #64]	; 0x40
 8008204:	e771      	b.n	80080ea <_dtoa_r+0x11a>
 8008206:	2301      	movs	r3, #1
 8008208:	e7b6      	b.n	8008178 <_dtoa_r+0x1a8>
 800820a:	900e      	str	r0, [sp, #56]	; 0x38
 800820c:	e7b5      	b.n	800817a <_dtoa_r+0x1aa>
 800820e:	f1ca 0300 	rsb	r3, sl, #0
 8008212:	9306      	str	r3, [sp, #24]
 8008214:	2300      	movs	r3, #0
 8008216:	eba8 080a 	sub.w	r8, r8, sl
 800821a:	930d      	str	r3, [sp, #52]	; 0x34
 800821c:	e7c2      	b.n	80081a4 <_dtoa_r+0x1d4>
 800821e:	2300      	movs	r3, #0
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	dc39      	bgt.n	800829c <_dtoa_r+0x2cc>
 8008228:	f04f 0901 	mov.w	r9, #1
 800822c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008230:	464b      	mov	r3, r9
 8008232:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008236:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008238:	2200      	movs	r2, #0
 800823a:	6042      	str	r2, [r0, #4]
 800823c:	2204      	movs	r2, #4
 800823e:	f102 0614 	add.w	r6, r2, #20
 8008242:	429e      	cmp	r6, r3
 8008244:	6841      	ldr	r1, [r0, #4]
 8008246:	d92f      	bls.n	80082a8 <_dtoa_r+0x2d8>
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fdc5 	bl	8008dd8 <_Balloc>
 800824e:	9000      	str	r0, [sp, #0]
 8008250:	2800      	cmp	r0, #0
 8008252:	d14b      	bne.n	80082ec <_dtoa_r+0x31c>
 8008254:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <_dtoa_r+0x318>)
 8008256:	4602      	mov	r2, r0
 8008258:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800825c:	e6d1      	b.n	8008002 <_dtoa_r+0x32>
 800825e:	2301      	movs	r3, #1
 8008260:	e7de      	b.n	8008220 <_dtoa_r+0x250>
 8008262:	2300      	movs	r3, #0
 8008264:	9308      	str	r3, [sp, #32]
 8008266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008268:	eb0a 0903 	add.w	r9, sl, r3
 800826c:	f109 0301 	add.w	r3, r9, #1
 8008270:	2b01      	cmp	r3, #1
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	bfb8      	it	lt
 8008276:	2301      	movlt	r3, #1
 8008278:	e7dd      	b.n	8008236 <_dtoa_r+0x266>
 800827a:	2301      	movs	r3, #1
 800827c:	e7f2      	b.n	8008264 <_dtoa_r+0x294>
 800827e:	2501      	movs	r5, #1
 8008280:	2300      	movs	r3, #0
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	9508      	str	r5, [sp, #32]
 8008286:	f04f 39ff 	mov.w	r9, #4294967295
 800828a:	2200      	movs	r2, #0
 800828c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008290:	2312      	movs	r3, #18
 8008292:	9209      	str	r2, [sp, #36]	; 0x24
 8008294:	e7cf      	b.n	8008236 <_dtoa_r+0x266>
 8008296:	2301      	movs	r3, #1
 8008298:	9308      	str	r3, [sp, #32]
 800829a:	e7f4      	b.n	8008286 <_dtoa_r+0x2b6>
 800829c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80082a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80082a4:	464b      	mov	r3, r9
 80082a6:	e7c6      	b.n	8008236 <_dtoa_r+0x266>
 80082a8:	3101      	adds	r1, #1
 80082aa:	6041      	str	r1, [r0, #4]
 80082ac:	0052      	lsls	r2, r2, #1
 80082ae:	e7c6      	b.n	800823e <_dtoa_r+0x26e>
 80082b0:	636f4361 	.word	0x636f4361
 80082b4:	3fd287a7 	.word	0x3fd287a7
 80082b8:	8b60c8b3 	.word	0x8b60c8b3
 80082bc:	3fc68a28 	.word	0x3fc68a28
 80082c0:	509f79fb 	.word	0x509f79fb
 80082c4:	3fd34413 	.word	0x3fd34413
 80082c8:	0800a365 	.word	0x0800a365
 80082cc:	0800a37c 	.word	0x0800a37c
 80082d0:	7ff00000 	.word	0x7ff00000
 80082d4:	0800a361 	.word	0x0800a361
 80082d8:	0800a358 	.word	0x0800a358
 80082dc:	0800a335 	.word	0x0800a335
 80082e0:	3ff80000 	.word	0x3ff80000
 80082e4:	0800a4d8 	.word	0x0800a4d8
 80082e8:	0800a3db 	.word	0x0800a3db
 80082ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ee:	9a00      	ldr	r2, [sp, #0]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	9b01      	ldr	r3, [sp, #4]
 80082f4:	2b0e      	cmp	r3, #14
 80082f6:	f200 80ad 	bhi.w	8008454 <_dtoa_r+0x484>
 80082fa:	2d00      	cmp	r5, #0
 80082fc:	f000 80aa 	beq.w	8008454 <_dtoa_r+0x484>
 8008300:	f1ba 0f00 	cmp.w	sl, #0
 8008304:	dd36      	ble.n	8008374 <_dtoa_r+0x3a4>
 8008306:	4ac3      	ldr	r2, [pc, #780]	; (8008614 <_dtoa_r+0x644>)
 8008308:	f00a 030f 	and.w	r3, sl, #15
 800830c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008310:	ed93 7b00 	vldr	d7, [r3]
 8008314:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008318:	ea4f 172a 	mov.w	r7, sl, asr #4
 800831c:	eeb0 8a47 	vmov.f32	s16, s14
 8008320:	eef0 8a67 	vmov.f32	s17, s15
 8008324:	d016      	beq.n	8008354 <_dtoa_r+0x384>
 8008326:	4bbc      	ldr	r3, [pc, #752]	; (8008618 <_dtoa_r+0x648>)
 8008328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800832c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008330:	f7f8 fa8c 	bl	800084c <__aeabi_ddiv>
 8008334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008338:	f007 070f 	and.w	r7, r7, #15
 800833c:	2503      	movs	r5, #3
 800833e:	4eb6      	ldr	r6, [pc, #728]	; (8008618 <_dtoa_r+0x648>)
 8008340:	b957      	cbnz	r7, 8008358 <_dtoa_r+0x388>
 8008342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008346:	ec53 2b18 	vmov	r2, r3, d8
 800834a:	f7f8 fa7f 	bl	800084c <__aeabi_ddiv>
 800834e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008352:	e029      	b.n	80083a8 <_dtoa_r+0x3d8>
 8008354:	2502      	movs	r5, #2
 8008356:	e7f2      	b.n	800833e <_dtoa_r+0x36e>
 8008358:	07f9      	lsls	r1, r7, #31
 800835a:	d508      	bpl.n	800836e <_dtoa_r+0x39e>
 800835c:	ec51 0b18 	vmov	r0, r1, d8
 8008360:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008364:	f7f8 f948 	bl	80005f8 <__aeabi_dmul>
 8008368:	ec41 0b18 	vmov	d8, r0, r1
 800836c:	3501      	adds	r5, #1
 800836e:	107f      	asrs	r7, r7, #1
 8008370:	3608      	adds	r6, #8
 8008372:	e7e5      	b.n	8008340 <_dtoa_r+0x370>
 8008374:	f000 80a6 	beq.w	80084c4 <_dtoa_r+0x4f4>
 8008378:	f1ca 0600 	rsb	r6, sl, #0
 800837c:	4ba5      	ldr	r3, [pc, #660]	; (8008614 <_dtoa_r+0x644>)
 800837e:	4fa6      	ldr	r7, [pc, #664]	; (8008618 <_dtoa_r+0x648>)
 8008380:	f006 020f 	and.w	r2, r6, #15
 8008384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008390:	f7f8 f932 	bl	80005f8 <__aeabi_dmul>
 8008394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008398:	1136      	asrs	r6, r6, #4
 800839a:	2300      	movs	r3, #0
 800839c:	2502      	movs	r5, #2
 800839e:	2e00      	cmp	r6, #0
 80083a0:	f040 8085 	bne.w	80084ae <_dtoa_r+0x4de>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1d2      	bne.n	800834e <_dtoa_r+0x37e>
 80083a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 808c 	beq.w	80084c8 <_dtoa_r+0x4f8>
 80083b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083b4:	4b99      	ldr	r3, [pc, #612]	; (800861c <_dtoa_r+0x64c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	4630      	mov	r0, r6
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f8 fb8e 	bl	8000adc <__aeabi_dcmplt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	f000 8081 	beq.w	80084c8 <_dtoa_r+0x4f8>
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d07d      	beq.n	80084c8 <_dtoa_r+0x4f8>
 80083cc:	f1b9 0f00 	cmp.w	r9, #0
 80083d0:	dd3c      	ble.n	800844c <_dtoa_r+0x47c>
 80083d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80083d6:	9307      	str	r3, [sp, #28]
 80083d8:	2200      	movs	r2, #0
 80083da:	4b91      	ldr	r3, [pc, #580]	; (8008620 <_dtoa_r+0x650>)
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 f90a 	bl	80005f8 <__aeabi_dmul>
 80083e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083e8:	3501      	adds	r5, #1
 80083ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80083ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083f2:	4628      	mov	r0, r5
 80083f4:	f7f8 f896 	bl	8000524 <__aeabi_i2d>
 80083f8:	4632      	mov	r2, r6
 80083fa:	463b      	mov	r3, r7
 80083fc:	f7f8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8008400:	4b88      	ldr	r3, [pc, #544]	; (8008624 <_dtoa_r+0x654>)
 8008402:	2200      	movs	r2, #0
 8008404:	f7f7 ff42 	bl	800028c <__adddf3>
 8008408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800840c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008410:	9303      	str	r3, [sp, #12]
 8008412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008414:	2b00      	cmp	r3, #0
 8008416:	d15c      	bne.n	80084d2 <_dtoa_r+0x502>
 8008418:	4b83      	ldr	r3, [pc, #524]	; (8008628 <_dtoa_r+0x658>)
 800841a:	2200      	movs	r2, #0
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f7 ff32 	bl	8000288 <__aeabi_dsub>
 8008424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008428:	4606      	mov	r6, r0
 800842a:	460f      	mov	r7, r1
 800842c:	f7f8 fb74 	bl	8000b18 <__aeabi_dcmpgt>
 8008430:	2800      	cmp	r0, #0
 8008432:	f040 8296 	bne.w	8008962 <_dtoa_r+0x992>
 8008436:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800843a:	4630      	mov	r0, r6
 800843c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008440:	4639      	mov	r1, r7
 8008442:	f7f8 fb4b 	bl	8000adc <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	f040 8288 	bne.w	800895c <_dtoa_r+0x98c>
 800844c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008450:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008456:	2b00      	cmp	r3, #0
 8008458:	f2c0 8158 	blt.w	800870c <_dtoa_r+0x73c>
 800845c:	f1ba 0f0e 	cmp.w	sl, #14
 8008460:	f300 8154 	bgt.w	800870c <_dtoa_r+0x73c>
 8008464:	4b6b      	ldr	r3, [pc, #428]	; (8008614 <_dtoa_r+0x644>)
 8008466:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800846a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	f280 80e3 	bge.w	800863c <_dtoa_r+0x66c>
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f300 80df 	bgt.w	800863c <_dtoa_r+0x66c>
 800847e:	f040 826d 	bne.w	800895c <_dtoa_r+0x98c>
 8008482:	4b69      	ldr	r3, [pc, #420]	; (8008628 <_dtoa_r+0x658>)
 8008484:	2200      	movs	r2, #0
 8008486:	4640      	mov	r0, r8
 8008488:	4649      	mov	r1, r9
 800848a:	f7f8 f8b5 	bl	80005f8 <__aeabi_dmul>
 800848e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008492:	f7f8 fb37 	bl	8000b04 <__aeabi_dcmpge>
 8008496:	9e01      	ldr	r6, [sp, #4]
 8008498:	4637      	mov	r7, r6
 800849a:	2800      	cmp	r0, #0
 800849c:	f040 8243 	bne.w	8008926 <_dtoa_r+0x956>
 80084a0:	9d00      	ldr	r5, [sp, #0]
 80084a2:	2331      	movs	r3, #49	; 0x31
 80084a4:	f805 3b01 	strb.w	r3, [r5], #1
 80084a8:	f10a 0a01 	add.w	sl, sl, #1
 80084ac:	e23f      	b.n	800892e <_dtoa_r+0x95e>
 80084ae:	07f2      	lsls	r2, r6, #31
 80084b0:	d505      	bpl.n	80084be <_dtoa_r+0x4ee>
 80084b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b6:	f7f8 f89f 	bl	80005f8 <__aeabi_dmul>
 80084ba:	3501      	adds	r5, #1
 80084bc:	2301      	movs	r3, #1
 80084be:	1076      	asrs	r6, r6, #1
 80084c0:	3708      	adds	r7, #8
 80084c2:	e76c      	b.n	800839e <_dtoa_r+0x3ce>
 80084c4:	2502      	movs	r5, #2
 80084c6:	e76f      	b.n	80083a8 <_dtoa_r+0x3d8>
 80084c8:	9b01      	ldr	r3, [sp, #4]
 80084ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80084ce:	930c      	str	r3, [sp, #48]	; 0x30
 80084d0:	e78d      	b.n	80083ee <_dtoa_r+0x41e>
 80084d2:	9900      	ldr	r1, [sp, #0]
 80084d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084d8:	4b4e      	ldr	r3, [pc, #312]	; (8008614 <_dtoa_r+0x644>)
 80084da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084de:	4401      	add	r1, r0
 80084e0:	9102      	str	r1, [sp, #8]
 80084e2:	9908      	ldr	r1, [sp, #32]
 80084e4:	eeb0 8a47 	vmov.f32	s16, s14
 80084e8:	eef0 8a67 	vmov.f32	s17, s15
 80084ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084f4:	2900      	cmp	r1, #0
 80084f6:	d045      	beq.n	8008584 <_dtoa_r+0x5b4>
 80084f8:	494c      	ldr	r1, [pc, #304]	; (800862c <_dtoa_r+0x65c>)
 80084fa:	2000      	movs	r0, #0
 80084fc:	f7f8 f9a6 	bl	800084c <__aeabi_ddiv>
 8008500:	ec53 2b18 	vmov	r2, r3, d8
 8008504:	f7f7 fec0 	bl	8000288 <__aeabi_dsub>
 8008508:	9d00      	ldr	r5, [sp, #0]
 800850a:	ec41 0b18 	vmov	d8, r0, r1
 800850e:	4639      	mov	r1, r7
 8008510:	4630      	mov	r0, r6
 8008512:	f7f8 fb21 	bl	8000b58 <__aeabi_d2iz>
 8008516:	900c      	str	r0, [sp, #48]	; 0x30
 8008518:	f7f8 f804 	bl	8000524 <__aeabi_i2d>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4630      	mov	r0, r6
 8008522:	4639      	mov	r1, r7
 8008524:	f7f7 feb0 	bl	8000288 <__aeabi_dsub>
 8008528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800852a:	3330      	adds	r3, #48	; 0x30
 800852c:	f805 3b01 	strb.w	r3, [r5], #1
 8008530:	ec53 2b18 	vmov	r2, r3, d8
 8008534:	4606      	mov	r6, r0
 8008536:	460f      	mov	r7, r1
 8008538:	f7f8 fad0 	bl	8000adc <__aeabi_dcmplt>
 800853c:	2800      	cmp	r0, #0
 800853e:	d165      	bne.n	800860c <_dtoa_r+0x63c>
 8008540:	4632      	mov	r2, r6
 8008542:	463b      	mov	r3, r7
 8008544:	4935      	ldr	r1, [pc, #212]	; (800861c <_dtoa_r+0x64c>)
 8008546:	2000      	movs	r0, #0
 8008548:	f7f7 fe9e 	bl	8000288 <__aeabi_dsub>
 800854c:	ec53 2b18 	vmov	r2, r3, d8
 8008550:	f7f8 fac4 	bl	8000adc <__aeabi_dcmplt>
 8008554:	2800      	cmp	r0, #0
 8008556:	f040 80b9 	bne.w	80086cc <_dtoa_r+0x6fc>
 800855a:	9b02      	ldr	r3, [sp, #8]
 800855c:	429d      	cmp	r5, r3
 800855e:	f43f af75 	beq.w	800844c <_dtoa_r+0x47c>
 8008562:	4b2f      	ldr	r3, [pc, #188]	; (8008620 <_dtoa_r+0x650>)
 8008564:	ec51 0b18 	vmov	r0, r1, d8
 8008568:	2200      	movs	r2, #0
 800856a:	f7f8 f845 	bl	80005f8 <__aeabi_dmul>
 800856e:	4b2c      	ldr	r3, [pc, #176]	; (8008620 <_dtoa_r+0x650>)
 8008570:	ec41 0b18 	vmov	d8, r0, r1
 8008574:	2200      	movs	r2, #0
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f8 f83d 	bl	80005f8 <__aeabi_dmul>
 800857e:	4606      	mov	r6, r0
 8008580:	460f      	mov	r7, r1
 8008582:	e7c4      	b.n	800850e <_dtoa_r+0x53e>
 8008584:	ec51 0b17 	vmov	r0, r1, d7
 8008588:	f7f8 f836 	bl	80005f8 <__aeabi_dmul>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	9d00      	ldr	r5, [sp, #0]
 8008590:	930c      	str	r3, [sp, #48]	; 0x30
 8008592:	ec41 0b18 	vmov	d8, r0, r1
 8008596:	4639      	mov	r1, r7
 8008598:	4630      	mov	r0, r6
 800859a:	f7f8 fadd 	bl	8000b58 <__aeabi_d2iz>
 800859e:	9011      	str	r0, [sp, #68]	; 0x44
 80085a0:	f7f7 ffc0 	bl	8000524 <__aeabi_i2d>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f7 fe6c 	bl	8000288 <__aeabi_dsub>
 80085b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085b2:	3330      	adds	r3, #48	; 0x30
 80085b4:	f805 3b01 	strb.w	r3, [r5], #1
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	429d      	cmp	r5, r3
 80085bc:	4606      	mov	r6, r0
 80085be:	460f      	mov	r7, r1
 80085c0:	f04f 0200 	mov.w	r2, #0
 80085c4:	d134      	bne.n	8008630 <_dtoa_r+0x660>
 80085c6:	4b19      	ldr	r3, [pc, #100]	; (800862c <_dtoa_r+0x65c>)
 80085c8:	ec51 0b18 	vmov	r0, r1, d8
 80085cc:	f7f7 fe5e 	bl	800028c <__adddf3>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4630      	mov	r0, r6
 80085d6:	4639      	mov	r1, r7
 80085d8:	f7f8 fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d175      	bne.n	80086cc <_dtoa_r+0x6fc>
 80085e0:	ec53 2b18 	vmov	r2, r3, d8
 80085e4:	4911      	ldr	r1, [pc, #68]	; (800862c <_dtoa_r+0x65c>)
 80085e6:	2000      	movs	r0, #0
 80085e8:	f7f7 fe4e 	bl	8000288 <__aeabi_dsub>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f8 fa72 	bl	8000adc <__aeabi_dcmplt>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f43f af27 	beq.w	800844c <_dtoa_r+0x47c>
 80085fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008600:	1e6b      	subs	r3, r5, #1
 8008602:	930c      	str	r3, [sp, #48]	; 0x30
 8008604:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008608:	2b30      	cmp	r3, #48	; 0x30
 800860a:	d0f8      	beq.n	80085fe <_dtoa_r+0x62e>
 800860c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008610:	e04a      	b.n	80086a8 <_dtoa_r+0x6d8>
 8008612:	bf00      	nop
 8008614:	0800a4d8 	.word	0x0800a4d8
 8008618:	0800a4b0 	.word	0x0800a4b0
 800861c:	3ff00000 	.word	0x3ff00000
 8008620:	40240000 	.word	0x40240000
 8008624:	401c0000 	.word	0x401c0000
 8008628:	40140000 	.word	0x40140000
 800862c:	3fe00000 	.word	0x3fe00000
 8008630:	4baf      	ldr	r3, [pc, #700]	; (80088f0 <_dtoa_r+0x920>)
 8008632:	f7f7 ffe1 	bl	80005f8 <__aeabi_dmul>
 8008636:	4606      	mov	r6, r0
 8008638:	460f      	mov	r7, r1
 800863a:	e7ac      	b.n	8008596 <_dtoa_r+0x5c6>
 800863c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008640:	9d00      	ldr	r5, [sp, #0]
 8008642:	4642      	mov	r2, r8
 8008644:	464b      	mov	r3, r9
 8008646:	4630      	mov	r0, r6
 8008648:	4639      	mov	r1, r7
 800864a:	f7f8 f8ff 	bl	800084c <__aeabi_ddiv>
 800864e:	f7f8 fa83 	bl	8000b58 <__aeabi_d2iz>
 8008652:	9002      	str	r0, [sp, #8]
 8008654:	f7f7 ff66 	bl	8000524 <__aeabi_i2d>
 8008658:	4642      	mov	r2, r8
 800865a:	464b      	mov	r3, r9
 800865c:	f7f7 ffcc 	bl	80005f8 <__aeabi_dmul>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4630      	mov	r0, r6
 8008666:	4639      	mov	r1, r7
 8008668:	f7f7 fe0e 	bl	8000288 <__aeabi_dsub>
 800866c:	9e02      	ldr	r6, [sp, #8]
 800866e:	9f01      	ldr	r7, [sp, #4]
 8008670:	3630      	adds	r6, #48	; 0x30
 8008672:	f805 6b01 	strb.w	r6, [r5], #1
 8008676:	9e00      	ldr	r6, [sp, #0]
 8008678:	1bae      	subs	r6, r5, r6
 800867a:	42b7      	cmp	r7, r6
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	d137      	bne.n	80086f2 <_dtoa_r+0x722>
 8008682:	f7f7 fe03 	bl	800028c <__adddf3>
 8008686:	4642      	mov	r2, r8
 8008688:	464b      	mov	r3, r9
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	f7f8 fa43 	bl	8000b18 <__aeabi_dcmpgt>
 8008692:	b9c8      	cbnz	r0, 80086c8 <_dtoa_r+0x6f8>
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	f7f8 fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80086a0:	b110      	cbz	r0, 80086a8 <_dtoa_r+0x6d8>
 80086a2:	9b02      	ldr	r3, [sp, #8]
 80086a4:	07d9      	lsls	r1, r3, #31
 80086a6:	d40f      	bmi.n	80086c8 <_dtoa_r+0x6f8>
 80086a8:	4620      	mov	r0, r4
 80086aa:	4659      	mov	r1, fp
 80086ac:	f000 fbd4 	bl	8008e58 <_Bfree>
 80086b0:	2300      	movs	r3, #0
 80086b2:	702b      	strb	r3, [r5, #0]
 80086b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086b6:	f10a 0001 	add.w	r0, sl, #1
 80086ba:	6018      	str	r0, [r3, #0]
 80086bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f43f acd8 	beq.w	8008074 <_dtoa_r+0xa4>
 80086c4:	601d      	str	r5, [r3, #0]
 80086c6:	e4d5      	b.n	8008074 <_dtoa_r+0xa4>
 80086c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80086cc:	462b      	mov	r3, r5
 80086ce:	461d      	mov	r5, r3
 80086d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086d4:	2a39      	cmp	r2, #57	; 0x39
 80086d6:	d108      	bne.n	80086ea <_dtoa_r+0x71a>
 80086d8:	9a00      	ldr	r2, [sp, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d1f7      	bne.n	80086ce <_dtoa_r+0x6fe>
 80086de:	9a07      	ldr	r2, [sp, #28]
 80086e0:	9900      	ldr	r1, [sp, #0]
 80086e2:	3201      	adds	r2, #1
 80086e4:	9207      	str	r2, [sp, #28]
 80086e6:	2230      	movs	r2, #48	; 0x30
 80086e8:	700a      	strb	r2, [r1, #0]
 80086ea:	781a      	ldrb	r2, [r3, #0]
 80086ec:	3201      	adds	r2, #1
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e78c      	b.n	800860c <_dtoa_r+0x63c>
 80086f2:	4b7f      	ldr	r3, [pc, #508]	; (80088f0 <_dtoa_r+0x920>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	f7f7 ff7f 	bl	80005f8 <__aeabi_dmul>
 80086fa:	2200      	movs	r2, #0
 80086fc:	2300      	movs	r3, #0
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	f7f8 f9e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008706:	2800      	cmp	r0, #0
 8008708:	d09b      	beq.n	8008642 <_dtoa_r+0x672>
 800870a:	e7cd      	b.n	80086a8 <_dtoa_r+0x6d8>
 800870c:	9a08      	ldr	r2, [sp, #32]
 800870e:	2a00      	cmp	r2, #0
 8008710:	f000 80c4 	beq.w	800889c <_dtoa_r+0x8cc>
 8008714:	9a05      	ldr	r2, [sp, #20]
 8008716:	2a01      	cmp	r2, #1
 8008718:	f300 80a8 	bgt.w	800886c <_dtoa_r+0x89c>
 800871c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800871e:	2a00      	cmp	r2, #0
 8008720:	f000 80a0 	beq.w	8008864 <_dtoa_r+0x894>
 8008724:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008728:	9e06      	ldr	r6, [sp, #24]
 800872a:	4645      	mov	r5, r8
 800872c:	9a04      	ldr	r2, [sp, #16]
 800872e:	2101      	movs	r1, #1
 8008730:	441a      	add	r2, r3
 8008732:	4620      	mov	r0, r4
 8008734:	4498      	add	r8, r3
 8008736:	9204      	str	r2, [sp, #16]
 8008738:	f000 fc4a 	bl	8008fd0 <__i2b>
 800873c:	4607      	mov	r7, r0
 800873e:	2d00      	cmp	r5, #0
 8008740:	dd0b      	ble.n	800875a <_dtoa_r+0x78a>
 8008742:	9b04      	ldr	r3, [sp, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dd08      	ble.n	800875a <_dtoa_r+0x78a>
 8008748:	42ab      	cmp	r3, r5
 800874a:	9a04      	ldr	r2, [sp, #16]
 800874c:	bfa8      	it	ge
 800874e:	462b      	movge	r3, r5
 8008750:	eba8 0803 	sub.w	r8, r8, r3
 8008754:	1aed      	subs	r5, r5, r3
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	9b06      	ldr	r3, [sp, #24]
 800875c:	b1fb      	cbz	r3, 800879e <_dtoa_r+0x7ce>
 800875e:	9b08      	ldr	r3, [sp, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 809f 	beq.w	80088a4 <_dtoa_r+0x8d4>
 8008766:	2e00      	cmp	r6, #0
 8008768:	dd11      	ble.n	800878e <_dtoa_r+0x7be>
 800876a:	4639      	mov	r1, r7
 800876c:	4632      	mov	r2, r6
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fcea 	bl	8009148 <__pow5mult>
 8008774:	465a      	mov	r2, fp
 8008776:	4601      	mov	r1, r0
 8008778:	4607      	mov	r7, r0
 800877a:	4620      	mov	r0, r4
 800877c:	f000 fc3e 	bl	8008ffc <__multiply>
 8008780:	4659      	mov	r1, fp
 8008782:	9007      	str	r0, [sp, #28]
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fb67 	bl	8008e58 <_Bfree>
 800878a:	9b07      	ldr	r3, [sp, #28]
 800878c:	469b      	mov	fp, r3
 800878e:	9b06      	ldr	r3, [sp, #24]
 8008790:	1b9a      	subs	r2, r3, r6
 8008792:	d004      	beq.n	800879e <_dtoa_r+0x7ce>
 8008794:	4659      	mov	r1, fp
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fcd6 	bl	8009148 <__pow5mult>
 800879c:	4683      	mov	fp, r0
 800879e:	2101      	movs	r1, #1
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fc15 	bl	8008fd0 <__i2b>
 80087a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	4606      	mov	r6, r0
 80087ac:	dd7c      	ble.n	80088a8 <_dtoa_r+0x8d8>
 80087ae:	461a      	mov	r2, r3
 80087b0:	4601      	mov	r1, r0
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 fcc8 	bl	8009148 <__pow5mult>
 80087b8:	9b05      	ldr	r3, [sp, #20]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	4606      	mov	r6, r0
 80087be:	dd76      	ble.n	80088ae <_dtoa_r+0x8de>
 80087c0:	2300      	movs	r3, #0
 80087c2:	9306      	str	r3, [sp, #24]
 80087c4:	6933      	ldr	r3, [r6, #16]
 80087c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80087ca:	6918      	ldr	r0, [r3, #16]
 80087cc:	f000 fbb0 	bl	8008f30 <__hi0bits>
 80087d0:	f1c0 0020 	rsb	r0, r0, #32
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	4418      	add	r0, r3
 80087d8:	f010 001f 	ands.w	r0, r0, #31
 80087dc:	f000 8086 	beq.w	80088ec <_dtoa_r+0x91c>
 80087e0:	f1c0 0320 	rsb	r3, r0, #32
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	dd7f      	ble.n	80088e8 <_dtoa_r+0x918>
 80087e8:	f1c0 001c 	rsb	r0, r0, #28
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	4403      	add	r3, r0
 80087f0:	4480      	add	r8, r0
 80087f2:	4405      	add	r5, r0
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	f1b8 0f00 	cmp.w	r8, #0
 80087fa:	dd05      	ble.n	8008808 <_dtoa_r+0x838>
 80087fc:	4659      	mov	r1, fp
 80087fe:	4642      	mov	r2, r8
 8008800:	4620      	mov	r0, r4
 8008802:	f000 fcfb 	bl	80091fc <__lshift>
 8008806:	4683      	mov	fp, r0
 8008808:	9b04      	ldr	r3, [sp, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	dd05      	ble.n	800881a <_dtoa_r+0x84a>
 800880e:	4631      	mov	r1, r6
 8008810:	461a      	mov	r2, r3
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fcf2 	bl	80091fc <__lshift>
 8008818:	4606      	mov	r6, r0
 800881a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800881c:	2b00      	cmp	r3, #0
 800881e:	d069      	beq.n	80088f4 <_dtoa_r+0x924>
 8008820:	4631      	mov	r1, r6
 8008822:	4658      	mov	r0, fp
 8008824:	f000 fd56 	bl	80092d4 <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	da63      	bge.n	80088f4 <_dtoa_r+0x924>
 800882c:	2300      	movs	r3, #0
 800882e:	4659      	mov	r1, fp
 8008830:	220a      	movs	r2, #10
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fb32 	bl	8008e9c <__multadd>
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800883e:	4683      	mov	fp, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 818f 	beq.w	8008b64 <_dtoa_r+0xb94>
 8008846:	4639      	mov	r1, r7
 8008848:	2300      	movs	r3, #0
 800884a:	220a      	movs	r2, #10
 800884c:	4620      	mov	r0, r4
 800884e:	f000 fb25 	bl	8008e9c <__multadd>
 8008852:	f1b9 0f00 	cmp.w	r9, #0
 8008856:	4607      	mov	r7, r0
 8008858:	f300 808e 	bgt.w	8008978 <_dtoa_r+0x9a8>
 800885c:	9b05      	ldr	r3, [sp, #20]
 800885e:	2b02      	cmp	r3, #2
 8008860:	dc50      	bgt.n	8008904 <_dtoa_r+0x934>
 8008862:	e089      	b.n	8008978 <_dtoa_r+0x9a8>
 8008864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800886a:	e75d      	b.n	8008728 <_dtoa_r+0x758>
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	1e5e      	subs	r6, r3, #1
 8008870:	9b06      	ldr	r3, [sp, #24]
 8008872:	42b3      	cmp	r3, r6
 8008874:	bfbf      	itttt	lt
 8008876:	9b06      	ldrlt	r3, [sp, #24]
 8008878:	9606      	strlt	r6, [sp, #24]
 800887a:	1af2      	sublt	r2, r6, r3
 800887c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800887e:	bfb6      	itet	lt
 8008880:	189b      	addlt	r3, r3, r2
 8008882:	1b9e      	subge	r6, r3, r6
 8008884:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	bfb8      	it	lt
 800888a:	2600      	movlt	r6, #0
 800888c:	2b00      	cmp	r3, #0
 800888e:	bfb5      	itete	lt
 8008890:	eba8 0503 	sublt.w	r5, r8, r3
 8008894:	9b01      	ldrge	r3, [sp, #4]
 8008896:	2300      	movlt	r3, #0
 8008898:	4645      	movge	r5, r8
 800889a:	e747      	b.n	800872c <_dtoa_r+0x75c>
 800889c:	9e06      	ldr	r6, [sp, #24]
 800889e:	9f08      	ldr	r7, [sp, #32]
 80088a0:	4645      	mov	r5, r8
 80088a2:	e74c      	b.n	800873e <_dtoa_r+0x76e>
 80088a4:	9a06      	ldr	r2, [sp, #24]
 80088a6:	e775      	b.n	8008794 <_dtoa_r+0x7c4>
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	dc18      	bgt.n	80088e0 <_dtoa_r+0x910>
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	b9b3      	cbnz	r3, 80088e0 <_dtoa_r+0x910>
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088b8:	b9a3      	cbnz	r3, 80088e4 <_dtoa_r+0x914>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088c0:	0d1b      	lsrs	r3, r3, #20
 80088c2:	051b      	lsls	r3, r3, #20
 80088c4:	b12b      	cbz	r3, 80088d2 <_dtoa_r+0x902>
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	3301      	adds	r3, #1
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	f108 0801 	add.w	r8, r8, #1
 80088d0:	2301      	movs	r3, #1
 80088d2:	9306      	str	r3, [sp, #24]
 80088d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f47f af74 	bne.w	80087c4 <_dtoa_r+0x7f4>
 80088dc:	2001      	movs	r0, #1
 80088de:	e779      	b.n	80087d4 <_dtoa_r+0x804>
 80088e0:	2300      	movs	r3, #0
 80088e2:	e7f6      	b.n	80088d2 <_dtoa_r+0x902>
 80088e4:	9b02      	ldr	r3, [sp, #8]
 80088e6:	e7f4      	b.n	80088d2 <_dtoa_r+0x902>
 80088e8:	d085      	beq.n	80087f6 <_dtoa_r+0x826>
 80088ea:	4618      	mov	r0, r3
 80088ec:	301c      	adds	r0, #28
 80088ee:	e77d      	b.n	80087ec <_dtoa_r+0x81c>
 80088f0:	40240000 	.word	0x40240000
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dc38      	bgt.n	800896c <_dtoa_r+0x99c>
 80088fa:	9b05      	ldr	r3, [sp, #20]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	dd35      	ble.n	800896c <_dtoa_r+0x99c>
 8008900:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008904:	f1b9 0f00 	cmp.w	r9, #0
 8008908:	d10d      	bne.n	8008926 <_dtoa_r+0x956>
 800890a:	4631      	mov	r1, r6
 800890c:	464b      	mov	r3, r9
 800890e:	2205      	movs	r2, #5
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fac3 	bl	8008e9c <__multadd>
 8008916:	4601      	mov	r1, r0
 8008918:	4606      	mov	r6, r0
 800891a:	4658      	mov	r0, fp
 800891c:	f000 fcda 	bl	80092d4 <__mcmp>
 8008920:	2800      	cmp	r0, #0
 8008922:	f73f adbd 	bgt.w	80084a0 <_dtoa_r+0x4d0>
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	9d00      	ldr	r5, [sp, #0]
 800892a:	ea6f 0a03 	mvn.w	sl, r3
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	4631      	mov	r1, r6
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fa8f 	bl	8008e58 <_Bfree>
 800893a:	2f00      	cmp	r7, #0
 800893c:	f43f aeb4 	beq.w	80086a8 <_dtoa_r+0x6d8>
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	d005      	beq.n	8008952 <_dtoa_r+0x982>
 8008946:	45b8      	cmp	r8, r7
 8008948:	d003      	beq.n	8008952 <_dtoa_r+0x982>
 800894a:	4641      	mov	r1, r8
 800894c:	4620      	mov	r0, r4
 800894e:	f000 fa83 	bl	8008e58 <_Bfree>
 8008952:	4639      	mov	r1, r7
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fa7f 	bl	8008e58 <_Bfree>
 800895a:	e6a5      	b.n	80086a8 <_dtoa_r+0x6d8>
 800895c:	2600      	movs	r6, #0
 800895e:	4637      	mov	r7, r6
 8008960:	e7e1      	b.n	8008926 <_dtoa_r+0x956>
 8008962:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008964:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008968:	4637      	mov	r7, r6
 800896a:	e599      	b.n	80084a0 <_dtoa_r+0x4d0>
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80fd 	beq.w	8008b72 <_dtoa_r+0xba2>
 8008978:	2d00      	cmp	r5, #0
 800897a:	dd05      	ble.n	8008988 <_dtoa_r+0x9b8>
 800897c:	4639      	mov	r1, r7
 800897e:	462a      	mov	r2, r5
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fc3b 	bl	80091fc <__lshift>
 8008986:	4607      	mov	r7, r0
 8008988:	9b06      	ldr	r3, [sp, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d05c      	beq.n	8008a48 <_dtoa_r+0xa78>
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fa21 	bl	8008dd8 <_Balloc>
 8008996:	4605      	mov	r5, r0
 8008998:	b928      	cbnz	r0, 80089a6 <_dtoa_r+0x9d6>
 800899a:	4b80      	ldr	r3, [pc, #512]	; (8008b9c <_dtoa_r+0xbcc>)
 800899c:	4602      	mov	r2, r0
 800899e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089a2:	f7ff bb2e 	b.w	8008002 <_dtoa_r+0x32>
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	3202      	adds	r2, #2
 80089aa:	0092      	lsls	r2, r2, #2
 80089ac:	f107 010c 	add.w	r1, r7, #12
 80089b0:	300c      	adds	r0, #12
 80089b2:	f000 f9f6 	bl	8008da2 <memcpy>
 80089b6:	2201      	movs	r2, #1
 80089b8:	4629      	mov	r1, r5
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 fc1e 	bl	80091fc <__lshift>
 80089c0:	9b00      	ldr	r3, [sp, #0]
 80089c2:	3301      	adds	r3, #1
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	9b00      	ldr	r3, [sp, #0]
 80089c8:	444b      	add	r3, r9
 80089ca:	9307      	str	r3, [sp, #28]
 80089cc:	9b02      	ldr	r3, [sp, #8]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	46b8      	mov	r8, r7
 80089d4:	9306      	str	r3, [sp, #24]
 80089d6:	4607      	mov	r7, r0
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	4631      	mov	r1, r6
 80089dc:	3b01      	subs	r3, #1
 80089de:	4658      	mov	r0, fp
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	f7ff fa69 	bl	8007eb8 <quorem>
 80089e6:	4603      	mov	r3, r0
 80089e8:	3330      	adds	r3, #48	; 0x30
 80089ea:	9004      	str	r0, [sp, #16]
 80089ec:	4641      	mov	r1, r8
 80089ee:	4658      	mov	r0, fp
 80089f0:	9308      	str	r3, [sp, #32]
 80089f2:	f000 fc6f 	bl	80092d4 <__mcmp>
 80089f6:	463a      	mov	r2, r7
 80089f8:	4681      	mov	r9, r0
 80089fa:	4631      	mov	r1, r6
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fc85 	bl	800930c <__mdiff>
 8008a02:	68c2      	ldr	r2, [r0, #12]
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	4605      	mov	r5, r0
 8008a08:	bb02      	cbnz	r2, 8008a4c <_dtoa_r+0xa7c>
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f000 fc61 	bl	80092d4 <__mcmp>
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	4602      	mov	r2, r0
 8008a16:	4629      	mov	r1, r5
 8008a18:	4620      	mov	r0, r4
 8008a1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008a1e:	f000 fa1b 	bl	8008e58 <_Bfree>
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a26:	9d01      	ldr	r5, [sp, #4]
 8008a28:	ea43 0102 	orr.w	r1, r3, r2
 8008a2c:	9b06      	ldr	r3, [sp, #24]
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	d10d      	bne.n	8008a50 <_dtoa_r+0xa80>
 8008a34:	2b39      	cmp	r3, #57	; 0x39
 8008a36:	d029      	beq.n	8008a8c <_dtoa_r+0xabc>
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	dd01      	ble.n	8008a42 <_dtoa_r+0xa72>
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	3331      	adds	r3, #49	; 0x31
 8008a42:	9a02      	ldr	r2, [sp, #8]
 8008a44:	7013      	strb	r3, [r2, #0]
 8008a46:	e774      	b.n	8008932 <_dtoa_r+0x962>
 8008a48:	4638      	mov	r0, r7
 8008a4a:	e7b9      	b.n	80089c0 <_dtoa_r+0x9f0>
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	e7e2      	b.n	8008a16 <_dtoa_r+0xa46>
 8008a50:	f1b9 0f00 	cmp.w	r9, #0
 8008a54:	db06      	blt.n	8008a64 <_dtoa_r+0xa94>
 8008a56:	9905      	ldr	r1, [sp, #20]
 8008a58:	ea41 0909 	orr.w	r9, r1, r9
 8008a5c:	9906      	ldr	r1, [sp, #24]
 8008a5e:	ea59 0101 	orrs.w	r1, r9, r1
 8008a62:	d120      	bne.n	8008aa6 <_dtoa_r+0xad6>
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	ddec      	ble.n	8008a42 <_dtoa_r+0xa72>
 8008a68:	4659      	mov	r1, fp
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	f000 fbc4 	bl	80091fc <__lshift>
 8008a74:	4631      	mov	r1, r6
 8008a76:	4683      	mov	fp, r0
 8008a78:	f000 fc2c 	bl	80092d4 <__mcmp>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	9b01      	ldr	r3, [sp, #4]
 8008a80:	dc02      	bgt.n	8008a88 <_dtoa_r+0xab8>
 8008a82:	d1de      	bne.n	8008a42 <_dtoa_r+0xa72>
 8008a84:	07da      	lsls	r2, r3, #31
 8008a86:	d5dc      	bpl.n	8008a42 <_dtoa_r+0xa72>
 8008a88:	2b39      	cmp	r3, #57	; 0x39
 8008a8a:	d1d8      	bne.n	8008a3e <_dtoa_r+0xa6e>
 8008a8c:	9a02      	ldr	r2, [sp, #8]
 8008a8e:	2339      	movs	r3, #57	; 0x39
 8008a90:	7013      	strb	r3, [r2, #0]
 8008a92:	462b      	mov	r3, r5
 8008a94:	461d      	mov	r5, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a9c:	2a39      	cmp	r2, #57	; 0x39
 8008a9e:	d050      	beq.n	8008b42 <_dtoa_r+0xb72>
 8008aa0:	3201      	adds	r2, #1
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	e745      	b.n	8008932 <_dtoa_r+0x962>
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	dd03      	ble.n	8008ab2 <_dtoa_r+0xae2>
 8008aaa:	2b39      	cmp	r3, #57	; 0x39
 8008aac:	d0ee      	beq.n	8008a8c <_dtoa_r+0xabc>
 8008aae:	3301      	adds	r3, #1
 8008ab0:	e7c7      	b.n	8008a42 <_dtoa_r+0xa72>
 8008ab2:	9a01      	ldr	r2, [sp, #4]
 8008ab4:	9907      	ldr	r1, [sp, #28]
 8008ab6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008aba:	428a      	cmp	r2, r1
 8008abc:	d02a      	beq.n	8008b14 <_dtoa_r+0xb44>
 8008abe:	4659      	mov	r1, fp
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 f9e9 	bl	8008e9c <__multadd>
 8008aca:	45b8      	cmp	r8, r7
 8008acc:	4683      	mov	fp, r0
 8008ace:	f04f 0300 	mov.w	r3, #0
 8008ad2:	f04f 020a 	mov.w	r2, #10
 8008ad6:	4641      	mov	r1, r8
 8008ad8:	4620      	mov	r0, r4
 8008ada:	d107      	bne.n	8008aec <_dtoa_r+0xb1c>
 8008adc:	f000 f9de 	bl	8008e9c <__multadd>
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	e775      	b.n	80089d8 <_dtoa_r+0xa08>
 8008aec:	f000 f9d6 	bl	8008e9c <__multadd>
 8008af0:	4639      	mov	r1, r7
 8008af2:	4680      	mov	r8, r0
 8008af4:	2300      	movs	r3, #0
 8008af6:	220a      	movs	r2, #10
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 f9cf 	bl	8008e9c <__multadd>
 8008afe:	4607      	mov	r7, r0
 8008b00:	e7f0      	b.n	8008ae4 <_dtoa_r+0xb14>
 8008b02:	f1b9 0f00 	cmp.w	r9, #0
 8008b06:	9a00      	ldr	r2, [sp, #0]
 8008b08:	bfcc      	ite	gt
 8008b0a:	464d      	movgt	r5, r9
 8008b0c:	2501      	movle	r5, #1
 8008b0e:	4415      	add	r5, r2
 8008b10:	f04f 0800 	mov.w	r8, #0
 8008b14:	4659      	mov	r1, fp
 8008b16:	2201      	movs	r2, #1
 8008b18:	4620      	mov	r0, r4
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	f000 fb6e 	bl	80091fc <__lshift>
 8008b20:	4631      	mov	r1, r6
 8008b22:	4683      	mov	fp, r0
 8008b24:	f000 fbd6 	bl	80092d4 <__mcmp>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	dcb2      	bgt.n	8008a92 <_dtoa_r+0xac2>
 8008b2c:	d102      	bne.n	8008b34 <_dtoa_r+0xb64>
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	d4ae      	bmi.n	8008a92 <_dtoa_r+0xac2>
 8008b34:	462b      	mov	r3, r5
 8008b36:	461d      	mov	r5, r3
 8008b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b3c:	2a30      	cmp	r2, #48	; 0x30
 8008b3e:	d0fa      	beq.n	8008b36 <_dtoa_r+0xb66>
 8008b40:	e6f7      	b.n	8008932 <_dtoa_r+0x962>
 8008b42:	9a00      	ldr	r2, [sp, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d1a5      	bne.n	8008a94 <_dtoa_r+0xac4>
 8008b48:	f10a 0a01 	add.w	sl, sl, #1
 8008b4c:	2331      	movs	r3, #49	; 0x31
 8008b4e:	e779      	b.n	8008a44 <_dtoa_r+0xa74>
 8008b50:	4b13      	ldr	r3, [pc, #76]	; (8008ba0 <_dtoa_r+0xbd0>)
 8008b52:	f7ff baaf 	b.w	80080b4 <_dtoa_r+0xe4>
 8008b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f47f aa86 	bne.w	800806a <_dtoa_r+0x9a>
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <_dtoa_r+0xbd4>)
 8008b60:	f7ff baa8 	b.w	80080b4 <_dtoa_r+0xe4>
 8008b64:	f1b9 0f00 	cmp.w	r9, #0
 8008b68:	dc03      	bgt.n	8008b72 <_dtoa_r+0xba2>
 8008b6a:	9b05      	ldr	r3, [sp, #20]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	f73f aec9 	bgt.w	8008904 <_dtoa_r+0x934>
 8008b72:	9d00      	ldr	r5, [sp, #0]
 8008b74:	4631      	mov	r1, r6
 8008b76:	4658      	mov	r0, fp
 8008b78:	f7ff f99e 	bl	8007eb8 <quorem>
 8008b7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b80:	f805 3b01 	strb.w	r3, [r5], #1
 8008b84:	9a00      	ldr	r2, [sp, #0]
 8008b86:	1aaa      	subs	r2, r5, r2
 8008b88:	4591      	cmp	r9, r2
 8008b8a:	ddba      	ble.n	8008b02 <_dtoa_r+0xb32>
 8008b8c:	4659      	mov	r1, fp
 8008b8e:	2300      	movs	r3, #0
 8008b90:	220a      	movs	r2, #10
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f982 	bl	8008e9c <__multadd>
 8008b98:	4683      	mov	fp, r0
 8008b9a:	e7eb      	b.n	8008b74 <_dtoa_r+0xba4>
 8008b9c:	0800a3db 	.word	0x0800a3db
 8008ba0:	0800a334 	.word	0x0800a334
 8008ba4:	0800a358 	.word	0x0800a358

08008ba8 <std>:
 8008ba8:	2300      	movs	r3, #0
 8008baa:	b510      	push	{r4, lr}
 8008bac:	4604      	mov	r4, r0
 8008bae:	e9c0 3300 	strd	r3, r3, [r0]
 8008bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bb6:	6083      	str	r3, [r0, #8]
 8008bb8:	8181      	strh	r1, [r0, #12]
 8008bba:	6643      	str	r3, [r0, #100]	; 0x64
 8008bbc:	81c2      	strh	r2, [r0, #14]
 8008bbe:	6183      	str	r3, [r0, #24]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	2208      	movs	r2, #8
 8008bc4:	305c      	adds	r0, #92	; 0x5c
 8008bc6:	f7fe fbbb 	bl	8007340 <memset>
 8008bca:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <std+0x38>)
 8008bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8008bce:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <std+0x3c>)
 8008bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bd2:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <std+0x40>)
 8008bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bd6:	4b05      	ldr	r3, [pc, #20]	; (8008bec <std+0x44>)
 8008bd8:	6224      	str	r4, [r4, #32]
 8008bda:	6323      	str	r3, [r4, #48]	; 0x30
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	bf00      	nop
 8008be0:	08009a5d 	.word	0x08009a5d
 8008be4:	08009a7f 	.word	0x08009a7f
 8008be8:	08009ab7 	.word	0x08009ab7
 8008bec:	08009adb 	.word	0x08009adb

08008bf0 <_cleanup_r>:
 8008bf0:	4901      	ldr	r1, [pc, #4]	; (8008bf8 <_cleanup_r+0x8>)
 8008bf2:	f000 b8af 	b.w	8008d54 <_fwalk_reent>
 8008bf6:	bf00      	nop
 8008bf8:	08009df1 	.word	0x08009df1

08008bfc <__sfmoreglue>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	1e4a      	subs	r2, r1, #1
 8008c00:	2568      	movs	r5, #104	; 0x68
 8008c02:	4355      	muls	r5, r2
 8008c04:	460e      	mov	r6, r1
 8008c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c0a:	f7fe fbf1 	bl	80073f0 <_malloc_r>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	b140      	cbz	r0, 8008c24 <__sfmoreglue+0x28>
 8008c12:	2100      	movs	r1, #0
 8008c14:	e9c0 1600 	strd	r1, r6, [r0]
 8008c18:	300c      	adds	r0, #12
 8008c1a:	60a0      	str	r0, [r4, #8]
 8008c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c20:	f7fe fb8e 	bl	8007340 <memset>
 8008c24:	4620      	mov	r0, r4
 8008c26:	bd70      	pop	{r4, r5, r6, pc}

08008c28 <__sfp_lock_acquire>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__sfp_lock_acquire+0x8>)
 8008c2a:	f000 b8b8 	b.w	8008d9e <__retarget_lock_acquire_recursive>
 8008c2e:	bf00      	nop
 8008c30:	20000390 	.word	0x20000390

08008c34 <__sfp_lock_release>:
 8008c34:	4801      	ldr	r0, [pc, #4]	; (8008c3c <__sfp_lock_release+0x8>)
 8008c36:	f000 b8b3 	b.w	8008da0 <__retarget_lock_release_recursive>
 8008c3a:	bf00      	nop
 8008c3c:	20000390 	.word	0x20000390

08008c40 <__sinit_lock_acquire>:
 8008c40:	4801      	ldr	r0, [pc, #4]	; (8008c48 <__sinit_lock_acquire+0x8>)
 8008c42:	f000 b8ac 	b.w	8008d9e <__retarget_lock_acquire_recursive>
 8008c46:	bf00      	nop
 8008c48:	2000038b 	.word	0x2000038b

08008c4c <__sinit_lock_release>:
 8008c4c:	4801      	ldr	r0, [pc, #4]	; (8008c54 <__sinit_lock_release+0x8>)
 8008c4e:	f000 b8a7 	b.w	8008da0 <__retarget_lock_release_recursive>
 8008c52:	bf00      	nop
 8008c54:	2000038b 	.word	0x2000038b

08008c58 <__sinit>:
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	f7ff fff0 	bl	8008c40 <__sinit_lock_acquire>
 8008c60:	69a3      	ldr	r3, [r4, #24]
 8008c62:	b11b      	cbz	r3, 8008c6c <__sinit+0x14>
 8008c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c68:	f7ff bff0 	b.w	8008c4c <__sinit_lock_release>
 8008c6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c70:	6523      	str	r3, [r4, #80]	; 0x50
 8008c72:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <__sinit+0x68>)
 8008c74:	4a13      	ldr	r2, [pc, #76]	; (8008cc4 <__sinit+0x6c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c7a:	42a3      	cmp	r3, r4
 8008c7c:	bf04      	itt	eq
 8008c7e:	2301      	moveq	r3, #1
 8008c80:	61a3      	streq	r3, [r4, #24]
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 f820 	bl	8008cc8 <__sfp>
 8008c88:	6060      	str	r0, [r4, #4]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 f81c 	bl	8008cc8 <__sfp>
 8008c90:	60a0      	str	r0, [r4, #8]
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 f818 	bl	8008cc8 <__sfp>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	60e0      	str	r0, [r4, #12]
 8008c9c:	2104      	movs	r1, #4
 8008c9e:	6860      	ldr	r0, [r4, #4]
 8008ca0:	f7ff ff82 	bl	8008ba8 <std>
 8008ca4:	68a0      	ldr	r0, [r4, #8]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	2109      	movs	r1, #9
 8008caa:	f7ff ff7d 	bl	8008ba8 <std>
 8008cae:	68e0      	ldr	r0, [r4, #12]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	2112      	movs	r1, #18
 8008cb4:	f7ff ff78 	bl	8008ba8 <std>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	61a3      	str	r3, [r4, #24]
 8008cbc:	e7d2      	b.n	8008c64 <__sinit+0xc>
 8008cbe:	bf00      	nop
 8008cc0:	0800a320 	.word	0x0800a320
 8008cc4:	08008bf1 	.word	0x08008bf1

08008cc8 <__sfp>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	4607      	mov	r7, r0
 8008ccc:	f7ff ffac 	bl	8008c28 <__sfp_lock_acquire>
 8008cd0:	4b1e      	ldr	r3, [pc, #120]	; (8008d4c <__sfp+0x84>)
 8008cd2:	681e      	ldr	r6, [r3, #0]
 8008cd4:	69b3      	ldr	r3, [r6, #24]
 8008cd6:	b913      	cbnz	r3, 8008cde <__sfp+0x16>
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7ff ffbd 	bl	8008c58 <__sinit>
 8008cde:	3648      	adds	r6, #72	; 0x48
 8008ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	d503      	bpl.n	8008cf0 <__sfp+0x28>
 8008ce8:	6833      	ldr	r3, [r6, #0]
 8008cea:	b30b      	cbz	r3, 8008d30 <__sfp+0x68>
 8008cec:	6836      	ldr	r6, [r6, #0]
 8008cee:	e7f7      	b.n	8008ce0 <__sfp+0x18>
 8008cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cf4:	b9d5      	cbnz	r5, 8008d2c <__sfp+0x64>
 8008cf6:	4b16      	ldr	r3, [pc, #88]	; (8008d50 <__sfp+0x88>)
 8008cf8:	60e3      	str	r3, [r4, #12]
 8008cfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cfe:	6665      	str	r5, [r4, #100]	; 0x64
 8008d00:	f000 f84c 	bl	8008d9c <__retarget_lock_init_recursive>
 8008d04:	f7ff ff96 	bl	8008c34 <__sfp_lock_release>
 8008d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d10:	6025      	str	r5, [r4, #0]
 8008d12:	61a5      	str	r5, [r4, #24]
 8008d14:	2208      	movs	r2, #8
 8008d16:	4629      	mov	r1, r5
 8008d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d1c:	f7fe fb10 	bl	8007340 <memset>
 8008d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d28:	4620      	mov	r0, r4
 8008d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d2c:	3468      	adds	r4, #104	; 0x68
 8008d2e:	e7d9      	b.n	8008ce4 <__sfp+0x1c>
 8008d30:	2104      	movs	r1, #4
 8008d32:	4638      	mov	r0, r7
 8008d34:	f7ff ff62 	bl	8008bfc <__sfmoreglue>
 8008d38:	4604      	mov	r4, r0
 8008d3a:	6030      	str	r0, [r6, #0]
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d1d5      	bne.n	8008cec <__sfp+0x24>
 8008d40:	f7ff ff78 	bl	8008c34 <__sfp_lock_release>
 8008d44:	230c      	movs	r3, #12
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	e7ee      	b.n	8008d28 <__sfp+0x60>
 8008d4a:	bf00      	nop
 8008d4c:	0800a320 	.word	0x0800a320
 8008d50:	ffff0001 	.word	0xffff0001

08008d54 <_fwalk_reent>:
 8008d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d58:	4606      	mov	r6, r0
 8008d5a:	4688      	mov	r8, r1
 8008d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d60:	2700      	movs	r7, #0
 8008d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d66:	f1b9 0901 	subs.w	r9, r9, #1
 8008d6a:	d505      	bpl.n	8008d78 <_fwalk_reent+0x24>
 8008d6c:	6824      	ldr	r4, [r4, #0]
 8008d6e:	2c00      	cmp	r4, #0
 8008d70:	d1f7      	bne.n	8008d62 <_fwalk_reent+0xe>
 8008d72:	4638      	mov	r0, r7
 8008d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d78:	89ab      	ldrh	r3, [r5, #12]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d907      	bls.n	8008d8e <_fwalk_reent+0x3a>
 8008d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d82:	3301      	adds	r3, #1
 8008d84:	d003      	beq.n	8008d8e <_fwalk_reent+0x3a>
 8008d86:	4629      	mov	r1, r5
 8008d88:	4630      	mov	r0, r6
 8008d8a:	47c0      	blx	r8
 8008d8c:	4307      	orrs	r7, r0
 8008d8e:	3568      	adds	r5, #104	; 0x68
 8008d90:	e7e9      	b.n	8008d66 <_fwalk_reent+0x12>
	...

08008d94 <_localeconv_r>:
 8008d94:	4800      	ldr	r0, [pc, #0]	; (8008d98 <_localeconv_r+0x4>)
 8008d96:	4770      	bx	lr
 8008d98:	2000017c 	.word	0x2000017c

08008d9c <__retarget_lock_init_recursive>:
 8008d9c:	4770      	bx	lr

08008d9e <__retarget_lock_acquire_recursive>:
 8008d9e:	4770      	bx	lr

08008da0 <__retarget_lock_release_recursive>:
 8008da0:	4770      	bx	lr

08008da2 <memcpy>:
 8008da2:	440a      	add	r2, r1
 8008da4:	4291      	cmp	r1, r2
 8008da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008daa:	d100      	bne.n	8008dae <memcpy+0xc>
 8008dac:	4770      	bx	lr
 8008dae:	b510      	push	{r4, lr}
 8008db0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008db8:	4291      	cmp	r1, r2
 8008dba:	d1f9      	bne.n	8008db0 <memcpy+0xe>
 8008dbc:	bd10      	pop	{r4, pc}
	...

08008dc0 <__malloc_lock>:
 8008dc0:	4801      	ldr	r0, [pc, #4]	; (8008dc8 <__malloc_lock+0x8>)
 8008dc2:	f7ff bfec 	b.w	8008d9e <__retarget_lock_acquire_recursive>
 8008dc6:	bf00      	nop
 8008dc8:	2000038c 	.word	0x2000038c

08008dcc <__malloc_unlock>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__malloc_unlock+0x8>)
 8008dce:	f7ff bfe7 	b.w	8008da0 <__retarget_lock_release_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	2000038c 	.word	0x2000038c

08008dd8 <_Balloc>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ddc:	4604      	mov	r4, r0
 8008dde:	460d      	mov	r5, r1
 8008de0:	b976      	cbnz	r6, 8008e00 <_Balloc+0x28>
 8008de2:	2010      	movs	r0, #16
 8008de4:	f7fe faa4 	bl	8007330 <malloc>
 8008de8:	4602      	mov	r2, r0
 8008dea:	6260      	str	r0, [r4, #36]	; 0x24
 8008dec:	b920      	cbnz	r0, 8008df8 <_Balloc+0x20>
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <_Balloc+0x78>)
 8008df0:	4818      	ldr	r0, [pc, #96]	; (8008e54 <_Balloc+0x7c>)
 8008df2:	2166      	movs	r1, #102	; 0x66
 8008df4:	f000 ff48 	bl	8009c88 <__assert_func>
 8008df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dfc:	6006      	str	r6, [r0, #0]
 8008dfe:	60c6      	str	r6, [r0, #12]
 8008e00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e02:	68f3      	ldr	r3, [r6, #12]
 8008e04:	b183      	cbz	r3, 8008e28 <_Balloc+0x50>
 8008e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e0e:	b9b8      	cbnz	r0, 8008e40 <_Balloc+0x68>
 8008e10:	2101      	movs	r1, #1
 8008e12:	fa01 f605 	lsl.w	r6, r1, r5
 8008e16:	1d72      	adds	r2, r6, #5
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fb5a 	bl	80094d4 <_calloc_r>
 8008e20:	b160      	cbz	r0, 8008e3c <_Balloc+0x64>
 8008e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e26:	e00e      	b.n	8008e46 <_Balloc+0x6e>
 8008e28:	2221      	movs	r2, #33	; 0x21
 8008e2a:	2104      	movs	r1, #4
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f000 fb51 	bl	80094d4 <_calloc_r>
 8008e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e34:	60f0      	str	r0, [r6, #12]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e4      	bne.n	8008e06 <_Balloc+0x2e>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	6802      	ldr	r2, [r0, #0]
 8008e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e46:	2300      	movs	r3, #0
 8008e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e4c:	e7f7      	b.n	8008e3e <_Balloc+0x66>
 8008e4e:	bf00      	nop
 8008e50:	0800a365 	.word	0x0800a365
 8008e54:	0800a44c 	.word	0x0800a44c

08008e58 <_Bfree>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	b976      	cbnz	r6, 8008e80 <_Bfree+0x28>
 8008e62:	2010      	movs	r0, #16
 8008e64:	f7fe fa64 	bl	8007330 <malloc>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6268      	str	r0, [r5, #36]	; 0x24
 8008e6c:	b920      	cbnz	r0, 8008e78 <_Bfree+0x20>
 8008e6e:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <_Bfree+0x3c>)
 8008e70:	4809      	ldr	r0, [pc, #36]	; (8008e98 <_Bfree+0x40>)
 8008e72:	218a      	movs	r1, #138	; 0x8a
 8008e74:	f000 ff08 	bl	8009c88 <__assert_func>
 8008e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e7c:	6006      	str	r6, [r0, #0]
 8008e7e:	60c6      	str	r6, [r0, #12]
 8008e80:	b13c      	cbz	r4, 8008e92 <_Bfree+0x3a>
 8008e82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e84:	6862      	ldr	r2, [r4, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e8c:	6021      	str	r1, [r4, #0]
 8008e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	0800a365 	.word	0x0800a365
 8008e98:	0800a44c 	.word	0x0800a44c

08008e9c <__multadd>:
 8008e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	690e      	ldr	r6, [r1, #16]
 8008ea2:	4607      	mov	r7, r0
 8008ea4:	4698      	mov	r8, r3
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	f101 0014 	add.w	r0, r1, #20
 8008eac:	2300      	movs	r3, #0
 8008eae:	6805      	ldr	r5, [r0, #0]
 8008eb0:	b2a9      	uxth	r1, r5
 8008eb2:	fb02 8101 	mla	r1, r2, r1, r8
 8008eb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008eba:	0c2d      	lsrs	r5, r5, #16
 8008ebc:	fb02 c505 	mla	r5, r2, r5, ip
 8008ec0:	b289      	uxth	r1, r1
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ec8:	429e      	cmp	r6, r3
 8008eca:	f840 1b04 	str.w	r1, [r0], #4
 8008ece:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008ed2:	dcec      	bgt.n	8008eae <__multadd+0x12>
 8008ed4:	f1b8 0f00 	cmp.w	r8, #0
 8008ed8:	d022      	beq.n	8008f20 <__multadd+0x84>
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	42b3      	cmp	r3, r6
 8008ede:	dc19      	bgt.n	8008f14 <__multadd+0x78>
 8008ee0:	6861      	ldr	r1, [r4, #4]
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	3101      	adds	r1, #1
 8008ee6:	f7ff ff77 	bl	8008dd8 <_Balloc>
 8008eea:	4605      	mov	r5, r0
 8008eec:	b928      	cbnz	r0, 8008efa <__multadd+0x5e>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <__multadd+0x8c>)
 8008ef2:	480e      	ldr	r0, [pc, #56]	; (8008f2c <__multadd+0x90>)
 8008ef4:	21b5      	movs	r1, #181	; 0xb5
 8008ef6:	f000 fec7 	bl	8009c88 <__assert_func>
 8008efa:	6922      	ldr	r2, [r4, #16]
 8008efc:	3202      	adds	r2, #2
 8008efe:	f104 010c 	add.w	r1, r4, #12
 8008f02:	0092      	lsls	r2, r2, #2
 8008f04:	300c      	adds	r0, #12
 8008f06:	f7ff ff4c 	bl	8008da2 <memcpy>
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff ffa3 	bl	8008e58 <_Bfree>
 8008f12:	462c      	mov	r4, r5
 8008f14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008f18:	3601      	adds	r6, #1
 8008f1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008f1e:	6126      	str	r6, [r4, #16]
 8008f20:	4620      	mov	r0, r4
 8008f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f26:	bf00      	nop
 8008f28:	0800a3db 	.word	0x0800a3db
 8008f2c:	0800a44c 	.word	0x0800a44c

08008f30 <__hi0bits>:
 8008f30:	0c03      	lsrs	r3, r0, #16
 8008f32:	041b      	lsls	r3, r3, #16
 8008f34:	b9d3      	cbnz	r3, 8008f6c <__hi0bits+0x3c>
 8008f36:	0400      	lsls	r0, r0, #16
 8008f38:	2310      	movs	r3, #16
 8008f3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f3e:	bf04      	itt	eq
 8008f40:	0200      	lsleq	r0, r0, #8
 8008f42:	3308      	addeq	r3, #8
 8008f44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f48:	bf04      	itt	eq
 8008f4a:	0100      	lsleq	r0, r0, #4
 8008f4c:	3304      	addeq	r3, #4
 8008f4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f52:	bf04      	itt	eq
 8008f54:	0080      	lsleq	r0, r0, #2
 8008f56:	3302      	addeq	r3, #2
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	db05      	blt.n	8008f68 <__hi0bits+0x38>
 8008f5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f60:	f103 0301 	add.w	r3, r3, #1
 8008f64:	bf08      	it	eq
 8008f66:	2320      	moveq	r3, #32
 8008f68:	4618      	mov	r0, r3
 8008f6a:	4770      	bx	lr
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	e7e4      	b.n	8008f3a <__hi0bits+0xa>

08008f70 <__lo0bits>:
 8008f70:	6803      	ldr	r3, [r0, #0]
 8008f72:	f013 0207 	ands.w	r2, r3, #7
 8008f76:	4601      	mov	r1, r0
 8008f78:	d00b      	beq.n	8008f92 <__lo0bits+0x22>
 8008f7a:	07da      	lsls	r2, r3, #31
 8008f7c:	d424      	bmi.n	8008fc8 <__lo0bits+0x58>
 8008f7e:	0798      	lsls	r0, r3, #30
 8008f80:	bf49      	itett	mi
 8008f82:	085b      	lsrmi	r3, r3, #1
 8008f84:	089b      	lsrpl	r3, r3, #2
 8008f86:	2001      	movmi	r0, #1
 8008f88:	600b      	strmi	r3, [r1, #0]
 8008f8a:	bf5c      	itt	pl
 8008f8c:	600b      	strpl	r3, [r1, #0]
 8008f8e:	2002      	movpl	r0, #2
 8008f90:	4770      	bx	lr
 8008f92:	b298      	uxth	r0, r3
 8008f94:	b9b0      	cbnz	r0, 8008fc4 <__lo0bits+0x54>
 8008f96:	0c1b      	lsrs	r3, r3, #16
 8008f98:	2010      	movs	r0, #16
 8008f9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f9e:	bf04      	itt	eq
 8008fa0:	0a1b      	lsreq	r3, r3, #8
 8008fa2:	3008      	addeq	r0, #8
 8008fa4:	071a      	lsls	r2, r3, #28
 8008fa6:	bf04      	itt	eq
 8008fa8:	091b      	lsreq	r3, r3, #4
 8008faa:	3004      	addeq	r0, #4
 8008fac:	079a      	lsls	r2, r3, #30
 8008fae:	bf04      	itt	eq
 8008fb0:	089b      	lsreq	r3, r3, #2
 8008fb2:	3002      	addeq	r0, #2
 8008fb4:	07da      	lsls	r2, r3, #31
 8008fb6:	d403      	bmi.n	8008fc0 <__lo0bits+0x50>
 8008fb8:	085b      	lsrs	r3, r3, #1
 8008fba:	f100 0001 	add.w	r0, r0, #1
 8008fbe:	d005      	beq.n	8008fcc <__lo0bits+0x5c>
 8008fc0:	600b      	str	r3, [r1, #0]
 8008fc2:	4770      	bx	lr
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	e7e8      	b.n	8008f9a <__lo0bits+0x2a>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	4770      	bx	lr
 8008fcc:	2020      	movs	r0, #32
 8008fce:	4770      	bx	lr

08008fd0 <__i2b>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	f7ff feff 	bl	8008dd8 <_Balloc>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	b928      	cbnz	r0, 8008fea <__i2b+0x1a>
 8008fde:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <__i2b+0x24>)
 8008fe0:	4805      	ldr	r0, [pc, #20]	; (8008ff8 <__i2b+0x28>)
 8008fe2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fe6:	f000 fe4f 	bl	8009c88 <__assert_func>
 8008fea:	2301      	movs	r3, #1
 8008fec:	6144      	str	r4, [r0, #20]
 8008fee:	6103      	str	r3, [r0, #16]
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	bf00      	nop
 8008ff4:	0800a3db 	.word	0x0800a3db
 8008ff8:	0800a44c 	.word	0x0800a44c

08008ffc <__multiply>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	4614      	mov	r4, r2
 8009002:	690a      	ldr	r2, [r1, #16]
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	429a      	cmp	r2, r3
 8009008:	bfb8      	it	lt
 800900a:	460b      	movlt	r3, r1
 800900c:	460d      	mov	r5, r1
 800900e:	bfbc      	itt	lt
 8009010:	4625      	movlt	r5, r4
 8009012:	461c      	movlt	r4, r3
 8009014:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009018:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800901c:	68ab      	ldr	r3, [r5, #8]
 800901e:	6869      	ldr	r1, [r5, #4]
 8009020:	eb0a 0709 	add.w	r7, sl, r9
 8009024:	42bb      	cmp	r3, r7
 8009026:	b085      	sub	sp, #20
 8009028:	bfb8      	it	lt
 800902a:	3101      	addlt	r1, #1
 800902c:	f7ff fed4 	bl	8008dd8 <_Balloc>
 8009030:	b930      	cbnz	r0, 8009040 <__multiply+0x44>
 8009032:	4602      	mov	r2, r0
 8009034:	4b42      	ldr	r3, [pc, #264]	; (8009140 <__multiply+0x144>)
 8009036:	4843      	ldr	r0, [pc, #268]	; (8009144 <__multiply+0x148>)
 8009038:	f240 115d 	movw	r1, #349	; 0x15d
 800903c:	f000 fe24 	bl	8009c88 <__assert_func>
 8009040:	f100 0614 	add.w	r6, r0, #20
 8009044:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009048:	4633      	mov	r3, r6
 800904a:	2200      	movs	r2, #0
 800904c:	4543      	cmp	r3, r8
 800904e:	d31e      	bcc.n	800908e <__multiply+0x92>
 8009050:	f105 0c14 	add.w	ip, r5, #20
 8009054:	f104 0314 	add.w	r3, r4, #20
 8009058:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800905c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009060:	9202      	str	r2, [sp, #8]
 8009062:	ebac 0205 	sub.w	r2, ip, r5
 8009066:	3a15      	subs	r2, #21
 8009068:	f022 0203 	bic.w	r2, r2, #3
 800906c:	3204      	adds	r2, #4
 800906e:	f105 0115 	add.w	r1, r5, #21
 8009072:	458c      	cmp	ip, r1
 8009074:	bf38      	it	cc
 8009076:	2204      	movcc	r2, #4
 8009078:	9201      	str	r2, [sp, #4]
 800907a:	9a02      	ldr	r2, [sp, #8]
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	429a      	cmp	r2, r3
 8009080:	d808      	bhi.n	8009094 <__multiply+0x98>
 8009082:	2f00      	cmp	r7, #0
 8009084:	dc55      	bgt.n	8009132 <__multiply+0x136>
 8009086:	6107      	str	r7, [r0, #16]
 8009088:	b005      	add	sp, #20
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	f843 2b04 	str.w	r2, [r3], #4
 8009092:	e7db      	b.n	800904c <__multiply+0x50>
 8009094:	f8b3 a000 	ldrh.w	sl, [r3]
 8009098:	f1ba 0f00 	cmp.w	sl, #0
 800909c:	d020      	beq.n	80090e0 <__multiply+0xe4>
 800909e:	f105 0e14 	add.w	lr, r5, #20
 80090a2:	46b1      	mov	r9, r6
 80090a4:	2200      	movs	r2, #0
 80090a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80090aa:	f8d9 b000 	ldr.w	fp, [r9]
 80090ae:	b2a1      	uxth	r1, r4
 80090b0:	fa1f fb8b 	uxth.w	fp, fp
 80090b4:	fb0a b101 	mla	r1, sl, r1, fp
 80090b8:	4411      	add	r1, r2
 80090ba:	f8d9 2000 	ldr.w	r2, [r9]
 80090be:	0c24      	lsrs	r4, r4, #16
 80090c0:	0c12      	lsrs	r2, r2, #16
 80090c2:	fb0a 2404 	mla	r4, sl, r4, r2
 80090c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80090ca:	b289      	uxth	r1, r1
 80090cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80090d0:	45f4      	cmp	ip, lr
 80090d2:	f849 1b04 	str.w	r1, [r9], #4
 80090d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80090da:	d8e4      	bhi.n	80090a6 <__multiply+0xaa>
 80090dc:	9901      	ldr	r1, [sp, #4]
 80090de:	5072      	str	r2, [r6, r1]
 80090e0:	9a03      	ldr	r2, [sp, #12]
 80090e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090e6:	3304      	adds	r3, #4
 80090e8:	f1b9 0f00 	cmp.w	r9, #0
 80090ec:	d01f      	beq.n	800912e <__multiply+0x132>
 80090ee:	6834      	ldr	r4, [r6, #0]
 80090f0:	f105 0114 	add.w	r1, r5, #20
 80090f4:	46b6      	mov	lr, r6
 80090f6:	f04f 0a00 	mov.w	sl, #0
 80090fa:	880a      	ldrh	r2, [r1, #0]
 80090fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009100:	fb09 b202 	mla	r2, r9, r2, fp
 8009104:	4492      	add	sl, r2
 8009106:	b2a4      	uxth	r4, r4
 8009108:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800910c:	f84e 4b04 	str.w	r4, [lr], #4
 8009110:	f851 4b04 	ldr.w	r4, [r1], #4
 8009114:	f8be 2000 	ldrh.w	r2, [lr]
 8009118:	0c24      	lsrs	r4, r4, #16
 800911a:	fb09 2404 	mla	r4, r9, r4, r2
 800911e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009122:	458c      	cmp	ip, r1
 8009124:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009128:	d8e7      	bhi.n	80090fa <__multiply+0xfe>
 800912a:	9a01      	ldr	r2, [sp, #4]
 800912c:	50b4      	str	r4, [r6, r2]
 800912e:	3604      	adds	r6, #4
 8009130:	e7a3      	b.n	800907a <__multiply+0x7e>
 8009132:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1a5      	bne.n	8009086 <__multiply+0x8a>
 800913a:	3f01      	subs	r7, #1
 800913c:	e7a1      	b.n	8009082 <__multiply+0x86>
 800913e:	bf00      	nop
 8009140:	0800a3db 	.word	0x0800a3db
 8009144:	0800a44c 	.word	0x0800a44c

08009148 <__pow5mult>:
 8009148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800914c:	4615      	mov	r5, r2
 800914e:	f012 0203 	ands.w	r2, r2, #3
 8009152:	4606      	mov	r6, r0
 8009154:	460f      	mov	r7, r1
 8009156:	d007      	beq.n	8009168 <__pow5mult+0x20>
 8009158:	4c25      	ldr	r4, [pc, #148]	; (80091f0 <__pow5mult+0xa8>)
 800915a:	3a01      	subs	r2, #1
 800915c:	2300      	movs	r3, #0
 800915e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009162:	f7ff fe9b 	bl	8008e9c <__multadd>
 8009166:	4607      	mov	r7, r0
 8009168:	10ad      	asrs	r5, r5, #2
 800916a:	d03d      	beq.n	80091e8 <__pow5mult+0xa0>
 800916c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800916e:	b97c      	cbnz	r4, 8009190 <__pow5mult+0x48>
 8009170:	2010      	movs	r0, #16
 8009172:	f7fe f8dd 	bl	8007330 <malloc>
 8009176:	4602      	mov	r2, r0
 8009178:	6270      	str	r0, [r6, #36]	; 0x24
 800917a:	b928      	cbnz	r0, 8009188 <__pow5mult+0x40>
 800917c:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <__pow5mult+0xac>)
 800917e:	481e      	ldr	r0, [pc, #120]	; (80091f8 <__pow5mult+0xb0>)
 8009180:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009184:	f000 fd80 	bl	8009c88 <__assert_func>
 8009188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800918c:	6004      	str	r4, [r0, #0]
 800918e:	60c4      	str	r4, [r0, #12]
 8009190:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009198:	b94c      	cbnz	r4, 80091ae <__pow5mult+0x66>
 800919a:	f240 2171 	movw	r1, #625	; 0x271
 800919e:	4630      	mov	r0, r6
 80091a0:	f7ff ff16 	bl	8008fd0 <__i2b>
 80091a4:	2300      	movs	r3, #0
 80091a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80091aa:	4604      	mov	r4, r0
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	f04f 0900 	mov.w	r9, #0
 80091b2:	07eb      	lsls	r3, r5, #31
 80091b4:	d50a      	bpl.n	80091cc <__pow5mult+0x84>
 80091b6:	4639      	mov	r1, r7
 80091b8:	4622      	mov	r2, r4
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ff1e 	bl	8008ffc <__multiply>
 80091c0:	4639      	mov	r1, r7
 80091c2:	4680      	mov	r8, r0
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff fe47 	bl	8008e58 <_Bfree>
 80091ca:	4647      	mov	r7, r8
 80091cc:	106d      	asrs	r5, r5, #1
 80091ce:	d00b      	beq.n	80091e8 <__pow5mult+0xa0>
 80091d0:	6820      	ldr	r0, [r4, #0]
 80091d2:	b938      	cbnz	r0, 80091e4 <__pow5mult+0x9c>
 80091d4:	4622      	mov	r2, r4
 80091d6:	4621      	mov	r1, r4
 80091d8:	4630      	mov	r0, r6
 80091da:	f7ff ff0f 	bl	8008ffc <__multiply>
 80091de:	6020      	str	r0, [r4, #0]
 80091e0:	f8c0 9000 	str.w	r9, [r0]
 80091e4:	4604      	mov	r4, r0
 80091e6:	e7e4      	b.n	80091b2 <__pow5mult+0x6a>
 80091e8:	4638      	mov	r0, r7
 80091ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ee:	bf00      	nop
 80091f0:	0800a5a0 	.word	0x0800a5a0
 80091f4:	0800a365 	.word	0x0800a365
 80091f8:	0800a44c 	.word	0x0800a44c

080091fc <__lshift>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	6849      	ldr	r1, [r1, #4]
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	4607      	mov	r7, r0
 800920e:	4691      	mov	r9, r2
 8009210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009214:	f108 0601 	add.w	r6, r8, #1
 8009218:	42b3      	cmp	r3, r6
 800921a:	db0b      	blt.n	8009234 <__lshift+0x38>
 800921c:	4638      	mov	r0, r7
 800921e:	f7ff fddb 	bl	8008dd8 <_Balloc>
 8009222:	4605      	mov	r5, r0
 8009224:	b948      	cbnz	r0, 800923a <__lshift+0x3e>
 8009226:	4602      	mov	r2, r0
 8009228:	4b28      	ldr	r3, [pc, #160]	; (80092cc <__lshift+0xd0>)
 800922a:	4829      	ldr	r0, [pc, #164]	; (80092d0 <__lshift+0xd4>)
 800922c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009230:	f000 fd2a 	bl	8009c88 <__assert_func>
 8009234:	3101      	adds	r1, #1
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	e7ee      	b.n	8009218 <__lshift+0x1c>
 800923a:	2300      	movs	r3, #0
 800923c:	f100 0114 	add.w	r1, r0, #20
 8009240:	f100 0210 	add.w	r2, r0, #16
 8009244:	4618      	mov	r0, r3
 8009246:	4553      	cmp	r3, sl
 8009248:	db33      	blt.n	80092b2 <__lshift+0xb6>
 800924a:	6920      	ldr	r0, [r4, #16]
 800924c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009250:	f104 0314 	add.w	r3, r4, #20
 8009254:	f019 091f 	ands.w	r9, r9, #31
 8009258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800925c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009260:	d02b      	beq.n	80092ba <__lshift+0xbe>
 8009262:	f1c9 0e20 	rsb	lr, r9, #32
 8009266:	468a      	mov	sl, r1
 8009268:	2200      	movs	r2, #0
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	fa00 f009 	lsl.w	r0, r0, r9
 8009270:	4302      	orrs	r2, r0
 8009272:	f84a 2b04 	str.w	r2, [sl], #4
 8009276:	f853 2b04 	ldr.w	r2, [r3], #4
 800927a:	459c      	cmp	ip, r3
 800927c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009280:	d8f3      	bhi.n	800926a <__lshift+0x6e>
 8009282:	ebac 0304 	sub.w	r3, ip, r4
 8009286:	3b15      	subs	r3, #21
 8009288:	f023 0303 	bic.w	r3, r3, #3
 800928c:	3304      	adds	r3, #4
 800928e:	f104 0015 	add.w	r0, r4, #21
 8009292:	4584      	cmp	ip, r0
 8009294:	bf38      	it	cc
 8009296:	2304      	movcc	r3, #4
 8009298:	50ca      	str	r2, [r1, r3]
 800929a:	b10a      	cbz	r2, 80092a0 <__lshift+0xa4>
 800929c:	f108 0602 	add.w	r6, r8, #2
 80092a0:	3e01      	subs	r6, #1
 80092a2:	4638      	mov	r0, r7
 80092a4:	612e      	str	r6, [r5, #16]
 80092a6:	4621      	mov	r1, r4
 80092a8:	f7ff fdd6 	bl	8008e58 <_Bfree>
 80092ac:	4628      	mov	r0, r5
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80092b6:	3301      	adds	r3, #1
 80092b8:	e7c5      	b.n	8009246 <__lshift+0x4a>
 80092ba:	3904      	subs	r1, #4
 80092bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80092c4:	459c      	cmp	ip, r3
 80092c6:	d8f9      	bhi.n	80092bc <__lshift+0xc0>
 80092c8:	e7ea      	b.n	80092a0 <__lshift+0xa4>
 80092ca:	bf00      	nop
 80092cc:	0800a3db 	.word	0x0800a3db
 80092d0:	0800a44c 	.word	0x0800a44c

080092d4 <__mcmp>:
 80092d4:	b530      	push	{r4, r5, lr}
 80092d6:	6902      	ldr	r2, [r0, #16]
 80092d8:	690c      	ldr	r4, [r1, #16]
 80092da:	1b12      	subs	r2, r2, r4
 80092dc:	d10e      	bne.n	80092fc <__mcmp+0x28>
 80092de:	f100 0314 	add.w	r3, r0, #20
 80092e2:	3114      	adds	r1, #20
 80092e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092f4:	42a5      	cmp	r5, r4
 80092f6:	d003      	beq.n	8009300 <__mcmp+0x2c>
 80092f8:	d305      	bcc.n	8009306 <__mcmp+0x32>
 80092fa:	2201      	movs	r2, #1
 80092fc:	4610      	mov	r0, r2
 80092fe:	bd30      	pop	{r4, r5, pc}
 8009300:	4283      	cmp	r3, r0
 8009302:	d3f3      	bcc.n	80092ec <__mcmp+0x18>
 8009304:	e7fa      	b.n	80092fc <__mcmp+0x28>
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	e7f7      	b.n	80092fc <__mcmp+0x28>

0800930c <__mdiff>:
 800930c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	4606      	mov	r6, r0
 8009314:	4611      	mov	r1, r2
 8009316:	4620      	mov	r0, r4
 8009318:	4617      	mov	r7, r2
 800931a:	f7ff ffdb 	bl	80092d4 <__mcmp>
 800931e:	1e05      	subs	r5, r0, #0
 8009320:	d110      	bne.n	8009344 <__mdiff+0x38>
 8009322:	4629      	mov	r1, r5
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff fd57 	bl	8008dd8 <_Balloc>
 800932a:	b930      	cbnz	r0, 800933a <__mdiff+0x2e>
 800932c:	4b39      	ldr	r3, [pc, #228]	; (8009414 <__mdiff+0x108>)
 800932e:	4602      	mov	r2, r0
 8009330:	f240 2132 	movw	r1, #562	; 0x232
 8009334:	4838      	ldr	r0, [pc, #224]	; (8009418 <__mdiff+0x10c>)
 8009336:	f000 fca7 	bl	8009c88 <__assert_func>
 800933a:	2301      	movs	r3, #1
 800933c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009344:	bfa4      	itt	ge
 8009346:	463b      	movge	r3, r7
 8009348:	4627      	movge	r7, r4
 800934a:	4630      	mov	r0, r6
 800934c:	6879      	ldr	r1, [r7, #4]
 800934e:	bfa6      	itte	ge
 8009350:	461c      	movge	r4, r3
 8009352:	2500      	movge	r5, #0
 8009354:	2501      	movlt	r5, #1
 8009356:	f7ff fd3f 	bl	8008dd8 <_Balloc>
 800935a:	b920      	cbnz	r0, 8009366 <__mdiff+0x5a>
 800935c:	4b2d      	ldr	r3, [pc, #180]	; (8009414 <__mdiff+0x108>)
 800935e:	4602      	mov	r2, r0
 8009360:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009364:	e7e6      	b.n	8009334 <__mdiff+0x28>
 8009366:	693e      	ldr	r6, [r7, #16]
 8009368:	60c5      	str	r5, [r0, #12]
 800936a:	6925      	ldr	r5, [r4, #16]
 800936c:	f107 0114 	add.w	r1, r7, #20
 8009370:	f104 0914 	add.w	r9, r4, #20
 8009374:	f100 0e14 	add.w	lr, r0, #20
 8009378:	f107 0210 	add.w	r2, r7, #16
 800937c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009380:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009384:	46f2      	mov	sl, lr
 8009386:	2700      	movs	r7, #0
 8009388:	f859 3b04 	ldr.w	r3, [r9], #4
 800938c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009390:	fa1f f883 	uxth.w	r8, r3
 8009394:	fa17 f78b 	uxtah	r7, r7, fp
 8009398:	0c1b      	lsrs	r3, r3, #16
 800939a:	eba7 0808 	sub.w	r8, r7, r8
 800939e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093a6:	fa1f f888 	uxth.w	r8, r8
 80093aa:	141f      	asrs	r7, r3, #16
 80093ac:	454d      	cmp	r5, r9
 80093ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093b2:	f84a 3b04 	str.w	r3, [sl], #4
 80093b6:	d8e7      	bhi.n	8009388 <__mdiff+0x7c>
 80093b8:	1b2b      	subs	r3, r5, r4
 80093ba:	3b15      	subs	r3, #21
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	3304      	adds	r3, #4
 80093c2:	3415      	adds	r4, #21
 80093c4:	42a5      	cmp	r5, r4
 80093c6:	bf38      	it	cc
 80093c8:	2304      	movcc	r3, #4
 80093ca:	4419      	add	r1, r3
 80093cc:	4473      	add	r3, lr
 80093ce:	469e      	mov	lr, r3
 80093d0:	460d      	mov	r5, r1
 80093d2:	4565      	cmp	r5, ip
 80093d4:	d30e      	bcc.n	80093f4 <__mdiff+0xe8>
 80093d6:	f10c 0203 	add.w	r2, ip, #3
 80093da:	1a52      	subs	r2, r2, r1
 80093dc:	f022 0203 	bic.w	r2, r2, #3
 80093e0:	3903      	subs	r1, #3
 80093e2:	458c      	cmp	ip, r1
 80093e4:	bf38      	it	cc
 80093e6:	2200      	movcc	r2, #0
 80093e8:	441a      	add	r2, r3
 80093ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093ee:	b17b      	cbz	r3, 8009410 <__mdiff+0x104>
 80093f0:	6106      	str	r6, [r0, #16]
 80093f2:	e7a5      	b.n	8009340 <__mdiff+0x34>
 80093f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80093f8:	fa17 f488 	uxtah	r4, r7, r8
 80093fc:	1422      	asrs	r2, r4, #16
 80093fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009402:	b2a4      	uxth	r4, r4
 8009404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009408:	f84e 4b04 	str.w	r4, [lr], #4
 800940c:	1417      	asrs	r7, r2, #16
 800940e:	e7e0      	b.n	80093d2 <__mdiff+0xc6>
 8009410:	3e01      	subs	r6, #1
 8009412:	e7ea      	b.n	80093ea <__mdiff+0xde>
 8009414:	0800a3db 	.word	0x0800a3db
 8009418:	0800a44c 	.word	0x0800a44c

0800941c <__d2b>:
 800941c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009420:	4689      	mov	r9, r1
 8009422:	2101      	movs	r1, #1
 8009424:	ec57 6b10 	vmov	r6, r7, d0
 8009428:	4690      	mov	r8, r2
 800942a:	f7ff fcd5 	bl	8008dd8 <_Balloc>
 800942e:	4604      	mov	r4, r0
 8009430:	b930      	cbnz	r0, 8009440 <__d2b+0x24>
 8009432:	4602      	mov	r2, r0
 8009434:	4b25      	ldr	r3, [pc, #148]	; (80094cc <__d2b+0xb0>)
 8009436:	4826      	ldr	r0, [pc, #152]	; (80094d0 <__d2b+0xb4>)
 8009438:	f240 310a 	movw	r1, #778	; 0x30a
 800943c:	f000 fc24 	bl	8009c88 <__assert_func>
 8009440:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009448:	bb35      	cbnz	r5, 8009498 <__d2b+0x7c>
 800944a:	2e00      	cmp	r6, #0
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	d028      	beq.n	80094a2 <__d2b+0x86>
 8009450:	4668      	mov	r0, sp
 8009452:	9600      	str	r6, [sp, #0]
 8009454:	f7ff fd8c 	bl	8008f70 <__lo0bits>
 8009458:	9900      	ldr	r1, [sp, #0]
 800945a:	b300      	cbz	r0, 800949e <__d2b+0x82>
 800945c:	9a01      	ldr	r2, [sp, #4]
 800945e:	f1c0 0320 	rsb	r3, r0, #32
 8009462:	fa02 f303 	lsl.w	r3, r2, r3
 8009466:	430b      	orrs	r3, r1
 8009468:	40c2      	lsrs	r2, r0
 800946a:	6163      	str	r3, [r4, #20]
 800946c:	9201      	str	r2, [sp, #4]
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	61a3      	str	r3, [r4, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	bf14      	ite	ne
 8009476:	2202      	movne	r2, #2
 8009478:	2201      	moveq	r2, #1
 800947a:	6122      	str	r2, [r4, #16]
 800947c:	b1d5      	cbz	r5, 80094b4 <__d2b+0x98>
 800947e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009482:	4405      	add	r5, r0
 8009484:	f8c9 5000 	str.w	r5, [r9]
 8009488:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800948c:	f8c8 0000 	str.w	r0, [r8]
 8009490:	4620      	mov	r0, r4
 8009492:	b003      	add	sp, #12
 8009494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800949c:	e7d5      	b.n	800944a <__d2b+0x2e>
 800949e:	6161      	str	r1, [r4, #20]
 80094a0:	e7e5      	b.n	800946e <__d2b+0x52>
 80094a2:	a801      	add	r0, sp, #4
 80094a4:	f7ff fd64 	bl	8008f70 <__lo0bits>
 80094a8:	9b01      	ldr	r3, [sp, #4]
 80094aa:	6163      	str	r3, [r4, #20]
 80094ac:	2201      	movs	r2, #1
 80094ae:	6122      	str	r2, [r4, #16]
 80094b0:	3020      	adds	r0, #32
 80094b2:	e7e3      	b.n	800947c <__d2b+0x60>
 80094b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094bc:	f8c9 0000 	str.w	r0, [r9]
 80094c0:	6918      	ldr	r0, [r3, #16]
 80094c2:	f7ff fd35 	bl	8008f30 <__hi0bits>
 80094c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094ca:	e7df      	b.n	800948c <__d2b+0x70>
 80094cc:	0800a3db 	.word	0x0800a3db
 80094d0:	0800a44c 	.word	0x0800a44c

080094d4 <_calloc_r>:
 80094d4:	b513      	push	{r0, r1, r4, lr}
 80094d6:	434a      	muls	r2, r1
 80094d8:	4611      	mov	r1, r2
 80094da:	9201      	str	r2, [sp, #4]
 80094dc:	f7fd ff88 	bl	80073f0 <_malloc_r>
 80094e0:	4604      	mov	r4, r0
 80094e2:	b118      	cbz	r0, 80094ec <_calloc_r+0x18>
 80094e4:	9a01      	ldr	r2, [sp, #4]
 80094e6:	2100      	movs	r1, #0
 80094e8:	f7fd ff2a 	bl	8007340 <memset>
 80094ec:	4620      	mov	r0, r4
 80094ee:	b002      	add	sp, #8
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__ssputs_r>:
 80094f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f6:	688e      	ldr	r6, [r1, #8]
 80094f8:	429e      	cmp	r6, r3
 80094fa:	4682      	mov	sl, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	4690      	mov	r8, r2
 8009500:	461f      	mov	r7, r3
 8009502:	d838      	bhi.n	8009576 <__ssputs_r+0x84>
 8009504:	898a      	ldrh	r2, [r1, #12]
 8009506:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800950a:	d032      	beq.n	8009572 <__ssputs_r+0x80>
 800950c:	6825      	ldr	r5, [r4, #0]
 800950e:	6909      	ldr	r1, [r1, #16]
 8009510:	eba5 0901 	sub.w	r9, r5, r1
 8009514:	6965      	ldr	r5, [r4, #20]
 8009516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800951a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800951e:	3301      	adds	r3, #1
 8009520:	444b      	add	r3, r9
 8009522:	106d      	asrs	r5, r5, #1
 8009524:	429d      	cmp	r5, r3
 8009526:	bf38      	it	cc
 8009528:	461d      	movcc	r5, r3
 800952a:	0553      	lsls	r3, r2, #21
 800952c:	d531      	bpl.n	8009592 <__ssputs_r+0xa0>
 800952e:	4629      	mov	r1, r5
 8009530:	f7fd ff5e 	bl	80073f0 <_malloc_r>
 8009534:	4606      	mov	r6, r0
 8009536:	b950      	cbnz	r0, 800954e <__ssputs_r+0x5c>
 8009538:	230c      	movs	r3, #12
 800953a:	f8ca 3000 	str.w	r3, [sl]
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	f04f 30ff 	mov.w	r0, #4294967295
 800954a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954e:	6921      	ldr	r1, [r4, #16]
 8009550:	464a      	mov	r2, r9
 8009552:	f7ff fc26 	bl	8008da2 <memcpy>
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800955c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	6126      	str	r6, [r4, #16]
 8009564:	6165      	str	r5, [r4, #20]
 8009566:	444e      	add	r6, r9
 8009568:	eba5 0509 	sub.w	r5, r5, r9
 800956c:	6026      	str	r6, [r4, #0]
 800956e:	60a5      	str	r5, [r4, #8]
 8009570:	463e      	mov	r6, r7
 8009572:	42be      	cmp	r6, r7
 8009574:	d900      	bls.n	8009578 <__ssputs_r+0x86>
 8009576:	463e      	mov	r6, r7
 8009578:	4632      	mov	r2, r6
 800957a:	6820      	ldr	r0, [r4, #0]
 800957c:	4641      	mov	r1, r8
 800957e:	f000 fd0d 	bl	8009f9c <memmove>
 8009582:	68a3      	ldr	r3, [r4, #8]
 8009584:	6822      	ldr	r2, [r4, #0]
 8009586:	1b9b      	subs	r3, r3, r6
 8009588:	4432      	add	r2, r6
 800958a:	60a3      	str	r3, [r4, #8]
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	2000      	movs	r0, #0
 8009590:	e7db      	b.n	800954a <__ssputs_r+0x58>
 8009592:	462a      	mov	r2, r5
 8009594:	f000 fd1c 	bl	8009fd0 <_realloc_r>
 8009598:	4606      	mov	r6, r0
 800959a:	2800      	cmp	r0, #0
 800959c:	d1e1      	bne.n	8009562 <__ssputs_r+0x70>
 800959e:	6921      	ldr	r1, [r4, #16]
 80095a0:	4650      	mov	r0, sl
 80095a2:	f7fd fed5 	bl	8007350 <_free_r>
 80095a6:	e7c7      	b.n	8009538 <__ssputs_r+0x46>

080095a8 <_svfiprintf_r>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	4698      	mov	r8, r3
 80095ae:	898b      	ldrh	r3, [r1, #12]
 80095b0:	061b      	lsls	r3, r3, #24
 80095b2:	b09d      	sub	sp, #116	; 0x74
 80095b4:	4607      	mov	r7, r0
 80095b6:	460d      	mov	r5, r1
 80095b8:	4614      	mov	r4, r2
 80095ba:	d50e      	bpl.n	80095da <_svfiprintf_r+0x32>
 80095bc:	690b      	ldr	r3, [r1, #16]
 80095be:	b963      	cbnz	r3, 80095da <_svfiprintf_r+0x32>
 80095c0:	2140      	movs	r1, #64	; 0x40
 80095c2:	f7fd ff15 	bl	80073f0 <_malloc_r>
 80095c6:	6028      	str	r0, [r5, #0]
 80095c8:	6128      	str	r0, [r5, #16]
 80095ca:	b920      	cbnz	r0, 80095d6 <_svfiprintf_r+0x2e>
 80095cc:	230c      	movs	r3, #12
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	e0d1      	b.n	800977a <_svfiprintf_r+0x1d2>
 80095d6:	2340      	movs	r3, #64	; 0x40
 80095d8:	616b      	str	r3, [r5, #20]
 80095da:	2300      	movs	r3, #0
 80095dc:	9309      	str	r3, [sp, #36]	; 0x24
 80095de:	2320      	movs	r3, #32
 80095e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e8:	2330      	movs	r3, #48	; 0x30
 80095ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009794 <_svfiprintf_r+0x1ec>
 80095ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095f2:	f04f 0901 	mov.w	r9, #1
 80095f6:	4623      	mov	r3, r4
 80095f8:	469a      	mov	sl, r3
 80095fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095fe:	b10a      	cbz	r2, 8009604 <_svfiprintf_r+0x5c>
 8009600:	2a25      	cmp	r2, #37	; 0x25
 8009602:	d1f9      	bne.n	80095f8 <_svfiprintf_r+0x50>
 8009604:	ebba 0b04 	subs.w	fp, sl, r4
 8009608:	d00b      	beq.n	8009622 <_svfiprintf_r+0x7a>
 800960a:	465b      	mov	r3, fp
 800960c:	4622      	mov	r2, r4
 800960e:	4629      	mov	r1, r5
 8009610:	4638      	mov	r0, r7
 8009612:	f7ff ff6e 	bl	80094f2 <__ssputs_r>
 8009616:	3001      	adds	r0, #1
 8009618:	f000 80aa 	beq.w	8009770 <_svfiprintf_r+0x1c8>
 800961c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800961e:	445a      	add	r2, fp
 8009620:	9209      	str	r2, [sp, #36]	; 0x24
 8009622:	f89a 3000 	ldrb.w	r3, [sl]
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 80a2 	beq.w	8009770 <_svfiprintf_r+0x1c8>
 800962c:	2300      	movs	r3, #0
 800962e:	f04f 32ff 	mov.w	r2, #4294967295
 8009632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009636:	f10a 0a01 	add.w	sl, sl, #1
 800963a:	9304      	str	r3, [sp, #16]
 800963c:	9307      	str	r3, [sp, #28]
 800963e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009642:	931a      	str	r3, [sp, #104]	; 0x68
 8009644:	4654      	mov	r4, sl
 8009646:	2205      	movs	r2, #5
 8009648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800964c:	4851      	ldr	r0, [pc, #324]	; (8009794 <_svfiprintf_r+0x1ec>)
 800964e:	f7f6 fdc7 	bl	80001e0 <memchr>
 8009652:	9a04      	ldr	r2, [sp, #16]
 8009654:	b9d8      	cbnz	r0, 800968e <_svfiprintf_r+0xe6>
 8009656:	06d0      	lsls	r0, r2, #27
 8009658:	bf44      	itt	mi
 800965a:	2320      	movmi	r3, #32
 800965c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009660:	0711      	lsls	r1, r2, #28
 8009662:	bf44      	itt	mi
 8009664:	232b      	movmi	r3, #43	; 0x2b
 8009666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800966a:	f89a 3000 	ldrb.w	r3, [sl]
 800966e:	2b2a      	cmp	r3, #42	; 0x2a
 8009670:	d015      	beq.n	800969e <_svfiprintf_r+0xf6>
 8009672:	9a07      	ldr	r2, [sp, #28]
 8009674:	4654      	mov	r4, sl
 8009676:	2000      	movs	r0, #0
 8009678:	f04f 0c0a 	mov.w	ip, #10
 800967c:	4621      	mov	r1, r4
 800967e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009682:	3b30      	subs	r3, #48	; 0x30
 8009684:	2b09      	cmp	r3, #9
 8009686:	d94e      	bls.n	8009726 <_svfiprintf_r+0x17e>
 8009688:	b1b0      	cbz	r0, 80096b8 <_svfiprintf_r+0x110>
 800968a:	9207      	str	r2, [sp, #28]
 800968c:	e014      	b.n	80096b8 <_svfiprintf_r+0x110>
 800968e:	eba0 0308 	sub.w	r3, r0, r8
 8009692:	fa09 f303 	lsl.w	r3, r9, r3
 8009696:	4313      	orrs	r3, r2
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	46a2      	mov	sl, r4
 800969c:	e7d2      	b.n	8009644 <_svfiprintf_r+0x9c>
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	1d19      	adds	r1, r3, #4
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	9103      	str	r1, [sp, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfbb      	ittet	lt
 80096aa:	425b      	neglt	r3, r3
 80096ac:	f042 0202 	orrlt.w	r2, r2, #2
 80096b0:	9307      	strge	r3, [sp, #28]
 80096b2:	9307      	strlt	r3, [sp, #28]
 80096b4:	bfb8      	it	lt
 80096b6:	9204      	strlt	r2, [sp, #16]
 80096b8:	7823      	ldrb	r3, [r4, #0]
 80096ba:	2b2e      	cmp	r3, #46	; 0x2e
 80096bc:	d10c      	bne.n	80096d8 <_svfiprintf_r+0x130>
 80096be:	7863      	ldrb	r3, [r4, #1]
 80096c0:	2b2a      	cmp	r3, #42	; 0x2a
 80096c2:	d135      	bne.n	8009730 <_svfiprintf_r+0x188>
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	1d1a      	adds	r2, r3, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	9203      	str	r2, [sp, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bfb8      	it	lt
 80096d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80096d4:	3402      	adds	r4, #2
 80096d6:	9305      	str	r3, [sp, #20]
 80096d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097a4 <_svfiprintf_r+0x1fc>
 80096dc:	7821      	ldrb	r1, [r4, #0]
 80096de:	2203      	movs	r2, #3
 80096e0:	4650      	mov	r0, sl
 80096e2:	f7f6 fd7d 	bl	80001e0 <memchr>
 80096e6:	b140      	cbz	r0, 80096fa <_svfiprintf_r+0x152>
 80096e8:	2340      	movs	r3, #64	; 0x40
 80096ea:	eba0 000a 	sub.w	r0, r0, sl
 80096ee:	fa03 f000 	lsl.w	r0, r3, r0
 80096f2:	9b04      	ldr	r3, [sp, #16]
 80096f4:	4303      	orrs	r3, r0
 80096f6:	3401      	adds	r4, #1
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fe:	4826      	ldr	r0, [pc, #152]	; (8009798 <_svfiprintf_r+0x1f0>)
 8009700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009704:	2206      	movs	r2, #6
 8009706:	f7f6 fd6b 	bl	80001e0 <memchr>
 800970a:	2800      	cmp	r0, #0
 800970c:	d038      	beq.n	8009780 <_svfiprintf_r+0x1d8>
 800970e:	4b23      	ldr	r3, [pc, #140]	; (800979c <_svfiprintf_r+0x1f4>)
 8009710:	bb1b      	cbnz	r3, 800975a <_svfiprintf_r+0x1b2>
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	3307      	adds	r3, #7
 8009716:	f023 0307 	bic.w	r3, r3, #7
 800971a:	3308      	adds	r3, #8
 800971c:	9303      	str	r3, [sp, #12]
 800971e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009720:	4433      	add	r3, r6
 8009722:	9309      	str	r3, [sp, #36]	; 0x24
 8009724:	e767      	b.n	80095f6 <_svfiprintf_r+0x4e>
 8009726:	fb0c 3202 	mla	r2, ip, r2, r3
 800972a:	460c      	mov	r4, r1
 800972c:	2001      	movs	r0, #1
 800972e:	e7a5      	b.n	800967c <_svfiprintf_r+0xd4>
 8009730:	2300      	movs	r3, #0
 8009732:	3401      	adds	r4, #1
 8009734:	9305      	str	r3, [sp, #20]
 8009736:	4619      	mov	r1, r3
 8009738:	f04f 0c0a 	mov.w	ip, #10
 800973c:	4620      	mov	r0, r4
 800973e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009742:	3a30      	subs	r2, #48	; 0x30
 8009744:	2a09      	cmp	r2, #9
 8009746:	d903      	bls.n	8009750 <_svfiprintf_r+0x1a8>
 8009748:	2b00      	cmp	r3, #0
 800974a:	d0c5      	beq.n	80096d8 <_svfiprintf_r+0x130>
 800974c:	9105      	str	r1, [sp, #20]
 800974e:	e7c3      	b.n	80096d8 <_svfiprintf_r+0x130>
 8009750:	fb0c 2101 	mla	r1, ip, r1, r2
 8009754:	4604      	mov	r4, r0
 8009756:	2301      	movs	r3, #1
 8009758:	e7f0      	b.n	800973c <_svfiprintf_r+0x194>
 800975a:	ab03      	add	r3, sp, #12
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	462a      	mov	r2, r5
 8009760:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <_svfiprintf_r+0x1f8>)
 8009762:	a904      	add	r1, sp, #16
 8009764:	4638      	mov	r0, r7
 8009766:	f7fd ff3d 	bl	80075e4 <_printf_float>
 800976a:	1c42      	adds	r2, r0, #1
 800976c:	4606      	mov	r6, r0
 800976e:	d1d6      	bne.n	800971e <_svfiprintf_r+0x176>
 8009770:	89ab      	ldrh	r3, [r5, #12]
 8009772:	065b      	lsls	r3, r3, #25
 8009774:	f53f af2c 	bmi.w	80095d0 <_svfiprintf_r+0x28>
 8009778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800977a:	b01d      	add	sp, #116	; 0x74
 800977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009780:	ab03      	add	r3, sp, #12
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	462a      	mov	r2, r5
 8009786:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <_svfiprintf_r+0x1f8>)
 8009788:	a904      	add	r1, sp, #16
 800978a:	4638      	mov	r0, r7
 800978c:	f7fe f9ce 	bl	8007b2c <_printf_i>
 8009790:	e7eb      	b.n	800976a <_svfiprintf_r+0x1c2>
 8009792:	bf00      	nop
 8009794:	0800a5ac 	.word	0x0800a5ac
 8009798:	0800a5b6 	.word	0x0800a5b6
 800979c:	080075e5 	.word	0x080075e5
 80097a0:	080094f3 	.word	0x080094f3
 80097a4:	0800a5b2 	.word	0x0800a5b2

080097a8 <__sfputc_r>:
 80097a8:	6893      	ldr	r3, [r2, #8]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	b410      	push	{r4}
 80097b0:	6093      	str	r3, [r2, #8]
 80097b2:	da08      	bge.n	80097c6 <__sfputc_r+0x1e>
 80097b4:	6994      	ldr	r4, [r2, #24]
 80097b6:	42a3      	cmp	r3, r4
 80097b8:	db01      	blt.n	80097be <__sfputc_r+0x16>
 80097ba:	290a      	cmp	r1, #10
 80097bc:	d103      	bne.n	80097c6 <__sfputc_r+0x1e>
 80097be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c2:	f000 b98f 	b.w	8009ae4 <__swbuf_r>
 80097c6:	6813      	ldr	r3, [r2, #0]
 80097c8:	1c58      	adds	r0, r3, #1
 80097ca:	6010      	str	r0, [r2, #0]
 80097cc:	7019      	strb	r1, [r3, #0]
 80097ce:	4608      	mov	r0, r1
 80097d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <__sfputs_r>:
 80097d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d8:	4606      	mov	r6, r0
 80097da:	460f      	mov	r7, r1
 80097dc:	4614      	mov	r4, r2
 80097de:	18d5      	adds	r5, r2, r3
 80097e0:	42ac      	cmp	r4, r5
 80097e2:	d101      	bne.n	80097e8 <__sfputs_r+0x12>
 80097e4:	2000      	movs	r0, #0
 80097e6:	e007      	b.n	80097f8 <__sfputs_r+0x22>
 80097e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ec:	463a      	mov	r2, r7
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff ffda 	bl	80097a8 <__sfputc_r>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d1f3      	bne.n	80097e0 <__sfputs_r+0xa>
 80097f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097fc <_vfiprintf_r>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	460d      	mov	r5, r1
 8009802:	b09d      	sub	sp, #116	; 0x74
 8009804:	4614      	mov	r4, r2
 8009806:	4698      	mov	r8, r3
 8009808:	4606      	mov	r6, r0
 800980a:	b118      	cbz	r0, 8009814 <_vfiprintf_r+0x18>
 800980c:	6983      	ldr	r3, [r0, #24]
 800980e:	b90b      	cbnz	r3, 8009814 <_vfiprintf_r+0x18>
 8009810:	f7ff fa22 	bl	8008c58 <__sinit>
 8009814:	4b89      	ldr	r3, [pc, #548]	; (8009a3c <_vfiprintf_r+0x240>)
 8009816:	429d      	cmp	r5, r3
 8009818:	d11b      	bne.n	8009852 <_vfiprintf_r+0x56>
 800981a:	6875      	ldr	r5, [r6, #4]
 800981c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800981e:	07d9      	lsls	r1, r3, #31
 8009820:	d405      	bmi.n	800982e <_vfiprintf_r+0x32>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	059a      	lsls	r2, r3, #22
 8009826:	d402      	bmi.n	800982e <_vfiprintf_r+0x32>
 8009828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982a:	f7ff fab8 	bl	8008d9e <__retarget_lock_acquire_recursive>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	071b      	lsls	r3, r3, #28
 8009832:	d501      	bpl.n	8009838 <_vfiprintf_r+0x3c>
 8009834:	692b      	ldr	r3, [r5, #16]
 8009836:	b9eb      	cbnz	r3, 8009874 <_vfiprintf_r+0x78>
 8009838:	4629      	mov	r1, r5
 800983a:	4630      	mov	r0, r6
 800983c:	f000 f9b6 	bl	8009bac <__swsetup_r>
 8009840:	b1c0      	cbz	r0, 8009874 <_vfiprintf_r+0x78>
 8009842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009844:	07dc      	lsls	r4, r3, #31
 8009846:	d50e      	bpl.n	8009866 <_vfiprintf_r+0x6a>
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	b01d      	add	sp, #116	; 0x74
 800984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009852:	4b7b      	ldr	r3, [pc, #492]	; (8009a40 <_vfiprintf_r+0x244>)
 8009854:	429d      	cmp	r5, r3
 8009856:	d101      	bne.n	800985c <_vfiprintf_r+0x60>
 8009858:	68b5      	ldr	r5, [r6, #8]
 800985a:	e7df      	b.n	800981c <_vfiprintf_r+0x20>
 800985c:	4b79      	ldr	r3, [pc, #484]	; (8009a44 <_vfiprintf_r+0x248>)
 800985e:	429d      	cmp	r5, r3
 8009860:	bf08      	it	eq
 8009862:	68f5      	ldreq	r5, [r6, #12]
 8009864:	e7da      	b.n	800981c <_vfiprintf_r+0x20>
 8009866:	89ab      	ldrh	r3, [r5, #12]
 8009868:	0598      	lsls	r0, r3, #22
 800986a:	d4ed      	bmi.n	8009848 <_vfiprintf_r+0x4c>
 800986c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800986e:	f7ff fa97 	bl	8008da0 <__retarget_lock_release_recursive>
 8009872:	e7e9      	b.n	8009848 <_vfiprintf_r+0x4c>
 8009874:	2300      	movs	r3, #0
 8009876:	9309      	str	r3, [sp, #36]	; 0x24
 8009878:	2320      	movs	r3, #32
 800987a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800987e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009882:	2330      	movs	r3, #48	; 0x30
 8009884:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a48 <_vfiprintf_r+0x24c>
 8009888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800988c:	f04f 0901 	mov.w	r9, #1
 8009890:	4623      	mov	r3, r4
 8009892:	469a      	mov	sl, r3
 8009894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009898:	b10a      	cbz	r2, 800989e <_vfiprintf_r+0xa2>
 800989a:	2a25      	cmp	r2, #37	; 0x25
 800989c:	d1f9      	bne.n	8009892 <_vfiprintf_r+0x96>
 800989e:	ebba 0b04 	subs.w	fp, sl, r4
 80098a2:	d00b      	beq.n	80098bc <_vfiprintf_r+0xc0>
 80098a4:	465b      	mov	r3, fp
 80098a6:	4622      	mov	r2, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff ff93 	bl	80097d6 <__sfputs_r>
 80098b0:	3001      	adds	r0, #1
 80098b2:	f000 80aa 	beq.w	8009a0a <_vfiprintf_r+0x20e>
 80098b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b8:	445a      	add	r2, fp
 80098ba:	9209      	str	r2, [sp, #36]	; 0x24
 80098bc:	f89a 3000 	ldrb.w	r3, [sl]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 80a2 	beq.w	8009a0a <_vfiprintf_r+0x20e>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f04f 32ff 	mov.w	r2, #4294967295
 80098cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d0:	f10a 0a01 	add.w	sl, sl, #1
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	9307      	str	r3, [sp, #28]
 80098d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098dc:	931a      	str	r3, [sp, #104]	; 0x68
 80098de:	4654      	mov	r4, sl
 80098e0:	2205      	movs	r2, #5
 80098e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e6:	4858      	ldr	r0, [pc, #352]	; (8009a48 <_vfiprintf_r+0x24c>)
 80098e8:	f7f6 fc7a 	bl	80001e0 <memchr>
 80098ec:	9a04      	ldr	r2, [sp, #16]
 80098ee:	b9d8      	cbnz	r0, 8009928 <_vfiprintf_r+0x12c>
 80098f0:	06d1      	lsls	r1, r2, #27
 80098f2:	bf44      	itt	mi
 80098f4:	2320      	movmi	r3, #32
 80098f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fa:	0713      	lsls	r3, r2, #28
 80098fc:	bf44      	itt	mi
 80098fe:	232b      	movmi	r3, #43	; 0x2b
 8009900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009904:	f89a 3000 	ldrb.w	r3, [sl]
 8009908:	2b2a      	cmp	r3, #42	; 0x2a
 800990a:	d015      	beq.n	8009938 <_vfiprintf_r+0x13c>
 800990c:	9a07      	ldr	r2, [sp, #28]
 800990e:	4654      	mov	r4, sl
 8009910:	2000      	movs	r0, #0
 8009912:	f04f 0c0a 	mov.w	ip, #10
 8009916:	4621      	mov	r1, r4
 8009918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800991c:	3b30      	subs	r3, #48	; 0x30
 800991e:	2b09      	cmp	r3, #9
 8009920:	d94e      	bls.n	80099c0 <_vfiprintf_r+0x1c4>
 8009922:	b1b0      	cbz	r0, 8009952 <_vfiprintf_r+0x156>
 8009924:	9207      	str	r2, [sp, #28]
 8009926:	e014      	b.n	8009952 <_vfiprintf_r+0x156>
 8009928:	eba0 0308 	sub.w	r3, r0, r8
 800992c:	fa09 f303 	lsl.w	r3, r9, r3
 8009930:	4313      	orrs	r3, r2
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	46a2      	mov	sl, r4
 8009936:	e7d2      	b.n	80098de <_vfiprintf_r+0xe2>
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	1d19      	adds	r1, r3, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	9103      	str	r1, [sp, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	bfbb      	ittet	lt
 8009944:	425b      	neglt	r3, r3
 8009946:	f042 0202 	orrlt.w	r2, r2, #2
 800994a:	9307      	strge	r3, [sp, #28]
 800994c:	9307      	strlt	r3, [sp, #28]
 800994e:	bfb8      	it	lt
 8009950:	9204      	strlt	r2, [sp, #16]
 8009952:	7823      	ldrb	r3, [r4, #0]
 8009954:	2b2e      	cmp	r3, #46	; 0x2e
 8009956:	d10c      	bne.n	8009972 <_vfiprintf_r+0x176>
 8009958:	7863      	ldrb	r3, [r4, #1]
 800995a:	2b2a      	cmp	r3, #42	; 0x2a
 800995c:	d135      	bne.n	80099ca <_vfiprintf_r+0x1ce>
 800995e:	9b03      	ldr	r3, [sp, #12]
 8009960:	1d1a      	adds	r2, r3, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	9203      	str	r2, [sp, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	bfb8      	it	lt
 800996a:	f04f 33ff 	movlt.w	r3, #4294967295
 800996e:	3402      	adds	r4, #2
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a58 <_vfiprintf_r+0x25c>
 8009976:	7821      	ldrb	r1, [r4, #0]
 8009978:	2203      	movs	r2, #3
 800997a:	4650      	mov	r0, sl
 800997c:	f7f6 fc30 	bl	80001e0 <memchr>
 8009980:	b140      	cbz	r0, 8009994 <_vfiprintf_r+0x198>
 8009982:	2340      	movs	r3, #64	; 0x40
 8009984:	eba0 000a 	sub.w	r0, r0, sl
 8009988:	fa03 f000 	lsl.w	r0, r3, r0
 800998c:	9b04      	ldr	r3, [sp, #16]
 800998e:	4303      	orrs	r3, r0
 8009990:	3401      	adds	r4, #1
 8009992:	9304      	str	r3, [sp, #16]
 8009994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009998:	482c      	ldr	r0, [pc, #176]	; (8009a4c <_vfiprintf_r+0x250>)
 800999a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800999e:	2206      	movs	r2, #6
 80099a0:	f7f6 fc1e 	bl	80001e0 <memchr>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d03f      	beq.n	8009a28 <_vfiprintf_r+0x22c>
 80099a8:	4b29      	ldr	r3, [pc, #164]	; (8009a50 <_vfiprintf_r+0x254>)
 80099aa:	bb1b      	cbnz	r3, 80099f4 <_vfiprintf_r+0x1f8>
 80099ac:	9b03      	ldr	r3, [sp, #12]
 80099ae:	3307      	adds	r3, #7
 80099b0:	f023 0307 	bic.w	r3, r3, #7
 80099b4:	3308      	adds	r3, #8
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ba:	443b      	add	r3, r7
 80099bc:	9309      	str	r3, [sp, #36]	; 0x24
 80099be:	e767      	b.n	8009890 <_vfiprintf_r+0x94>
 80099c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c4:	460c      	mov	r4, r1
 80099c6:	2001      	movs	r0, #1
 80099c8:	e7a5      	b.n	8009916 <_vfiprintf_r+0x11a>
 80099ca:	2300      	movs	r3, #0
 80099cc:	3401      	adds	r4, #1
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	4619      	mov	r1, r3
 80099d2:	f04f 0c0a 	mov.w	ip, #10
 80099d6:	4620      	mov	r0, r4
 80099d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099dc:	3a30      	subs	r2, #48	; 0x30
 80099de:	2a09      	cmp	r2, #9
 80099e0:	d903      	bls.n	80099ea <_vfiprintf_r+0x1ee>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0c5      	beq.n	8009972 <_vfiprintf_r+0x176>
 80099e6:	9105      	str	r1, [sp, #20]
 80099e8:	e7c3      	b.n	8009972 <_vfiprintf_r+0x176>
 80099ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ee:	4604      	mov	r4, r0
 80099f0:	2301      	movs	r3, #1
 80099f2:	e7f0      	b.n	80099d6 <_vfiprintf_r+0x1da>
 80099f4:	ab03      	add	r3, sp, #12
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	462a      	mov	r2, r5
 80099fa:	4b16      	ldr	r3, [pc, #88]	; (8009a54 <_vfiprintf_r+0x258>)
 80099fc:	a904      	add	r1, sp, #16
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7fd fdf0 	bl	80075e4 <_printf_float>
 8009a04:	4607      	mov	r7, r0
 8009a06:	1c78      	adds	r0, r7, #1
 8009a08:	d1d6      	bne.n	80099b8 <_vfiprintf_r+0x1bc>
 8009a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a0c:	07d9      	lsls	r1, r3, #31
 8009a0e:	d405      	bmi.n	8009a1c <_vfiprintf_r+0x220>
 8009a10:	89ab      	ldrh	r3, [r5, #12]
 8009a12:	059a      	lsls	r2, r3, #22
 8009a14:	d402      	bmi.n	8009a1c <_vfiprintf_r+0x220>
 8009a16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a18:	f7ff f9c2 	bl	8008da0 <__retarget_lock_release_recursive>
 8009a1c:	89ab      	ldrh	r3, [r5, #12]
 8009a1e:	065b      	lsls	r3, r3, #25
 8009a20:	f53f af12 	bmi.w	8009848 <_vfiprintf_r+0x4c>
 8009a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a26:	e711      	b.n	800984c <_vfiprintf_r+0x50>
 8009a28:	ab03      	add	r3, sp, #12
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	462a      	mov	r2, r5
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <_vfiprintf_r+0x258>)
 8009a30:	a904      	add	r1, sp, #16
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7fe f87a 	bl	8007b2c <_printf_i>
 8009a38:	e7e4      	b.n	8009a04 <_vfiprintf_r+0x208>
 8009a3a:	bf00      	nop
 8009a3c:	0800a40c 	.word	0x0800a40c
 8009a40:	0800a42c 	.word	0x0800a42c
 8009a44:	0800a3ec 	.word	0x0800a3ec
 8009a48:	0800a5ac 	.word	0x0800a5ac
 8009a4c:	0800a5b6 	.word	0x0800a5b6
 8009a50:	080075e5 	.word	0x080075e5
 8009a54:	080097d7 	.word	0x080097d7
 8009a58:	0800a5b2 	.word	0x0800a5b2

08009a5c <__sread>:
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	460c      	mov	r4, r1
 8009a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a64:	f000 fada 	bl	800a01c <_read_r>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	bfab      	itete	ge
 8009a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a70:	181b      	addge	r3, r3, r0
 8009a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a76:	bfac      	ite	ge
 8009a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a7a:	81a3      	strhlt	r3, [r4, #12]
 8009a7c:	bd10      	pop	{r4, pc}

08009a7e <__swrite>:
 8009a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a82:	461f      	mov	r7, r3
 8009a84:	898b      	ldrh	r3, [r1, #12]
 8009a86:	05db      	lsls	r3, r3, #23
 8009a88:	4605      	mov	r5, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	4616      	mov	r6, r2
 8009a8e:	d505      	bpl.n	8009a9c <__swrite+0x1e>
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	2302      	movs	r3, #2
 8009a96:	2200      	movs	r2, #0
 8009a98:	f000 f9f8 	bl	8009e8c <_lseek_r>
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	463b      	mov	r3, r7
 8009aac:	4628      	mov	r0, r5
 8009aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab2:	f000 b869 	b.w	8009b88 <_write_r>

08009ab6 <__sseek>:
 8009ab6:	b510      	push	{r4, lr}
 8009ab8:	460c      	mov	r4, r1
 8009aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009abe:	f000 f9e5 	bl	8009e8c <_lseek_r>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	bf15      	itete	ne
 8009ac8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ad2:	81a3      	strheq	r3, [r4, #12]
 8009ad4:	bf18      	it	ne
 8009ad6:	81a3      	strhne	r3, [r4, #12]
 8009ad8:	bd10      	pop	{r4, pc}

08009ada <__sclose>:
 8009ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ade:	f000 b8f1 	b.w	8009cc4 <_close_r>
	...

08009ae4 <__swbuf_r>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	460e      	mov	r6, r1
 8009ae8:	4614      	mov	r4, r2
 8009aea:	4605      	mov	r5, r0
 8009aec:	b118      	cbz	r0, 8009af6 <__swbuf_r+0x12>
 8009aee:	6983      	ldr	r3, [r0, #24]
 8009af0:	b90b      	cbnz	r3, 8009af6 <__swbuf_r+0x12>
 8009af2:	f7ff f8b1 	bl	8008c58 <__sinit>
 8009af6:	4b21      	ldr	r3, [pc, #132]	; (8009b7c <__swbuf_r+0x98>)
 8009af8:	429c      	cmp	r4, r3
 8009afa:	d12b      	bne.n	8009b54 <__swbuf_r+0x70>
 8009afc:	686c      	ldr	r4, [r5, #4]
 8009afe:	69a3      	ldr	r3, [r4, #24]
 8009b00:	60a3      	str	r3, [r4, #8]
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	071a      	lsls	r2, r3, #28
 8009b06:	d52f      	bpl.n	8009b68 <__swbuf_r+0x84>
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	b36b      	cbz	r3, 8009b68 <__swbuf_r+0x84>
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	6820      	ldr	r0, [r4, #0]
 8009b10:	1ac0      	subs	r0, r0, r3
 8009b12:	6963      	ldr	r3, [r4, #20]
 8009b14:	b2f6      	uxtb	r6, r6
 8009b16:	4283      	cmp	r3, r0
 8009b18:	4637      	mov	r7, r6
 8009b1a:	dc04      	bgt.n	8009b26 <__swbuf_r+0x42>
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f000 f966 	bl	8009df0 <_fflush_r>
 8009b24:	bb30      	cbnz	r0, 8009b74 <__swbuf_r+0x90>
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	60a3      	str	r3, [r4, #8]
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	6022      	str	r2, [r4, #0]
 8009b32:	701e      	strb	r6, [r3, #0]
 8009b34:	6963      	ldr	r3, [r4, #20]
 8009b36:	3001      	adds	r0, #1
 8009b38:	4283      	cmp	r3, r0
 8009b3a:	d004      	beq.n	8009b46 <__swbuf_r+0x62>
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	07db      	lsls	r3, r3, #31
 8009b40:	d506      	bpl.n	8009b50 <__swbuf_r+0x6c>
 8009b42:	2e0a      	cmp	r6, #10
 8009b44:	d104      	bne.n	8009b50 <__swbuf_r+0x6c>
 8009b46:	4621      	mov	r1, r4
 8009b48:	4628      	mov	r0, r5
 8009b4a:	f000 f951 	bl	8009df0 <_fflush_r>
 8009b4e:	b988      	cbnz	r0, 8009b74 <__swbuf_r+0x90>
 8009b50:	4638      	mov	r0, r7
 8009b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b54:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <__swbuf_r+0x9c>)
 8009b56:	429c      	cmp	r4, r3
 8009b58:	d101      	bne.n	8009b5e <__swbuf_r+0x7a>
 8009b5a:	68ac      	ldr	r4, [r5, #8]
 8009b5c:	e7cf      	b.n	8009afe <__swbuf_r+0x1a>
 8009b5e:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <__swbuf_r+0xa0>)
 8009b60:	429c      	cmp	r4, r3
 8009b62:	bf08      	it	eq
 8009b64:	68ec      	ldreq	r4, [r5, #12]
 8009b66:	e7ca      	b.n	8009afe <__swbuf_r+0x1a>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 f81e 	bl	8009bac <__swsetup_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0cb      	beq.n	8009b0c <__swbuf_r+0x28>
 8009b74:	f04f 37ff 	mov.w	r7, #4294967295
 8009b78:	e7ea      	b.n	8009b50 <__swbuf_r+0x6c>
 8009b7a:	bf00      	nop
 8009b7c:	0800a40c 	.word	0x0800a40c
 8009b80:	0800a42c 	.word	0x0800a42c
 8009b84:	0800a3ec 	.word	0x0800a3ec

08009b88 <_write_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d07      	ldr	r5, [pc, #28]	; (8009ba8 <_write_r+0x20>)
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	2200      	movs	r2, #0
 8009b94:	602a      	str	r2, [r5, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	f7f7 fcd7 	bl	800154a <_write>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_write_r+0x1e>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_write_r+0x1e>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20000394 	.word	0x20000394

08009bac <__swsetup_r>:
 8009bac:	4b32      	ldr	r3, [pc, #200]	; (8009c78 <__swsetup_r+0xcc>)
 8009bae:	b570      	push	{r4, r5, r6, lr}
 8009bb0:	681d      	ldr	r5, [r3, #0]
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	b125      	cbz	r5, 8009bc2 <__swsetup_r+0x16>
 8009bb8:	69ab      	ldr	r3, [r5, #24]
 8009bba:	b913      	cbnz	r3, 8009bc2 <__swsetup_r+0x16>
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f7ff f84b 	bl	8008c58 <__sinit>
 8009bc2:	4b2e      	ldr	r3, [pc, #184]	; (8009c7c <__swsetup_r+0xd0>)
 8009bc4:	429c      	cmp	r4, r3
 8009bc6:	d10f      	bne.n	8009be8 <__swsetup_r+0x3c>
 8009bc8:	686c      	ldr	r4, [r5, #4]
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bd0:	0719      	lsls	r1, r3, #28
 8009bd2:	d42c      	bmi.n	8009c2e <__swsetup_r+0x82>
 8009bd4:	06dd      	lsls	r5, r3, #27
 8009bd6:	d411      	bmi.n	8009bfc <__swsetup_r+0x50>
 8009bd8:	2309      	movs	r3, #9
 8009bda:	6033      	str	r3, [r6, #0]
 8009bdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009be0:	81a3      	strh	r3, [r4, #12]
 8009be2:	f04f 30ff 	mov.w	r0, #4294967295
 8009be6:	e03e      	b.n	8009c66 <__swsetup_r+0xba>
 8009be8:	4b25      	ldr	r3, [pc, #148]	; (8009c80 <__swsetup_r+0xd4>)
 8009bea:	429c      	cmp	r4, r3
 8009bec:	d101      	bne.n	8009bf2 <__swsetup_r+0x46>
 8009bee:	68ac      	ldr	r4, [r5, #8]
 8009bf0:	e7eb      	b.n	8009bca <__swsetup_r+0x1e>
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <__swsetup_r+0xd8>)
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	bf08      	it	eq
 8009bf8:	68ec      	ldreq	r4, [r5, #12]
 8009bfa:	e7e6      	b.n	8009bca <__swsetup_r+0x1e>
 8009bfc:	0758      	lsls	r0, r3, #29
 8009bfe:	d512      	bpl.n	8009c26 <__swsetup_r+0x7a>
 8009c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c02:	b141      	cbz	r1, 8009c16 <__swsetup_r+0x6a>
 8009c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c08:	4299      	cmp	r1, r3
 8009c0a:	d002      	beq.n	8009c12 <__swsetup_r+0x66>
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f7fd fb9f 	bl	8007350 <_free_r>
 8009c12:	2300      	movs	r3, #0
 8009c14:	6363      	str	r3, [r4, #52]	; 0x34
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	6063      	str	r3, [r4, #4]
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f043 0308 	orr.w	r3, r3, #8
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	b94b      	cbnz	r3, 8009c46 <__swsetup_r+0x9a>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c3c:	d003      	beq.n	8009c46 <__swsetup_r+0x9a>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4630      	mov	r0, r6
 8009c42:	f000 f959 	bl	8009ef8 <__smakebuf_r>
 8009c46:	89a0      	ldrh	r0, [r4, #12]
 8009c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c4c:	f010 0301 	ands.w	r3, r0, #1
 8009c50:	d00a      	beq.n	8009c68 <__swsetup_r+0xbc>
 8009c52:	2300      	movs	r3, #0
 8009c54:	60a3      	str	r3, [r4, #8]
 8009c56:	6963      	ldr	r3, [r4, #20]
 8009c58:	425b      	negs	r3, r3
 8009c5a:	61a3      	str	r3, [r4, #24]
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	b943      	cbnz	r3, 8009c72 <__swsetup_r+0xc6>
 8009c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c64:	d1ba      	bne.n	8009bdc <__swsetup_r+0x30>
 8009c66:	bd70      	pop	{r4, r5, r6, pc}
 8009c68:	0781      	lsls	r1, r0, #30
 8009c6a:	bf58      	it	pl
 8009c6c:	6963      	ldrpl	r3, [r4, #20]
 8009c6e:	60a3      	str	r3, [r4, #8]
 8009c70:	e7f4      	b.n	8009c5c <__swsetup_r+0xb0>
 8009c72:	2000      	movs	r0, #0
 8009c74:	e7f7      	b.n	8009c66 <__swsetup_r+0xba>
 8009c76:	bf00      	nop
 8009c78:	20000028 	.word	0x20000028
 8009c7c:	0800a40c 	.word	0x0800a40c
 8009c80:	0800a42c 	.word	0x0800a42c
 8009c84:	0800a3ec 	.word	0x0800a3ec

08009c88 <__assert_func>:
 8009c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c8a:	4614      	mov	r4, r2
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <__assert_func+0x2c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4605      	mov	r5, r0
 8009c94:	68d8      	ldr	r0, [r3, #12]
 8009c96:	b14c      	cbz	r4, 8009cac <__assert_func+0x24>
 8009c98:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <__assert_func+0x30>)
 8009c9a:	9100      	str	r1, [sp, #0]
 8009c9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ca0:	4906      	ldr	r1, [pc, #24]	; (8009cbc <__assert_func+0x34>)
 8009ca2:	462b      	mov	r3, r5
 8009ca4:	f000 f8e0 	bl	8009e68 <fiprintf>
 8009ca8:	f7fd fb10 	bl	80072cc <abort>
 8009cac:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <__assert_func+0x38>)
 8009cae:	461c      	mov	r4, r3
 8009cb0:	e7f3      	b.n	8009c9a <__assert_func+0x12>
 8009cb2:	bf00      	nop
 8009cb4:	20000028 	.word	0x20000028
 8009cb8:	0800a5bd 	.word	0x0800a5bd
 8009cbc:	0800a5ca 	.word	0x0800a5ca
 8009cc0:	0800a5f8 	.word	0x0800a5f8

08009cc4 <_close_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4d06      	ldr	r5, [pc, #24]	; (8009ce0 <_close_r+0x1c>)
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4604      	mov	r4, r0
 8009ccc:	4608      	mov	r0, r1
 8009cce:	602b      	str	r3, [r5, #0]
 8009cd0:	f7f7 fc57 	bl	8001582 <_close>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_close_r+0x1a>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_close_r+0x1a>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	20000394 	.word	0x20000394

08009ce4 <__sflush_r>:
 8009ce4:	898a      	ldrh	r2, [r1, #12]
 8009ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	4605      	mov	r5, r0
 8009cec:	0710      	lsls	r0, r2, #28
 8009cee:	460c      	mov	r4, r1
 8009cf0:	d458      	bmi.n	8009da4 <__sflush_r+0xc0>
 8009cf2:	684b      	ldr	r3, [r1, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dc05      	bgt.n	8009d04 <__sflush_r+0x20>
 8009cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dc02      	bgt.n	8009d04 <__sflush_r+0x20>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d0f9      	beq.n	8009cfe <__sflush_r+0x1a>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d10:	682f      	ldr	r7, [r5, #0]
 8009d12:	602b      	str	r3, [r5, #0]
 8009d14:	d032      	beq.n	8009d7c <__sflush_r+0x98>
 8009d16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	075a      	lsls	r2, r3, #29
 8009d1c:	d505      	bpl.n	8009d2a <__sflush_r+0x46>
 8009d1e:	6863      	ldr	r3, [r4, #4]
 8009d20:	1ac0      	subs	r0, r0, r3
 8009d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d24:	b10b      	cbz	r3, 8009d2a <__sflush_r+0x46>
 8009d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d28:	1ac0      	subs	r0, r0, r3
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d30:	6a21      	ldr	r1, [r4, #32]
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b0      	blx	r6
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	d106      	bne.n	8009d4a <__sflush_r+0x66>
 8009d3c:	6829      	ldr	r1, [r5, #0]
 8009d3e:	291d      	cmp	r1, #29
 8009d40:	d82c      	bhi.n	8009d9c <__sflush_r+0xb8>
 8009d42:	4a2a      	ldr	r2, [pc, #168]	; (8009dec <__sflush_r+0x108>)
 8009d44:	40ca      	lsrs	r2, r1
 8009d46:	07d6      	lsls	r6, r2, #31
 8009d48:	d528      	bpl.n	8009d9c <__sflush_r+0xb8>
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	6062      	str	r2, [r4, #4]
 8009d4e:	04d9      	lsls	r1, r3, #19
 8009d50:	6922      	ldr	r2, [r4, #16]
 8009d52:	6022      	str	r2, [r4, #0]
 8009d54:	d504      	bpl.n	8009d60 <__sflush_r+0x7c>
 8009d56:	1c42      	adds	r2, r0, #1
 8009d58:	d101      	bne.n	8009d5e <__sflush_r+0x7a>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	b903      	cbnz	r3, 8009d60 <__sflush_r+0x7c>
 8009d5e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d62:	602f      	str	r7, [r5, #0]
 8009d64:	2900      	cmp	r1, #0
 8009d66:	d0ca      	beq.n	8009cfe <__sflush_r+0x1a>
 8009d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d6c:	4299      	cmp	r1, r3
 8009d6e:	d002      	beq.n	8009d76 <__sflush_r+0x92>
 8009d70:	4628      	mov	r0, r5
 8009d72:	f7fd faed 	bl	8007350 <_free_r>
 8009d76:	2000      	movs	r0, #0
 8009d78:	6360      	str	r0, [r4, #52]	; 0x34
 8009d7a:	e7c1      	b.n	8009d00 <__sflush_r+0x1c>
 8009d7c:	6a21      	ldr	r1, [r4, #32]
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b0      	blx	r6
 8009d84:	1c41      	adds	r1, r0, #1
 8009d86:	d1c7      	bne.n	8009d18 <__sflush_r+0x34>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0c4      	beq.n	8009d18 <__sflush_r+0x34>
 8009d8e:	2b1d      	cmp	r3, #29
 8009d90:	d001      	beq.n	8009d96 <__sflush_r+0xb2>
 8009d92:	2b16      	cmp	r3, #22
 8009d94:	d101      	bne.n	8009d9a <__sflush_r+0xb6>
 8009d96:	602f      	str	r7, [r5, #0]
 8009d98:	e7b1      	b.n	8009cfe <__sflush_r+0x1a>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	e7ad      	b.n	8009d00 <__sflush_r+0x1c>
 8009da4:	690f      	ldr	r7, [r1, #16]
 8009da6:	2f00      	cmp	r7, #0
 8009da8:	d0a9      	beq.n	8009cfe <__sflush_r+0x1a>
 8009daa:	0793      	lsls	r3, r2, #30
 8009dac:	680e      	ldr	r6, [r1, #0]
 8009dae:	bf08      	it	eq
 8009db0:	694b      	ldreq	r3, [r1, #20]
 8009db2:	600f      	str	r7, [r1, #0]
 8009db4:	bf18      	it	ne
 8009db6:	2300      	movne	r3, #0
 8009db8:	eba6 0807 	sub.w	r8, r6, r7
 8009dbc:	608b      	str	r3, [r1, #8]
 8009dbe:	f1b8 0f00 	cmp.w	r8, #0
 8009dc2:	dd9c      	ble.n	8009cfe <__sflush_r+0x1a>
 8009dc4:	6a21      	ldr	r1, [r4, #32]
 8009dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dc8:	4643      	mov	r3, r8
 8009dca:	463a      	mov	r2, r7
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b0      	blx	r6
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	dc06      	bgt.n	8009de2 <__sflush_r+0xfe>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	e78e      	b.n	8009d00 <__sflush_r+0x1c>
 8009de2:	4407      	add	r7, r0
 8009de4:	eba8 0800 	sub.w	r8, r8, r0
 8009de8:	e7e9      	b.n	8009dbe <__sflush_r+0xda>
 8009dea:	bf00      	nop
 8009dec:	20400001 	.word	0x20400001

08009df0 <_fflush_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	690b      	ldr	r3, [r1, #16]
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b913      	cbnz	r3, 8009e00 <_fflush_r+0x10>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	b118      	cbz	r0, 8009e0a <_fflush_r+0x1a>
 8009e02:	6983      	ldr	r3, [r0, #24]
 8009e04:	b90b      	cbnz	r3, 8009e0a <_fflush_r+0x1a>
 8009e06:	f7fe ff27 	bl	8008c58 <__sinit>
 8009e0a:	4b14      	ldr	r3, [pc, #80]	; (8009e5c <_fflush_r+0x6c>)
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	d11b      	bne.n	8009e48 <_fflush_r+0x58>
 8009e10:	686c      	ldr	r4, [r5, #4]
 8009e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0ef      	beq.n	8009dfa <_fflush_r+0xa>
 8009e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e1c:	07d0      	lsls	r0, r2, #31
 8009e1e:	d404      	bmi.n	8009e2a <_fflush_r+0x3a>
 8009e20:	0599      	lsls	r1, r3, #22
 8009e22:	d402      	bmi.n	8009e2a <_fflush_r+0x3a>
 8009e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e26:	f7fe ffba 	bl	8008d9e <__retarget_lock_acquire_recursive>
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f7ff ff59 	bl	8009ce4 <__sflush_r>
 8009e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e34:	07da      	lsls	r2, r3, #31
 8009e36:	4605      	mov	r5, r0
 8009e38:	d4e0      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	059b      	lsls	r3, r3, #22
 8009e3e:	d4dd      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e42:	f7fe ffad 	bl	8008da0 <__retarget_lock_release_recursive>
 8009e46:	e7d9      	b.n	8009dfc <_fflush_r+0xc>
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <_fflush_r+0x70>)
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	d101      	bne.n	8009e52 <_fflush_r+0x62>
 8009e4e:	68ac      	ldr	r4, [r5, #8]
 8009e50:	e7df      	b.n	8009e12 <_fflush_r+0x22>
 8009e52:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <_fflush_r+0x74>)
 8009e54:	429c      	cmp	r4, r3
 8009e56:	bf08      	it	eq
 8009e58:	68ec      	ldreq	r4, [r5, #12]
 8009e5a:	e7da      	b.n	8009e12 <_fflush_r+0x22>
 8009e5c:	0800a40c 	.word	0x0800a40c
 8009e60:	0800a42c 	.word	0x0800a42c
 8009e64:	0800a3ec 	.word	0x0800a3ec

08009e68 <fiprintf>:
 8009e68:	b40e      	push	{r1, r2, r3}
 8009e6a:	b503      	push	{r0, r1, lr}
 8009e6c:	4601      	mov	r1, r0
 8009e6e:	ab03      	add	r3, sp, #12
 8009e70:	4805      	ldr	r0, [pc, #20]	; (8009e88 <fiprintf+0x20>)
 8009e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e76:	6800      	ldr	r0, [r0, #0]
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	f7ff fcbf 	bl	80097fc <_vfiprintf_r>
 8009e7e:	b002      	add	sp, #8
 8009e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e84:	b003      	add	sp, #12
 8009e86:	4770      	bx	lr
 8009e88:	20000028 	.word	0x20000028

08009e8c <_lseek_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	; (8009eac <_lseek_r+0x20>)
 8009e90:	4604      	mov	r4, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f7 fb98 	bl	80015d0 <_lseek>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_lseek_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_lseek_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20000394 	.word	0x20000394

08009eb0 <__swhatbuf_r>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	460e      	mov	r6, r1
 8009eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	b096      	sub	sp, #88	; 0x58
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	461d      	mov	r5, r3
 8009ec0:	da07      	bge.n	8009ed2 <__swhatbuf_r+0x22>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	89b3      	ldrh	r3, [r6, #12]
 8009ec8:	061a      	lsls	r2, r3, #24
 8009eca:	d410      	bmi.n	8009eee <__swhatbuf_r+0x3e>
 8009ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ed0:	e00e      	b.n	8009ef0 <__swhatbuf_r+0x40>
 8009ed2:	466a      	mov	r2, sp
 8009ed4:	f000 f8c2 	bl	800a05c <_fstat_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	dbf2      	blt.n	8009ec2 <__swhatbuf_r+0x12>
 8009edc:	9a01      	ldr	r2, [sp, #4]
 8009ede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ee6:	425a      	negs	r2, r3
 8009ee8:	415a      	adcs	r2, r3
 8009eea:	602a      	str	r2, [r5, #0]
 8009eec:	e7ee      	b.n	8009ecc <__swhatbuf_r+0x1c>
 8009eee:	2340      	movs	r3, #64	; 0x40
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	b016      	add	sp, #88	; 0x58
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}

08009ef8 <__smakebuf_r>:
 8009ef8:	898b      	ldrh	r3, [r1, #12]
 8009efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009efc:	079d      	lsls	r5, r3, #30
 8009efe:	4606      	mov	r6, r0
 8009f00:	460c      	mov	r4, r1
 8009f02:	d507      	bpl.n	8009f14 <__smakebuf_r+0x1c>
 8009f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	6123      	str	r3, [r4, #16]
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	6163      	str	r3, [r4, #20]
 8009f10:	b002      	add	sp, #8
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
 8009f14:	ab01      	add	r3, sp, #4
 8009f16:	466a      	mov	r2, sp
 8009f18:	f7ff ffca 	bl	8009eb0 <__swhatbuf_r>
 8009f1c:	9900      	ldr	r1, [sp, #0]
 8009f1e:	4605      	mov	r5, r0
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7fd fa65 	bl	80073f0 <_malloc_r>
 8009f26:	b948      	cbnz	r0, 8009f3c <__smakebuf_r+0x44>
 8009f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2c:	059a      	lsls	r2, r3, #22
 8009f2e:	d4ef      	bmi.n	8009f10 <__smakebuf_r+0x18>
 8009f30:	f023 0303 	bic.w	r3, r3, #3
 8009f34:	f043 0302 	orr.w	r3, r3, #2
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	e7e3      	b.n	8009f04 <__smakebuf_r+0xc>
 8009f3c:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <__smakebuf_r+0x7c>)
 8009f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	6020      	str	r0, [r4, #0]
 8009f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	9b00      	ldr	r3, [sp, #0]
 8009f4c:	6163      	str	r3, [r4, #20]
 8009f4e:	9b01      	ldr	r3, [sp, #4]
 8009f50:	6120      	str	r0, [r4, #16]
 8009f52:	b15b      	cbz	r3, 8009f6c <__smakebuf_r+0x74>
 8009f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 f891 	bl	800a080 <_isatty_r>
 8009f5e:	b128      	cbz	r0, 8009f6c <__smakebuf_r+0x74>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f023 0303 	bic.w	r3, r3, #3
 8009f66:	f043 0301 	orr.w	r3, r3, #1
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	89a0      	ldrh	r0, [r4, #12]
 8009f6e:	4305      	orrs	r5, r0
 8009f70:	81a5      	strh	r5, [r4, #12]
 8009f72:	e7cd      	b.n	8009f10 <__smakebuf_r+0x18>
 8009f74:	08008bf1 	.word	0x08008bf1

08009f78 <__ascii_mbtowc>:
 8009f78:	b082      	sub	sp, #8
 8009f7a:	b901      	cbnz	r1, 8009f7e <__ascii_mbtowc+0x6>
 8009f7c:	a901      	add	r1, sp, #4
 8009f7e:	b142      	cbz	r2, 8009f92 <__ascii_mbtowc+0x1a>
 8009f80:	b14b      	cbz	r3, 8009f96 <__ascii_mbtowc+0x1e>
 8009f82:	7813      	ldrb	r3, [r2, #0]
 8009f84:	600b      	str	r3, [r1, #0]
 8009f86:	7812      	ldrb	r2, [r2, #0]
 8009f88:	1e10      	subs	r0, r2, #0
 8009f8a:	bf18      	it	ne
 8009f8c:	2001      	movne	r0, #1
 8009f8e:	b002      	add	sp, #8
 8009f90:	4770      	bx	lr
 8009f92:	4610      	mov	r0, r2
 8009f94:	e7fb      	b.n	8009f8e <__ascii_mbtowc+0x16>
 8009f96:	f06f 0001 	mvn.w	r0, #1
 8009f9a:	e7f8      	b.n	8009f8e <__ascii_mbtowc+0x16>

08009f9c <memmove>:
 8009f9c:	4288      	cmp	r0, r1
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	eb01 0402 	add.w	r4, r1, r2
 8009fa4:	d902      	bls.n	8009fac <memmove+0x10>
 8009fa6:	4284      	cmp	r4, r0
 8009fa8:	4623      	mov	r3, r4
 8009faa:	d807      	bhi.n	8009fbc <memmove+0x20>
 8009fac:	1e43      	subs	r3, r0, #1
 8009fae:	42a1      	cmp	r1, r4
 8009fb0:	d008      	beq.n	8009fc4 <memmove+0x28>
 8009fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fba:	e7f8      	b.n	8009fae <memmove+0x12>
 8009fbc:	4402      	add	r2, r0
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	428a      	cmp	r2, r1
 8009fc2:	d100      	bne.n	8009fc6 <memmove+0x2a>
 8009fc4:	bd10      	pop	{r4, pc}
 8009fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fce:	e7f7      	b.n	8009fc0 <memmove+0x24>

08009fd0 <_realloc_r>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	460e      	mov	r6, r1
 8009fd8:	b921      	cbnz	r1, 8009fe4 <_realloc_r+0x14>
 8009fda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fde:	4611      	mov	r1, r2
 8009fe0:	f7fd ba06 	b.w	80073f0 <_malloc_r>
 8009fe4:	b922      	cbnz	r2, 8009ff0 <_realloc_r+0x20>
 8009fe6:	f7fd f9b3 	bl	8007350 <_free_r>
 8009fea:	4625      	mov	r5, r4
 8009fec:	4628      	mov	r0, r5
 8009fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff0:	f000 f856 	bl	800a0a0 <_malloc_usable_size_r>
 8009ff4:	42a0      	cmp	r0, r4
 8009ff6:	d20f      	bcs.n	800a018 <_realloc_r+0x48>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	f7fd f9f8 	bl	80073f0 <_malloc_r>
 800a000:	4605      	mov	r5, r0
 800a002:	2800      	cmp	r0, #0
 800a004:	d0f2      	beq.n	8009fec <_realloc_r+0x1c>
 800a006:	4631      	mov	r1, r6
 800a008:	4622      	mov	r2, r4
 800a00a:	f7fe feca 	bl	8008da2 <memcpy>
 800a00e:	4631      	mov	r1, r6
 800a010:	4638      	mov	r0, r7
 800a012:	f7fd f99d 	bl	8007350 <_free_r>
 800a016:	e7e9      	b.n	8009fec <_realloc_r+0x1c>
 800a018:	4635      	mov	r5, r6
 800a01a:	e7e7      	b.n	8009fec <_realloc_r+0x1c>

0800a01c <_read_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4d07      	ldr	r5, [pc, #28]	; (800a03c <_read_r+0x20>)
 800a020:	4604      	mov	r4, r0
 800a022:	4608      	mov	r0, r1
 800a024:	4611      	mov	r1, r2
 800a026:	2200      	movs	r2, #0
 800a028:	602a      	str	r2, [r5, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	f7f7 fa70 	bl	8001510 <_read>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d102      	bne.n	800a03a <_read_r+0x1e>
 800a034:	682b      	ldr	r3, [r5, #0]
 800a036:	b103      	cbz	r3, 800a03a <_read_r+0x1e>
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	20000394 	.word	0x20000394

0800a040 <__ascii_wctomb>:
 800a040:	b149      	cbz	r1, 800a056 <__ascii_wctomb+0x16>
 800a042:	2aff      	cmp	r2, #255	; 0xff
 800a044:	bf85      	ittet	hi
 800a046:	238a      	movhi	r3, #138	; 0x8a
 800a048:	6003      	strhi	r3, [r0, #0]
 800a04a:	700a      	strbls	r2, [r1, #0]
 800a04c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a050:	bf98      	it	ls
 800a052:	2001      	movls	r0, #1
 800a054:	4770      	bx	lr
 800a056:	4608      	mov	r0, r1
 800a058:	4770      	bx	lr
	...

0800a05c <_fstat_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	; (800a07c <_fstat_r+0x20>)
 800a060:	2300      	movs	r3, #0
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	4611      	mov	r1, r2
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	f7f7 fa96 	bl	800159a <_fstat>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	d102      	bne.n	800a078 <_fstat_r+0x1c>
 800a072:	682b      	ldr	r3, [r5, #0]
 800a074:	b103      	cbz	r3, 800a078 <_fstat_r+0x1c>
 800a076:	6023      	str	r3, [r4, #0]
 800a078:	bd38      	pop	{r3, r4, r5, pc}
 800a07a:	bf00      	nop
 800a07c:	20000394 	.word	0x20000394

0800a080 <_isatty_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d06      	ldr	r5, [pc, #24]	; (800a09c <_isatty_r+0x1c>)
 800a084:	2300      	movs	r3, #0
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	602b      	str	r3, [r5, #0]
 800a08c:	f7f7 fa95 	bl	80015ba <_isatty>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_isatty_r+0x1a>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	b103      	cbz	r3, 800a09a <_isatty_r+0x1a>
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	20000394 	.word	0x20000394

0800a0a0 <_malloc_usable_size_r>:
 800a0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a4:	1f18      	subs	r0, r3, #4
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bfbc      	itt	lt
 800a0aa:	580b      	ldrlt	r3, [r1, r0]
 800a0ac:	18c0      	addlt	r0, r0, r3
 800a0ae:	4770      	bx	lr

0800a0b0 <_init>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	bf00      	nop
 800a0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0b6:	bc08      	pop	{r3}
 800a0b8:	469e      	mov	lr, r3
 800a0ba:	4770      	bx	lr

0800a0bc <_fini>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr
